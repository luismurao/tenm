?tenm
?tenm::sp_temporal_data
getwd()
?tenm::sp_temporal_data
library(tenm)
?tenm::sp_temporal_data
?temn
?tenm
library(tenm)
?tenm
?tenm::sp_temporal_data
library(tenm)
?tenm::sp_temporal_data
library(tenm)
library(tenm)
devtools::load_all(".")
?tenm::sp_temporal_data
library(tenm)
?tenm::sp_temporal_data
devtools::build(vignettes = FALSE)
?tenm::sp_temporal_data
library(tenm)
library(tenm)
?tenm::sp_temporal_data
sp_temporal_data <- function(occs,longitude,
latitude,sp_date_var,
occ_date_format="y",
layers_date_format= "y",
layers_by_date_dir,layers_ext="*.tif$"){
classes_sp_data <- c("SpatialPointsDataFrame","data.frame")
if(class(occs) %in% classes_sp_data){
if(methods::is(occs, "SpatialPointsDataFrame")){
lon_lat_vars <- colnames(occs@coords)
occs <- data.frame(occs@coords,occs@data)
}
if(methods::is(occs, "data.frame")) {
lon_lat_vars <- c(longitude,latitude)
if(!all(lon_lat_vars %in% names(occs)))
stop("\n Please provide species a valid 'longitude' and 'latitude'")
}
if(sp_date_var %in% names(occs)){
nearest_date_id <- function(occ_dates,layers_dates){
r1 <-  seq_along(occ_dates) %>% purrr::map_int(function(x){
id_layer_dir <- which.min(abs(occ_dates[x] - layers_dates))
return(id_layer_dir)
}) #%>% do.call('c', .)
return(r1)
}
date_formats <- c("y","ym","ymd","my","myd","dmy")
if(!occ_date_format %in% date_formats)
stop("occ_date_format should have one of these values ",
paste(date_formats,collapse = " "))
if(occ_date_format == date_formats[1]){
date_in_occs <- lubridate::ymd(occs[,sp_date_var], truncated = 2L)
} else if(occ_date_format == date_formats[2]){
date_in_occs <- lubridate::ym(occs[,sp_date_var])
} else if(occ_date_format == date_formats[3]){
date_in_occs <- lubridate::ymd(occs[,sp_date_var])
} else if(occ_date_format == date_formats[4]){
date_in_occs <- lubridate::my(occs[,sp_date_var])
} else if(occ_date_format == date_formats[5]){
date_in_occs <- lubridate::myd(occs[,sp_date_var])
} else if(occ_date_format == date_formats[6]){
date_in_occs <- lubridate::dmy(occs[,sp_date_var])
}
layers_names <- list.dirs(path = layers_by_date_dir,recursive = F,
full.names = F)
if(!layers_date_format %in% date_formats)
stop("layers_date_format should have one of these values ",
paste(date_formats,collapse = " "))
if(layers_date_format == date_formats[1]){
layers_dates <- lubridate::ymd(layers_names, truncated = 2L)
} else if(layers_date_format == date_formats[2]){
layers_dates <- lubridate::ym(layers_names)
} else if(layers_date_format == date_formats[3]){
layers_dates <- lubridate::ymd(layers_names)
} else if(layers_date_format == date_formats[4]){
layers_dates <- lubridate::my(layers_names)
} else if(layers_date_format == date_formats[5]){
layers_dates <- lubridate::myd(layers_names)
} else if(layers_date_format == date_formats[6]){
layers_dates <- lubridate::dmy(layers_names)
}
date_in_occs_index <- which(!is.na(date_in_occs))
date_sps <- date_in_occs[date_in_occs_index]
# environmental layers by date
dates_ids <- nearest_date_id(occ_dates = date_sps,
layers_dates = layers_dates)
layers_all <- list.dirs(path = layers_by_date_dir,recursive = F,
full.names = T)
temporal_df <- data.frame(occs[date_in_occs_index,c(lon_lat_vars,sp_date_var)],
layer_dates = layers_dates[dates_ids],
layers_path=layers_all[dates_ids])
sp_temp_data <- list(temporal_df = temporal_df,
sp_date_var = sp_date_var,
lon_lat_vars =lon_lat_vars ,
#layers_path = layers_all[dates_ids],
layers_ext= layers_ext)
class(sp_temp_data) <- c("sp.temporal.modeling")
return(sp_temp_data)
}
else
stop("\n Please provide species a valid 'date_var'")
}
else
stop("\n Please provide species occurrence data as a 'data.frame' or as a
'SpatialPointsDataFrame'")
}
devtools::build(vignettes = FALSE)
devtools::build(vignettes = FALSE)
?tenm::sp_temporal_data
library(tenm)
?tenm::sp_temporal_data
?tenm::sp_temporal_data
?tenm
library(tenm)
library(tenm)
?tenm
??tenm
help(tenm)
?tenm::sp_temporal_data
library(tenm)
?tenm::sp_temporal_data
?tenm::sp_temporal_data
library(tenm)
?tenm::sp_temporal_data
?tenm::sp_temporal_data
