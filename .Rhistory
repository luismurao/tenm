legend("bottomleft",legend = sort(unique(abronia$year)),
pch=19,col = levels(as.factor(abronia$year)))
plot(abronia$decimalLongitude, abronia$decimalLatitude,
col=as.factor(abronia$year),pch=19, cex=0.75,
xlab="Longitude",ylab="Latitude",xlim=c(-98.5,-96.8))
legend("bottomleft",legend = sort(unique(abronia$year)),
pch=19,col = terrain.colors(length(abronia$year)))
terrain.colors(length(abronia$year))
par(mar=c(4,4,2,2))
plot(abronia$decimalLongitude, abronia$decimalLatitude,
col=terrain.colors(length(abronia$year)),pch=19, cex=0.75,
xlab="Longitude",ylab="Latitude",xlim=c(-98.5,-96.8))
legend("bottomleft",legend = sort(unique(abronia$year)),
pch=19,col = terrain.colors(length(abronia$year)))
?terrain.colors
par(mar=c(4,4,2,2))
plot(abronia$decimalLongitude, abronia$decimalLatitude,
col=hcl.colors(length(abronia$year)),pch=19, cex=0.75,
xlab="Longitude",ylab="Latitude",xlim=c(-98.5,-96.8))
legend("bottomleft",legend = sort(unique(abronia$year)),
pch=19,col = hcl.colors(length(abronia$year)))
op <- par(cex = 1.5)
par(mar=c(4,4,2,2))
plot(abronia$decimalLongitude, abronia$decimalLatitude,
col=hcl.colors(length(abronia$year)),pch=19, cex=0.75,
xlab="Longitude",ylab="Latitude",xlim=c(-98.5,-96.8))
legend("bottomleft",legend = sort(unique(abronia$year)),
pch=19,col = hcl.colors(length(abronia$year)))
par(mar=c(4,4,2,2))
plot(abronia$decimalLongitude, abronia$decimalLatitude,
col=hcl.colors(length(abronia$year)),pch=19, cex=0.75,
xlab="Longitude",ylab="Latitude",xlim=c(-98.5,-96.8))
legend("bottomleft",legend = sort(unique(abronia$year)),
pch=19,col = hcl.colors(length(abronia$year)))
par(mar=c(4,4,2,2))
plot(abronia$decimalLongitude, abronia$decimalLatitude,
col=hcl.colors(length(abronia$year)),pch=19, cex=0.75,
xlab="Longitude",ylab="Latitude",xlim=c(-98.5,-96.8))
legend("bottomleft",legend = sort(unique(abronia$year)),
cex=0.5,pt.cex = 1,
pch=19,col = hcl.colors(length(abronia$year)))
par(mar=c(4,4,2,2))
plot(abronia$decimalLongitude, abronia$decimalLatitude,
col=hcl.colors(length(abronia$year)),pch=19, cex=0.75,
xlab="Longitude",ylab="Latitude",xlim=c(-98.5,-96.8))
legend("bottomleft",legend = sort(unique(abronia$year)),
cex=0.75,pt.cex = 1,
pch=19,col = hcl.colors(length(abronia$year)))
sort(unique(abronia$year))
length(sort(unique(abronia$year)))
par(mar=c(4,4,2,2))
plot(abronia$decimalLongitude, abronia$decimalLatitude,
col=hcl.colors(length(abronia$year)),pch=19, cex=0.75,
xlab="Longitude",ylab="Latitude",xlim=c(-98.5,-96.8))
legend("bottomleft",legend = sort(unique(abronia$year))[1:16],
cex=0.75,pt.cex = 1,
pch=19,col = hcl.colors(length(abronia$year)))
colorss <- hcl.colors(length(abronia$year))
colorss
colorss <- hcl.colors(length(unique(abronia$year)))
colorss
plot(abronia$decimalLongitude, abronia$decimalLatitude,
col=colorss,pch=19, cex=0.75,
xlab="Longitude",ylab="Latitude",xlim=c(-98.5,-96.8))
colorss <- hcl.colors(length(unique(abronia$year)))
par(mar=c(4,4,2,2))
plot(abronia$decimalLongitude, abronia$decimalLatitude,
col=colorss,pch=19, cex=0.75,
xlab="Longitude",ylab="Latitude",xlim=c(-98.5,-96.8))
legend("bottomleft",legend = sort(unique(abronia$year))[1:16],
cex=0.75,pt.cex = 1,
pch=19,col =colorss[1:16])
colorss <- hcl.colors(length(unique(abronia$year)))
par(mar=c(4,4,2,2))
plot(abronia$decimalLongitude, abronia$decimalLatitude,
col=colorss,pch=19, cex=0.75,
xlab="Longitude",ylab="Latitude",xlim=c(-98.5,-96.8))
legend("bottomleft",legend = sort(unique(abronia$year))[1:20],
cex=0.75,pt.cex = 1,
pch=19,col =colorss[1:20])
colorss <- hcl.colors(length(unique(abronia$year)))
par(mar=c(4,4,2,2))
plot(abronia$decimalLongitude, abronia$decimalLatitude,
col=colorss,pch=19, cex=0.75,
xlab="Longitude",ylab="Latitude",xlim=c(-98.5,-96.8))
legend("bottomleft",legend = sort(unique(abronia$year))[1:20],
cex=0.75,pt.cex = 1,
pch=19,col =colorss[1:20])
legend("bottomright",legend = sort(unique(abronia$year))[21:length(unique(abronia$year))],
cex=0.75,pt.cex = 1,
pch=19,col =colorss[21:length(unique(abronia$year))])
colorss <- hcl.colors(length(unique(abronia$year)))
par(mar=c(4,4,2,2))
plot(abronia$decimalLongitude, abronia$decimalLatitude,
col=colorss,pch=19, cex=0.75,
xlab="Longitude",ylab="Latitude",xlim=c(-98.5,-96.8))
legend("bottomleft",legend = sort(unique(abronia$year))[1:20],
cex=0.75,pt.cex = 1,bty = "n",
pch=19,col =colorss[1:20])
legend("bottomright",
legend = sort(unique(abronia$year))[21:length(unique(abronia$year))],
cex=0.75,pt.cex = 1,bty = "n",
pch=19,col =colorss[21:length(unique(abronia$year))])
colorss <- hcl.colors(length(unique(abronia$year)))
par(mar=c(4,4,2,2))
plot(abronia$decimalLongitude, abronia$decimalLatitude,
col=colorss,pch=19, cex=0.75,
xlab="Longitude",ylab="Latitude",xlim=c(-98.25,-96.7))
legend("bottomleft",legend = sort(unique(abronia$year))[1:20],
cex=0.75,pt.cex = 1,bty = "n",
pch=19,col =colorss[1:20])
legend("bottomright",
legend = sort(unique(abronia$year))[21:length(unique(abronia$year))],
cex=0.75,pt.cex = 1,bty = "n",
pch=19,col =colorss[21:length(unique(abronia$year))])
colorss <- hcl.colors(length(unique(abronia$year)))
par(mar=c(4,4,2,2))
plot(abronia$decimalLongitude, abronia$decimalLatitude,
col=colorss,pch=19, cex=0.75,
xlab="Longitude",ylab="Latitude",xlim=c(-98.35,-96.7))
legend("bottomleft",legend = sort(unique(abronia$year))[1:20],
cex=0.75,pt.cex = 1,bty = "n",
pch=19,col =colorss[1:20])
legend("bottomright",
legend = sort(unique(abronia$year))[21:length(unique(abronia$year))],
cex=0.75,pt.cex = 1,bty = "n",
pch=19,col =colorss[21:length(unique(abronia$year))])
?tenm::clean_dup
# Load a modeling layer
tempora_layers_dir <- system.file("extdata/bio",package = "tenm")
tenm_mask <- terra::rast(file.path(tempora_layers_dir,"1939/bio_01.tif"))
tenm_mask
tempora_layers_dir <- system.file("extdata/bio",package = "tenm")
tenm_mask <- terra::rast(file.path(tempora_layers_dir,"1939/bio_01.tif"))
ab_1 <- tenm::clean_dup(data =abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
threshold = terra::res(tenm_mask),
by_mask = FALSE,
raster_mask = NULL)
ab_1
tidyr::as_tibble(ab_1)
data("abronia")
head(abronia)
dim(abronia)
dim(abronia)
ab_by_mask <- tenm::clean_dup(data =abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
threshold = terra::res(tenm_mask),
by_mask = TRUE,
raster_mask = tenm_mask)
tidyr::as_tibble(ab_by_mask)
?tenm::sp_temporal_data
tempora_layers_dir <- system.file("extdata/bio",package = "tenm")
print(tempora_layers_dir)
list.dirs(tempora_layers_dir)
head(list.files(list.dirs(tempora_layers_dir)[2]))
head(list.files(list.dirs(tempora_layers_dir)[2],pattern = ".tif$"))
head(list.dirs(tempora_layers_dir)[-1])
head(list.files(list.dirs(tempora_layers_dir)[2],pattern = ".tif$"))
list.files(list.dirs(tempora_layers_dir)[2],pattern = ".tif$")
list.dirs(tempora_layers_dir,full.names = FALSE)
list.dirs(tempora_layers_dir,recursive = FALSE)
abt <- tenm::sp_temporal_data(occs = abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
sp_date_var = "year",
occ_date_format="y",
layers_date_format= "y",
layers_by_date_dir = tempora_layers_dir,
layers_ext="*.tif$")
abt
# See the temporal data.frame
tidyr::as_tibble(headabt$temporal_df)
# See the names of the slots
names(abt)
abt$sp_date_var
tidyr::as_tibble(head(abt$temporal_df))
?tenm::ex_by_date
future::plan("multisession",workers=2)
abex <- tenm::ex_by_date(this_species = abtc,
train_prop=0.7)
future::plan("sequential")
abex
abtc
abt
abex$temporal_df
future::plan("multisession",workers=2)
abbg <- tenm::bg_by_date(this_species = abex,
buffer_ngbs=10,n_bg=10000)
future::plan("sequential")
abbg
# SWD table for occurrence records
occ_swd <- tdf2swd(this_species=abex,sp_name="abro_gram")
occ_swd <- tdf2swd(this_species=abex,sp_name="abro_gram")
# SWD table for background data
bg_swd <- tdf2swd(this_species=abbg)
occ_swd
abt
plot(ab_1$decimalLongitude, ab_1$decimalLatitude,
col=colorss,pch=19, cex=0.75,
xlab="Longitude",ylab="Latitude",xlim=c(-98.35,-96.7))
legend("bottomleft",legend = sort(unique(ab_1$year))[1:10],
cex=0.85,pt.cex = 1,bty = "n",
pch=19,col =colorss[1:20])
colors2
colors2 <- hcl.colors(length(unique(abtc$temporal_df$year)))
colors2
ab_1
abt
varcorrs <- tenm::correlation_finder(environmental_data =
abex$env_data[,-ncol(abex$env_data)],
method = "spearman",
threshold = 0.8,
verbose = FALSE)
varcorrs
mod_sel <- tenm::tenm_selection(this_species = abbg,
omr_criteria =0.1,
ellipsoid_level=0.975,
vars2fit = vars2fit,
nvars_to_fit=c(2,3,4,5,6,7),
proc = T,
RandomPercent = 50,
NoOfIteration=1000,
parallel=TRUE,
n_cores=4)
varcorrs <- tenm::correlation_finder(environmental_data =
abex$env_data[,-ncol(abex$env_data)],
method = "spearman",
threshold = 0.8,
verbose = FALSE)
# Selected variables
vars2fit <- varcorrs$descriptors
print(vars2fit)
mod_sel <- tenm::tenm_selection(this_species = abbg,
omr_criteria =0.1,
ellipsoid_level=0.975,
vars2fit = vars2fit,
nvars_to_fit=c(2,3,4,5,6,7),
proc = T,
RandomPercent = 50,
NoOfIteration=1000,
parallel=TRUE,
n_cores=4)
mod_sel
names(mod_sel)
list.dirs(tempora_layers_dir,
recursive = FALSE)
env_layers_2016 <- list.dirs(tempora_layers_dir,
recursive = FALSE)[32]
suit_2016 <- predict(mod_sel,
model_variables = c("bio_01","bio_03","bio_12"),
layers_path =env_layers_2016 ,
layers_ext = ".tif$")
rgl::rglwidget()
layers_70_00_dir <- system.file("extdata/bio_1970_2000",package = "tenm")
suit_1970_2000 <- predict(mod_sel,
model_variables = c("bio_01","bio_03","bio_12"),
layers_path = layers_70_00_dir,
layers_ext = ".tif$")
rgl::rglwidget()
pkgdown::build_site()
pkgdown::build_site()
data(abronia)
tempora_layers_dir <- system.file("extdata/bio",package = "tenm")
tenm_mask <- terra::rast(file.path(tempora_layers_dir,"1939/bio_01.tif"))
# Clean duplicates without raster mask (just by distance threshold)
# First check the number of occurrence records
print(nrow(abronia))
# Clean duplicated records using a distance of ~ 18 km (0.1666667 grades)
ab_1 <- tenm::clean_dup(data =abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
threshold = terra::res(tenm_mask),
by_mask = FALSE,
raster_mask = NULL)
# Check number of records
print(nrow(ab_1))
# Clean duplicates using a raster mask
ab_2 <- tenm::clean_dup(data =abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
threshold = terra::res(tenm_mask)[1],
by_mask = TRUE,
raster_mask = tenm_mask,
n_ngbs = 0)
# Check number of records
print(nrow(ab_2))
ab_2 <- tenm::clean_dup(data =abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
threshold = terra::res(tenm_mask)[1],
by_mask = TRUE,
raster_mask = tenm_mask,
n_ngbs = 1)
# Check number of records
print(nrow(ab_2))
data =abronia
longitude = "decimalLongitude"
latitude = "decimalLatitude"
threshold = terra::res(tenm_mask)[1]
by_mask = TRUE
raster_mask = tenm_mask
n_ngbs = 1
data <- data[!is.na(data[,longitude]),]
data
by_mask == TRUE && methods::is(raster_mask, "SpatRaster")
dat_sp <- sf::st_as_sf(data,coords=c(longitude,latitude),
crs=sf::st_crs(raster_mask))
dat_sp
nbase <- 2*n_ngbs+1
ngMat <- base::matrix(rep(1,nbase*nbase),
ncol =nbase,byrow = T )
ngMat[n_ngbs+1,n_ngbs+1] <- 0
cellids <- terra::cellFromXY(raster_mask, sf::st_coordinates(dat_sp))
cellids
ids_nodup <- which(!duplicated (cellids))
ids_nodup
cellids2 <- cellids[ids_nodup]
cellids2
#dat2 <- dat_sp@data [ids_nodup,]
coo <- data.frame(sf::st_coordinates(dat_sp))
names(coo) <- c(longitude,latitude)
dat2 <- sf::st_drop_geometry(dat_sp)
dat2 <- data.frame(coo,dat2)
ncol(dat2)>=4
if(ncol(dat2)>=4){
dat2 <- dat2[ids_nodup,c(3,1,2,(4:ncol(dat2)))]
} else{
dat2 <- dat2[ids_nodup,c(3,1,2)]
}
n_ngbs == 0
dat2$cellid <- cellids2
dat2$cellid
dat2
cellids2 <- sort(cellids2)
cellids2
raster_mask
adj_cells <- terra::adjacent(x = raster_mask,cells=cellids2,
directions = ngMat,
pairs = TRUE)
adj_cells
adj_cellsL <- split(adj_cells[,2], adj_cells[,1])
adj_cellsL
ids_dups <- unique(unlist(adj_cellsL))
ids_dups
no_dups <- seq_len(nrow(data))
no_dups
length(ids_dups)>0L
no_dups <- no_dups[-ids_dups]
no_dups
dim(no_dups)
length(no_dups)
ids_dups
adj_cells <- terra::adjacent(x = raster_mask,cells=cellids2,
directions = ngMat,
pairs = TRUE)
adj_cells
cellids2
adj_cellsL <- split(adj_cells[,1], adj_cells[,2])
adj_cellsL
adj_cellsL <- split(adj_cells[,2], adj_cells[,1])
adj_cellsL
ids_dups <- unique(unlist(adj_cellsL))
ids_dups
which(no_dups %in% ids_dups)
no_dups <- seq_len(nrow(data))
no_dups
ids_dups
which(no_dups %in% ids_dups)
ids_dups <- which(no_dups %in% ids_dups)
ids_dups
if(length(ids_dups)>0L){
no_dups <- no_dups[-ids_dups]
}
dat3 <- dat2[no_dups,-ncol(dat2)]
dat3
dat2$cellid <- cellids2
cellids2 <- sort(cellids2)
adj_cells <- terra::adjacent(x = raster_mask,cells=cellids2,
directions = ngMat,
pairs = TRUE)
adj_cellsL <- split(adj_cells[,2], adj_cells[,1])
ids_dups <- unique(unlist(adj_cellsL))
no_dups <- seq_len(nrow(data))
no_dups <- which(no_dups %in% ids_dups)
no_dups
if(length(ids_dups)>0L){
no_dups <- no_dups[-ids_dups]
}
dat3 <- dat2[no_dups,-ncol(dat2)]
dat3
no_dups
dat2
data =abronia
longitude = "decimalLongitude"
latitude = "decimalLatitude"
threshold = terra::res(tenm_mask)[1]
by_mask = TRUE
raster_mask = tenm_mask
n_ngbs = 1
data <- data[!is.na(data[,longitude]),]
data
dat_sp <- sf::st_as_sf(data,coords=c(longitude,latitude),
crs=sf::st_crs(raster_mask))
nbase <- 2*n_ngbs+1
ngMat <- base::matrix(rep(1,nbase*nbase),
ncol =nbase,byrow = T )
ngMat[n_ngbs+1,n_ngbs+1] <- 0
cellids <- terra::cellFromXY(raster_mask, sf::st_coordinates(dat_sp))
ids_nodup <- which(!duplicated (cellids))
ids_nodup
cellids
ids_nodup <- which(!duplicated (cellids))
ids_nodup
cellids2 <- cellids[ids_nodup]
cellids2
#dat2 <- dat_sp@data [ids_nodup,]
coo <- data.frame(sf::st_coordinates(dat_sp))
names(coo) <- c(longitude,latitude)
dat2 <- sf::st_drop_geometry(dat_sp)
dat2 <- data.frame(coo,dat2)
dat2
if(ncol(dat2)>=4){
dat2 <- dat2[ids_nodup,c(3,1,2,(4:ncol(dat2)))]
} else{
dat2 <- dat2[ids_nodup,c(3,1,2)]
}
dat2
dat2$cellid <- cellids2
dat2
cellids2 <- sort(cellids2)
adj_cells <- terra::adjacent(x = raster_mask,cells=cellids2,
directions = ngMat,
pairs = TRUE)
adj_cells
cellids2
ids_dups <- unique(unlist(adj_cellsL))
ids_dups
cellids2
cellids2 %in% ids_dups
ids_dups
which(cellids2 %in% ids_dups)
cellids2[which(cellids2 %in% ids_dups)]
cellids2
adj_cellsL
ids_dups <- unique(unlist(adj_cellsL))
ids_dups
ids_dups
adj_cellsL <- split(adj_cells[,2], adj_cells[,1])
adj_cellsL
cellids2
?terra::adjacent
adj_cells <- terra::adjacent(x = raster_mask,cells=cellids2,
directions = ngMat,
pairs = TRUE)
adj_cells
which(adj_cells[,2] %in% cellids2)
occ_adj_id <- which(adj_cells[,2] %in% cellids2)
if(length(occ_adj_id)>0L){
adj_cells <- adj_cells[occ_adj_id,]
}
adj_cells
adj_cellsL <- split(adj_cells[,2], adj_cells[,1])
adj_cellsL
ids_dups <- unique(unlist(adj_cellsL))
ids_dups
adj_cells
adj_cellsL <- split(adj_cells[,2], adj_cells[,1])
adj_cellsL
adj_cellsL <- split(adj_cells[,2], adj_cells[,1])
targets <- names(adj_cellsL)
targets
keep <- rep(NA,length(targets ))
keep
j <- 1
focal <- targets[i]
focal
j <- 1
i=1
focal <- targets[i]
focal
focal %in% names(adj_cellsL)
vecinos <- as.character(adj_cellsL [[focal]])
vecinos
id_bas <- which(names(adj_cellsL) %in% vecinos)
id_bas
if(length(id_bas)>0L) adj_cellsL <- adj_cellsL[- id_bas]
adj_cellsL <- split(adj_cells[,2], adj_cells[,1])
targets <- names(adj_cellsL)
keep <- rep(NA,length(targets ))
j <- 1
for(i in seq_along(targets)){
focal <- targets[i]
if(focal %in% names(adj_cellsL)){
vecinos <- as.character(adj_cellsL [[focal]])
id_bas <- which(names(adj_cellsL) %in% vecinos)
if(length(id_bas)>0L) adj_cellsL <- adj_cellsL[- id_bas]
keep[j] <- as.numeric(focal)
j <- j+1
}
}
ids_nodup2 <- which(dat2$cellid %in% keep)
ids_nodup2
dat3 <- dat2[ids_nodup2,-ncol(dat2)]
dat3
library(tenm)
pkgdown::build_site()
library(tenm)
library(tenm)
library(tenm)
