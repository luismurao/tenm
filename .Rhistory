ngMat
ngMat[n_ngbs+1,n_ngbs+1] <- 0
cellids <- terra::cellFromXY(raster_mask, sf::st_coordinates(dat_sp))
cellids
ids_nodup <- which(!duplicated (cellids))
ids_nodup
cellids2 <- cellids[ids_nodup]
cellids2
#dat2 <- dat_sp@data [ids_nodup,]
coo <- data.frame(sf::st_coordinates(dat_sp))
names(coo) <- c(longitude,latitude)
dat2 <- sf::st_drop_geometry(dat_sp)
dat2 <- data.frame(coo,dat2)
dat2 <- dat2[,c(3,1,2,(4:ncol(dat2)))]
dat2
n_ngbs == 0
library(tenm)
library(tenm)
rm(list = ls())
data(abronia)
tempora_layers_dir <- system.file("extdata/bio",package = "tenm")
tenm_mask <- terra::rast(file.path(tempora_layers_dir,"1939/bio_01.tif"))
# Clean duplicates without raster mask (just by distance threshold)
# First check the number of occurrence records
print(nrow(abronia))
# Clean duplicated records using a distance of ~ 18 km (0.1666667 grades)
ab_1 <- tenm::clean_dup(data =abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
threshold = terra::res(tenm_mask),
by_mask = FALSE,
raster_mask = NULL)
# Check number of records
print(nrow(ab_1))
# Clean duplicates using a raster mask
ab_2 <- tenm::clean_dup(data =abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
threshold = terra::res(tenm_mask)[1],
by_mask = TRUE,
raster_mask = tenm_mask,
n_ngbs = 0)
# Check number of records
library(tenm)
rm(list = ls())
data(abronia)
tempora_layers_dir <- system.file("extdata/bio",package = "tenm")
tenm_mask <- terra::rast(file.path(tempora_layers_dir,"1939/bio_01.tif"))
# Clean duplicates without raster mask (just by distance threshold)
# First check the number of occurrence records
print(nrow(abronia))
# Clean duplicated records using a distance of ~ 18 km (0.1666667 grades)
ab_1 <- tenm::clean_dup(data =abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
threshold = terra::res(tenm_mask),
by_mask = FALSE,
raster_mask = NULL)
# Check number of records
print(nrow(ab_1))
# Clean duplicates using a raster mask
ab_2 <- tenm::clean_dup(data =abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
threshold = terra::res(tenm_mask)[1],
by_mask = TRUE,
raster_mask = tenm_mask,
n_ngbs = 0)
# Check number of records
print(nrow(ab_2))
library(tenm)
data("abronia")
tempora_layers_dir <- system.file("extdata/bio",package = "tenm")
tenm_mask <- terra::rast(file.path(tempora_layers_dir,"1939/bio_01.tif"))
# Clean duplicates without raster mask (just by distance threshold)
abt <- tenm::sp_temporal_data(occs = abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
sp_date_var = "year",
occ_date_format="y",
layers_date_format= "y",
layers_by_date_dir = tempora_layers_dir,
layers_ext="*.tif$")
abtc1 <- tenm::clean_dup_by_date(abt,threshold = terra::res(tenm_mask)[1])
# Check number of records
print(nrow(abtc1$temporal_df))
# Clean duplicates using a raster mask
abtc2 <- tenm::clean_dup_by_date(this_species = abt,
by_mask = TRUE,
threshold = terra::res(tenm_mask)[1],
raster_mask = tenm_mask[1],
n_ngbs = 0)
# Check number of records
print(nrow(abtc2$temporal_df))
print(nrow(abtc1$temporal_df))
abtc2 <- tenm::clean_dup_by_date(this_species = abt,
by_mask = TRUE,
threshold = terra::res(tenm_mask)[1],
raster_mask = tenm_mask[1],
n_ngbs = 0)
# Check number of records
print(nrow(abtc2$temporal_df))
terra::rast()
library(tenm)
stats::na.omit
load("data/suit_1970_2000.rda")
suit_1970_2000
load("data/suit_1970_2000.rda")
suit_1970_2000
plot(suit_1970_2000)
?
system.file
system.file("extdata",package = "tenm")
package = "tenm"))
suit_1970_2000 <- terra::rast(system.file("extdata/suit_1970_2000.tif",
package = "tenm"))
print(suit_1970_2000)
proc_test <- tenm::pROC(continuous_mod = suit_1970_2000,
test_data = abronia[,c("decimalLongitude",
"decimalLatitude")],
n_iter = 500, E_percent=5,
boost_percent=50)
continuous_mod = suit_1970_2000
test_data = abronia[,c("decimalLongitude",
"decimalLatitude")]
n_iter = 500
E_percent=5
boost_percent=50
methods::is(continuous_mod,"SpatRaster")
continuous_mod
continuous_mod@ptr@.xData$range_min
continuous_mod@range_max
if (continuous_mod@ptr@.xData$range_min == continuous_mod@ptr@.xData$range_max) {
stop("\nModel with no variability.\n")
}
library(tenm)
data(abronia)
suit_1970_2000 <- terra::rast(system.file("extdata/suit_1970_2000.tif",
package = "tenm"))
print(suit_1970_2000)
proc_test <- tenm::pROC(continuous_mod = suit_1970_2000,
test_data = abronia[,c("decimalLongitude",
"decimalLatitude")],
n_iter = 500, E_percent=5,
boost_percent=50)
if (methods::is(continuous_mod,"SpatRaster")) {
if (continuous_mod@ptr@.xData$range_min == continuous_mod@ptr@.xData$range_max) {
stop("\nModel with no variability.\n")
}
if (is.data.frame(test_data) || is.matrix(test_data)) {
test_data <- stats::na.omit(terra::extract(continuous_mod,
test_data))
}
vals <- continuous_mod[!is.na(continuous_mod[])]
}
is.data.frame(test_data)
is.matrix(test_data)
test_data <- stats::na.omit(terra::extract(continuous_mod,
test_data))
continuous_mod
suit_1970_2000
continuous_mod = suit_1970_2000
continuous_mod
continuous_mod
test_data <- stats::na.omit(terra::extract(continuous_mod,
test_data))
test_data
test_data <- stats::na.omit(terra::extract(continuous_mod,
test_data))[,-1]
test_data
test_data
test_data <- stats::na.omit(terra::extract(continuous_mod,
test_data))
test_data
continuous_mod = suit_1970_2000
test_data = abronia[,c("decimalLongitude",
"decimalLatitude")]
test_data <- stats::na.omit(terra::extract(continuous_mod,
test_data))[,-1]
test_data
vals <- continuous_mod[!is.na(continuous_mod[])]
vals
sub_sample
nvals <- length(vals)
if(sub_sample_size> nvals) sub_sample_size <- nvals
library(tenm)
data(abronia)
suit_1970_2000 <- terra::rast(system.file("extdata/suit_1970_2000.tif",
package = "tenm"))
print(suit_1970_2000)
proc_test <- tenm::pROC(continuous_mod = suit_1970_2000,
test_data = abronia[,c("decimalLongitude",
"decimalLatitude")],
n_iter = 500, E_percent=5,
boost_percent=50)
print(proc_test$pROC_summary)
library(tenm)
library(tenm)
knitr::opts_chunk$set(
collapse = TRUE,
dpi = 200,
comment = "#>"
)
library(tenm)
data("abronia")
head(abronia)
#data("suit_1970_2000")
tempora_layers_dir <- system.file("extdata/bio",package = "tenm")
head(tempora_layers_dir)
abt <- tenm::sp_temporal_data(occs = abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
sp_date_var = "year",
occ_date_format="y",
layers_date_format= "y",
layers_by_date_dir = tempora_layers_dir,
layers_ext="*.tif$")
head(abt$temporal_df)
abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60)
dim(abtc$temporal_df)
#suit_1970_2000 <- terra::rast(suit_1970_2000)
tenm_mask <- terra::rast(file.path(tempora_layers_dir,"1939/bio_01.tif"))
terra::plot(tenm_mask)
abtc2 <- tenm::clean_dup_by_date(this_species = abt,
by_mask = TRUE,
raster_mask = tenm_mask,
threshold =terra::res(tenm_mask)[1],
n_ngbs = 0)
dim(abtc2$temporal_df)
#suit_1970_2000 <- terra::rast(suit_1970_2000)
tenm_mask <- terra::rast(file.path(tempora_layers_dir,"1939/bio_01.tif"))
terra::plot(tenm_mask)
abtc2 <- tenm::clean_dup_by_date(this_species = abt,
by_mask = TRUE,
raster_mask = tenm_mask,
threshold =terra::res(tenm_mask)[1],
n_ngbs = 0)
dim(abtc2$temporal_df)
future::plan("multisession",workers=10)
abex <- tenm::ex_by_date(this_species = abtc,train_prop=0.7)
install.packages("terra")
install.packages("terra")
install.packages("terra")
install.packages("terra")
te <- terra::rast()
devtools::install_github("r-spatial/terra")
devtools::install_github("rspatial/terra")
devtools::install_github("rspatial/terra")
packageVersion("terra")
library(tenm)
r <- terra::rast()
library(tenm)
library(tenm)
library(tenm)
library(tenm)
library(tenm)
library(tenm)
library(tenm)
library(tenm)
library(tenm)
usethis::use_testthat()
?tenm::sp_temporal_data
data("abronia")
tempora_layers_dir <- system.file("extdata/bio",package = "tenm")
abt <- tenm::sp_temporal_data(occs = abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
sp_date_var = "year",
occ_date_format="y",
layers_date_format= "y",
layers_by_date_dir = tempora_layers_dir,
layers_ext="*.tif$")
abt
library(testthat)
expect_s3_class(sparse_mod, "sp.temporal.modeling")
expect_s3_class(abt, "sp.temporal.modeling")
# Test
test_that("sp_temporal_data returns an object of class sp.temporal.data", {
data("abronia")
tempora_layers_dir <- system.file("extdata/bio",package = "tenm")
abt <- tenm::sp_temporal_data(occs = abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
sp_date_var = "year",
occ_date_format="y",
layers_date_format= "y",
layers_by_date_dir = tempora_layers_dir,
layers_ext="*.tif$")
expect_s3_class(abt, "sp.temporal.modeling")
})
data(abronia)
tempora_layers_dir <- system.file("extdata/bio",package = "tenm")
tenm_mask <- terra::rast(file.path(tempora_layers_dir,"1939/bio_01.tif"))
# Clean duplicates without raster mask (just by distance threshold)
# First check the number of occurrence records
print(nrow(abronia))
# Clean duplicates without raster mask (just by distance threshold)
# Clean duplicated records using a distance of ~ 18 km (0.1666667 grades)
ab_1 <- tenm::clean_dup(data =abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
threshold = terra::res(tenm_mask),
by_mask = FALSE,
raster_mask = NULL)
ab_1
# Test
test_that("clean_dup, returns a data.frame of cleaned occurrences", {
data(abronia)
tempora_layers_dir <- system.file("extdata/bio",package = "tenm")
tenm_mask <- terra::rast(file.path(tempora_layers_dir,"1939/bio_01.tif"))
# Clean duplicates without raster mask (just by distance threshold)
# Clean duplicated records using a distance of ~ 18 km (0.1666667 grades)
ab_1 <- tenm::clean_dup(data =abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
threshold = terra::res(tenm_mask),
by_mask = FALSE,
raster_mask = NULL)
expect_match(class(ab_1),"data.frame")
})
ab_2 <- tenm::clean_dup(data =abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
threshold = terra::res(tenm_mask)[1],
by_mask = TRUE,
raster_mask = tenm_mask,
n_ngbs = 0)
# Test
test_that("clean_dup, returns a data.frame of cleaned occurrences", {
data(abronia)
tempora_layers_dir <- system.file("extdata/bio",package = "tenm")
tenm_mask <- terra::rast(file.path(tempora_layers_dir,"1939/bio_01.tif"))
# Clean duplicates without raster mask (just by distance threshold)
# Clean duplicated records using a distance of ~ 18 km (0.1666667 grades)
ab_1 <- tenm::clean_dup(data =abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
threshold = terra::res(tenm_mask),
by_mask = FALSE,
raster_mask = NULL)
expect_match(class(ab_1),"data.frame")
ab_2 <- tenm::clean_dup(data =abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
threshold = terra::res(tenm_mask)[1],
by_mask = TRUE,
raster_mask = tenm_mask,
n_ngbs = 0)
expect_match(class(ab_2),"data.frame")
})
library(tenm)
library(tenm)
data(abronia)
suit_1970_2000 <- terra::rast(system.file("extdata/suit_1970_2000.tif",
package = "tenm"))
print(suit_1970_2000)
proc_test <- tenm::pROC(continuous_mod = suit_1970_2000,
test_data = abronia[,c("decimalLongitude",
"decimalLatitude")],
n_iter = 500, E_percent=5,
boost_percent=50)
print(proc_test$pROC_summary)
devtools::build()
devtools::install()
devtools::document()
devtools::check()
library(tenm)
library(tenm)
list.files("man/")
list.files("man/",full.names = T)
a <- list.files("man/",full.names = T)
seq_along(a) |> purrr::map(function(x){
ar <- readLines(a[x])
b <- grep("suit_1970_2000",ar)
if(length(b)>0){
princomp(a[x])
}
})
seq_along(a) |> purrr::map(function(x){
ar <- readLines(a[x])
b <- grep("suit_1970_2000",ar)
if(length(b)>0){
return(a[x])
}
})
library(tenm)
data("abronia")
tempora_layers_dir <- system.file("extdata/bio",package = "tenm")
abt <- tenm::sp_temporal_data(occs = abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
sp_date_var = "year",
occ_date_format="y",
layers_date_format= "y",
layers_by_date_dir = tempora_layers_dir,
layers_ext="*.tif$")
abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60)
future::plan("multisession",workers=10)
abex <- tenm::ex_by_date(this_species = abtc,
train_prop=0.7)
abbg <- tenm::bg_by_date(abex,
buffer_ngbs=10,n_bg=50000)
future::plan("sequential")
varcorrs <- tenm::correlation_finder(environmental_data = abex$env_data[,-ncol(abex$env_data)],
method = "spearman",
threshold = 0.8,
verbose = FALSE)
vars2fit <- varcorrs$descriptors
mod_sel <- tenm::tenm_selection(this_species = abbg,
omr_criteria =0.1,
ellipsoid_level=0.975,
vars2fit = vars2fit,
nvars_to_fit=c(2,3,4,5,6,7),
proc = T,
RandomPercent = 50,
NoOfIteration=1000,
parallel=TRUE,
n_cores=20)
# Project potential distribution using bioclimatic layers for 1970-2000
# period.
layers_70_00_dir <- system.file("extdata/bio_1970_2000",package = "tenm")
suit_1970_2000 <- predict(mod_sel,model_variables = NULL,
layers_path = layers_70_00_dir,
layers_ext = ".tif$")
terra::plot(suit_1970_2000)
colors <- c('#000004FF', '#040312FF', '#0B0725FF',
'#0B0725FF', '#160B38FF', '#160B38FF',
'#230C4CFF', '#310A5CFF', '#3F0966FF',
'#4D0D6CFF', '#5A116EFF', '#67166EFF',
'#741A6EFF', '#81206CFF', '#81206CFF',
'#8E2469FF', '#9B2964FF', '#A82E5FFF',
'#B53359FF', '#B53359FF', '#C03A50FF',
'#CC4248FF', '#D74B3FFF', '#E05536FF',
'#E9602CFF', '#EF6E21FF', '#F57B17FF',
'#F8890CFF', '#FB9806FF', '#FB9806FF',
'#FCA70DFF', '#FBB81DFF', '#F9C72FFF',
'#F9C72FFF', '#F6D847FF', '#F2E763FF',
'#F2E763FF', '#F3F585FF', '#FCFFA4FF',
'#FCFFA4FF')
points(abtc$temporal_df[,1:2],pch=17,cex=1,
col=rev(colors))
legend("topleft",legend = abtc$temporal_df$year[1:18],
col =rev(colors[1:18]),
cex=0.75,pch=17)
legend("topright",legend = unique(abtc$temporal_df$year[19:40]),
col = rev(colors[19:40]),
cex=0.75,pch=17)
seq_along(a) |> purrr::map(function(x){
ar <- readLines(a[x])
b <- grep("suit_1970_2000",ar)
if(length(b)>0){
return(a[x])
}
})
suit_1970_2000 <- terra::rast(system.file("extdata/suit_1970_2000.tif",
package = "tenm"))
print(suit_1970_2000)
proc_test <- tenm::pROC(continuous_mod = suit_1970_2000,
test_data = abronia[,c("decimalLongitude",
"decimalLatitude")],
n_iter = 500, E_percent=5,
boost_percent=50)
print(proc_test$pROC_summary)
a <- list.files("man/",full.names = T)
seq_along(a) |> purrr::map(function(x){
ar <- readLines(a[x])
b <- grep("^sp",ar)
if(length(b)>0){
return(a[x])
}
})
a <- list.files("R",full.names = T)
seq_along(a) |> purrr::map(function(x){
ar <- readLines(a[x])
b <- grep("^sp",ar)
if(length(b)>0){
return(a[x])
}
})
library(tenm)
a <- list.files("R",full.names = T)
seq_along(a) |> purrr::map(function(x){
ar <- readLines(a[x])
b <- grep("data(suit_1970_2000)",ar)
if(length(b)>0){
return(a[x])
}
})
a <- list.files("R",full.names = T)
seq_along(a) |> purrr::map(function(x){
ar <- readLines(a[x])
b <- grep("raster",ar)
if(length(b)>0){
return(a[x])
}
})
seq_along(a) |> purrr::map(function(x){
ar <- readLines(a[x])
b <- grep("raster::",ar)
if(length(b)>0){
return(a[x])
}
})
seq_along(a) |> purrr::map(function(x){
ar <- readLines(a[x])
b <- grep("import raster",ar)
if(length(b)>0){
return(a[x])
}
})
library(tenm)
library(tenm)
