#This code is for running in parallel
future::plan("multisession",workers=2)
abex <- tenm::ex_by_date(this_species = abtc,train_prop=0.7)
abbg <- tenm::bg_by_date(this_species = abex,
buffer_ngbs=10,n_bg=50000)
future::plan("sequential")
abex
data(abronia)
temporal_layer <- system.file("extdata/bio/2016/bio_01.tif",package = "tenm")
raster_mask <- terra::rast(temporal_layer)
set.seed(123)
samp_01 <- tenm::cells2samp(data = abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
cell_ids = NULL,
buffer_ngbs = 4,
raster_mask = raster_mask,
process_ngbs_by = 10,
n_bg = 50000,
progress =TRUE)
}
samp_01 <- tenm::cells2samp(data = abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
cell_ids = NULL,
buffer_ngbs = 4,
raster_mask = raster_mask,
process_ngbs_by = 10,
n_bg = 50000,
progress =TRUE)
samp_01
cell_ids = c(256,290),
samp_02 <- tenm::cells2samp(data = abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
cell_ids = c(256,290),
buffer_ngbs = 4,
raster_mask = raster_mask,
process_ngbs_by = 10,
n_bg = 50000,
samp_02
samp_02 <- tenm::cells2samp(data = abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
cell_ids = c(256,290),
buffer_ngbs = 4,
raster_mask = raster_mask,
process_ngbs_by = 10,
n_bg = 50000,
progress =TRUE)
samp_02
samp_02 <- tenm::cells2samp(data = abronia,
#longitude = "decimalLongitude",
#latitude = "decimalLatitude",
cell_ids = c(256,290),
buffer_ngbs = 4,
raster_mask = raster_mask,
process_ngbs_by = 10,
n_bg = 50000,
progress =TRUE)
samp_02
samp_02 <- tenm::cells2samp(data = abronia,
longitude = NULL,
latitude = NULL,
cell_ids = c(256,290),
buffer_ngbs = 4,
raster_mask = raster_mask,
process_ngbs_by = 10,
n_bg = 50000,
progress =TRUE)
samp_02
samp_02 <- tenm::cells2samp(data = abronia,
longitude = NULL,
latitude = NULL,
cell_ids = c(256,290,326),
buffer_ngbs = 4,
raster_mask = raster_mask,
process_ngbs_by = 10,
n_bg = 50000,
progress =TRUE)
samp_02
samp_01 <- tenm::cells2samp(data = abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
cell_ids = NULL,
buffer_ngbs = 4,
raster_mask = raster_mask,
process_ngbs_by = 10,
n_bg = 50000,
progress =TRUE)
# Generete a sample using pixel IDs
samp_02 <- tenm::cells2samp(data = abronia,
longitude = NULL,
latitude = NULL,
cell_ids = c(256,290,326),
buffer_ngbs = 4,
raster_mask = raster_mask,
process_ngbs_by = 10,
n_bg = 50000,
progress =TRUE)
tenm::cells2samp
library(tenm)
library(tenm)
library(tenm)
?clean_dup_by_date
library(tenm)
?clean_dup_by_date
raster_mask = tenm_mask,
abtc2 <- tenm::clean_dup_by_date(this_species = abt,
by_mask = TRUE,
threshold = terra::res(tenm_mask)[1],
raster_mask = tenm_mask,
n_ngbs = 0)
# Check number of records
print(nrow(abtc2$temporal_df))
library(tenm)
data("abronia")
tempora_layers_dir <- system.file("extdata/bio",package = "tenm")
tenm_mask <- terra::rast(file.path(tempora_layers_dir,"1939/bio_01.tif"))
# Clean duplicates without raster mask (just by distance threshold)
abt <- tenm::sp_temporal_data(occs = abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
sp_date_var = "year",
occ_date_format="y",
layers_date_format= "y",
layers_by_date_dir = tempora_layers_dir,
layers_ext="*.tif$")
abtc1 <- tenm::clean_dup_by_date(abt,threshold = terra::res(tenm_mask)[1])
# Check number of records
print(nrow(abtc1$temporal_df))
# Clean duplicates using a raster mask
abtc2 <- tenm::clean_dup_by_date(this_species = abt,
by_mask = TRUE,
threshold = terra::res(tenm_mask)[1],
raster_mask = tenm_mask,
n_ngbs = 0)
# Check number of records
print(nrow(abtc2$temporal_df))
abtc3 <- tenm::clean_dup_by_date(this_species = abt,
by_mask = TRUE,
threshold = terra::res(tenm_mask)[1],
raster_mask = tenm_mask,
n_ngbs = 2)
# Check number of records
print(nrow(abtc3$temporal_df))
library(tenm)
print(nrow(abtc3$temporal_df))
abtc1
library(tenm)
?clean_dup_by_date
library(tenm)
library(tenm)
correlation_finder <- function(environmental_data,method="spearman",threshold,
verbose=TRUE){
if(is.matrix(environmental_data) || is.data.frame(environmental_data)){
environmental_data <- stats::na.omit(environmental_data)
cor_mat <- data.frame(stats::cor(environmental_data,method = method))
variables_cor <- function(x,threshold){
x <- as.numeric(x)
vars_pos <- which(x > threshold)
vars_neg <- which(x < (-1)*threshold)
vars <- c(vars_pos,vars_neg)
cors <- x[vars]
names(cors) <- names(cor_mat)[vars]
return(cors)
}
list_cor <- mapply(variables_cor,x=cor_mat,
threshold=threshold,SIMPLIFY = FALSE)
nomvar <- names(cor_mat)
list_cor2 <- sapply(nomvar, function(x)
list_cor[[x]][which(list_cor[[x]]!=1)])
nomvar2 <- nomvar
descriptors <- NULL
for(i in 1:length(list_cor2)){
descriptors <- c(descriptors,names(list_cor2[i]))
if(names(list_cor2[i]) %in% nomvar2){
trash <- sort(unlist(sapply(c(descriptors,
names(list_cor2[[i]])),
function(x) which(x==nomvar2))))
nomvar2 <- nomvar2[-trash]
}
else{
descriptors <- descriptors[-length(descriptors)]
}
}
if(verbose){
f1 <- '********************************'
f1 <- paste0(f1,'*********************************\n\n')
f2 <- '---------------------------------'
f2 <- paste0(f2,'-------------------------------\n\n')
cat(f1)
cat(' Here is a list of variables that can summarize your niche\n')
cat(' information, according to the threshold of',threshold,":\n\n")
cat(' ',descriptors,'\n\n')
cat(f1)
cat(f2)
cat('Correlation list:\n\n')
for(i in 1:dim(cor_mat)[1]){
cat("Variable",names(list_cor)[i],"is strongly correlated with:\n\n")
print(list_cor[[i]])
cat('----------------------------------------------------------------\n\n')
}
return()
}
return(list(descriptors=descriptors,list_cor=list_cor))
}
else
stop("cor_mat must be a matrix or a data.frame")
}
correlation_finder <- function(environmental_data,method="spearman",threshold,
verbose=TRUE){
if(is.matrix(environmental_data) || is.data.frame(environmental_data)){
environmental_data <- stats::na.omit(environmental_data)
cor_mat <- data.frame(stats::cor(environmental_data,method = method))
variables_cor <- function(x,threshold){
x <- as.numeric(x)
vars_pos <- which(x > threshold)
vars_neg <- which(x < (-1)*threshold)
vars <- c(vars_pos,vars_neg)
cors <- x[vars]
names(cors) <- names(cor_mat)[vars]
return(cors)
}
list_cor <- mapply(variables_cor,x=cor_mat,
threshold=threshold,SIMPLIFY = FALSE)
nomvar <- names(cor_mat)
list_cor2 <- sapply(nomvar, function(x)
list_cor[[x]][which(list_cor[[x]]!=1)])
nomvar2 <- nomvar
descriptors <- NULL
for(i in 1:length(list_cor2)){
descriptors <- c(descriptors,names(list_cor2[i]))
if(names(list_cor2[i]) %in% nomvar2){
trash <- sort(unlist(sapply(c(descriptors,
names(list_cor2[[i]])),
function(x) which(x==nomvar2))))
nomvar2 <- nomvar2[-trash]
}
else{
descriptors <- descriptors[-length(descriptors)]
}
}
if(verbose){
f1 <- '********************************'
f1 <- paste0(f1,'*********************************\n\n')
f2 <- '---------------------------------'
f2 <- paste0(f2,'-------------------------------\n\n')
cat(f1)
cat(' Here is a list of variables that can summarize your niche\n')
cat(' information, according to the threshold of',threshold,":\n\n")
cat(' ',descriptors,'\n\n')
cat(f1)
cat(f2)
cat('Correlation list:\n\n')
for(i in 1:dim(cor_mat)[1]){
cat("Variable",names(list_cor)[i],"is strongly correlated with:\n\n")
print(list_cor[[i]])
cat('----------------------------------------------------------------\n\n')
}
return()
}
return(list(descriptors=descriptors,list_cor=list_cor))
}
else
stop("cor_mat must be a matrix or a data.frame")
}
correlation_finder <- function(environmental_data,method="spearman",threshold,
verbose=TRUE){
if(is.matrix(environmental_data) || is.data.frame(environmental_data)){
environmental_data <- stats::na.omit(environmental_data)
cor_mat <- data.frame(stats::cor(environmental_data,method = method))
variables_cor <- function(x,threshold){
x <- as.numeric(x)
vars_pos <- which(x > threshold)
vars_neg <- which(x < (-1)*threshold)
vars <- c(vars_pos,vars_neg)
cors <- x[vars]
names(cors) <- names(cor_mat)[vars]
return(cors)
}
list_cor <- mapply(variables_cor,x=cor_mat,
threshold=threshold,SIMPLIFY = FALSE)
nomvar <- names(cor_mat)
list_cor2 <- sapply(nomvar, function(x)
list_cor[[x]][which(list_cor[[x]]!=1)])
nomvar2 <- nomvar
descriptors <- NULL
for(i in 1:length(list_cor2)){
descriptors <- c(descriptors,names(list_cor2[i]))
if(names(list_cor2[i]) %in% nomvar2){
trash <- sort(unlist(sapply(c(descriptors,
names(list_cor2[[i]])),
function(x) which(x==nomvar2))))
nomvar2 <- nomvar2[-trash]
}
else{
descriptors <- descriptors[-length(descriptors)]
}
}
if(verbose){
f1 <- '********************************'
f1 <- paste0(f1,'*********************************\n\n')
f2 <- '---------------------------------'
f2 <- paste0(f2,'-------------------------------\n\n')
cat(f1)
cat(' Here is a list of variables that can summarize your niche\n')
cat(' information, according to the threshold of',threshold,":\n\n")
cat(' ',descriptors,'\n\n')
cat(f1)
cat(f2)
cat('Correlation list:\n\n')
for(i in 1:dim(cor_mat)[1]){
cat("Variable",names(list_cor)[i],"is strongly correlated with:\n\n")
print(list_cor[[i]])
cat('----------------------------------------------------------------\n\n')
}
return()
}
return(list(descriptors=descriptors,list_cor=list_cor))
}
else
stop("cor_mat must be a matrix or a data.frame")
}
correlation_finder <- function(environmental_data,method="spearman",threshold,
verbose=TRUE){
if(is.matrix(environmental_data) || is.data.frame(environmental_data)){
environmental_data <- stats::na.omit(environmental_data)
cor_mat <- data.frame(stats::cor(environmental_data,method = method))
variables_cor <- function(x,threshold){
x <- as.numeric(x)
vars_pos <- which(x > threshold)
vars_neg <- which(x < (-1)*threshold)
vars <- c(vars_pos,vars_neg)
cors <- x[vars]
names(cors) <- names(cor_mat)[vars]
return(cors)
}
list_cor <- mapply(variables_cor,x=cor_mat,
threshold=threshold,SIMPLIFY = FALSE)
nomvar <- names(cor_mat)
list_cor2 <- sapply(nomvar, function(x)
list_cor[[x]][which(list_cor[[x]]!=1)])
nomvar2 <- nomvar
descriptors <- NULL
for(i in 1:length(list_cor2)){
descriptors <- c(descriptors,names(list_cor2[i]))
if(names(list_cor2[i]) %in% nomvar2){
trash <- sort(unlist(sapply(c(descriptors,
names(list_cor2[[i]])),
function(x) which(x==nomvar2))))
nomvar2 <- nomvar2[-trash]
}
else{
descriptors <- descriptors[-length(descriptors)]
}
}
if(verbose){
f1 <- '********************************'
f1 <- paste0(f1,'*********************************\n\n')
f2 <- '---------------------------------'
f2 <- paste0(f2,'-------------------------------\n\n')
cat(f1)
cat(' Here is a list of variables that can summarize your niche\n')
cat(' information, according to the threshold of',threshold,":\n\n")
cat(' ',descriptors,'\n\n')
cat(f1)
cat(f2)
cat('Correlation list:\n\n')
for(i in 1:dim(cor_mat)[1]){
cat("Variable",names(list_cor)[i],"is strongly correlated with:\n\n")
print(list_cor[[i]])
cat('----------------------------------------------------------------\n\n')
}
return()
}
return(list(descriptors=descriptors,list_cor=list_cor))
}
else
stop("cor_mat must be a matrix or a data.frame")
}
#' library(tenm)
#' data("abronia")
#' tempora_layers_dir <- system.file("extdata/bio",package = "tenm")
#' abt <- tenm::sp_temporal_data(occs = abronia,
#'                               longitude = "decimalLongitude",
#'                               latitude = "decimalLatitude",
#'                               sp_date_var = "year",
#'                               occ_date_format="y",
#'                               layers_date_format= "y",
#'                               layers_by_date_dir = tempora_layers_dir,
#'                               layers_ext="*.tif$")
#' abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60)
#' future::plan("multisession",workers=2)
#' abex <- tenm::ex_by_date(abtc,train_prop=0.7)
#' future::plan("sequential")
abex
abex$env_data
correlation_finder <- function(environmental_data,method="spearman",threshold,
verbose=TRUE){
if(is.matrix(environmental_data) || is.data.frame(environmental_data)){
environmental_data <- stats::na.omit(environmental_data)
cor_mat <- data.frame(stats::cor(environmental_data,method = method))
variables_cor <- function(x,threshold){
x <- as.numeric(x)
vars_pos <- which(x > threshold)
vars_neg <- which(x < (-1)*threshold)
vars <- c(vars_pos,vars_neg)
cors <- x[vars]
names(cors) <- names(cor_mat)[vars]
return(cors)
}
list_cor <- mapply(variables_cor,x=cor_mat,
threshold=threshold,SIMPLIFY = FALSE)
nomvar <- names(cor_mat)
list_cor2 <- sapply(nomvar, function(x)
list_cor[[x]][which(list_cor[[x]]!=1)])
nomvar2 <- nomvar
descriptors <- NULL
for(i in 1:length(list_cor2)){
descriptors <- c(descriptors,names(list_cor2[i]))
if(names(list_cor2[i]) %in% nomvar2){
trash <- sort(unlist(sapply(c(descriptors,
names(list_cor2[[i]])),
function(x) which(x==nomvar2))))
nomvar2 <- nomvar2[-trash]
}
else{
descriptors <- descriptors[-length(descriptors)]
}
}
if(verbose){
f1 <- '********************************'
f1 <- paste0(f1,'*********************************\n\n')
f2 <- '---------------------------------'
f2 <- paste0(f2,'-------------------------------\n\n')
cat(f1)
cat(' Here is a list of variables that can summarize your niche\n')
cat(' information, according to the threshold of',threshold,":\n\n")
cat(' ',descriptors,'\n\n')
cat(f1)
cat(f2)
cat('Correlation list:\n\n')
for(i in 1:dim(cor_mat)[1]){
cat("Variable",names(list_cor)[i],"is strongly correlated with:\n\n")
print(list_cor[[i]])
cat('----------------------------------------------------------------\n\n')
}
return()
}
return(list(descriptors=descriptors,list_cor=list_cor))
}
else
stop("cor_mat must be a matrix or a data.frame")
}
#' evdata <- abex$env_data[,-ncol(abex$env_data)]
evdata
envdata <- abex$env_data[,-ncol(abex$env_data)]
#' ecors <- tenm::correlation_finder(environmental_data =envdata,
#'                                   method="spearman",
#'                                   threshold = 0.7 )
ecors
library(tenm)
data("abronia")
tempora_layers_dir <- system.file("extdata/bio",package = "tenm")
abt <- tenm::sp_temporal_data(occs = abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
sp_date_var = "year",
occ_date_format="y",
layers_date_format= "y",
layers_by_date_dir = tempora_layers_dir,
layers_ext="*.tif$")
abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60)
future::plan("multisession",workers=2)
abex <- tenm::ex_by_date(abtc,train_prop=0.7)
future::plan("sequential")
envdata <- abex$env_data[,-ncol(abex$env_data)]
ecors <- tenm::correlation_finder(environmental_data =envdata,
method="spearman",
threshold = 0.7 )
library(tenm)
library(tenm)
data("abronia")
tempora_layers_dir <- system.file("extdata/bio",package = "tenm")
abt <- tenm::sp_temporal_data(occs = abronia,
longitude = "decimalLongitude",
latitude = "decimalLatitude",
sp_date_var = "year",
occ_date_format="y",
layers_date_format= "y",
layers_by_date_dir = tempora_layers_dir,
layers_ext="*.tif$")
abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60)
future::plan("multisession",workers=2)
abex <- tenm::ex_by_date(abtc,train_prop=0.7)
future::plan("sequential")
varcorrs <- tenm::correlation_finder(environmental_data = abex$env_data[,-ncol(abex$env_data)],
method = "spearman",
threshold = 0.8,
verbose = FALSE)
mod <- tenm::cov_center(data = abex$env_data,
mod <- tenm::cov_center(data = abex$env_data,
mve = TRUE,
level = 0.975,
vars = c("bio_05","bio_06","bio_12"))
# Print model parameters
print(mod)
library(tenm)
library(tenm)
library(tenm)
library(tenm)
