[{"path":"/articles/tenm-vignette.html","id":"datasets-included","dir":"Articles","previous_headings":"","what":"Datasets included","title":"Introduction to tenm package","text":"Inside package contain .dataFrame set occurrences presence records 1939 2016 “Abronia graminea”, lizard specie limited geographic distribution, endemic Veracruz Puebla. Also group bioclimatic raster layers need assign directory layer path object","code":"data(\"abronia\") head(abronia) #>            species decimalLongitude decimalLatitude year #> 1 Abronia graminea        -98.17773        19.96523 2014 #> 2 Abronia graminea        -98.13753        19.87006 2014 #> 3 Abronia graminea        -98.07042        19.89668 2014 #> 4 Abronia graminea        -98.13003        19.86861 2014 #> 5 Abronia graminea        -98.14894        19.84450 2014 #> 6 Abronia graminea        -98.15909        19.86878 2014 #>                             gbif_doi #> 1 https://doi.org/10.15468/dl.teyjm9 #> 2 https://doi.org/10.15468/dl.teyjm9 #> 3 https://doi.org/10.15468/dl.teyjm9 #> 4 https://doi.org/10.15468/dl.teyjm9 #> 5 https://doi.org/10.15468/dl.teyjm9 #> 6 https://doi.org/10.15468/dl.teyjm9 tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") head(tempora_layers_dir) #> [1] \"/private/var/folders/hh/dww2wxkn6f1dkktbx23dq2rw0000gn/T/RtmpGdVFBf/temp_libpath5a54753841bb/tenm/extdata/bio\""},{"path":"/articles/tenm-vignette.html","id":"sp_temporal_data","dir":"Articles","previous_headings":"","what":"Sp_temporal_data","title":"Introduction to tenm package","text":"function creates .Species Temporal Data object, means data.frame five columns, first two coordinates latitude longitude, third data_var, temporality records species stored data.frame occurrence points, can “year” example, fourth format dates layer, organized particular pattern, example “year/month/day”, “year/month”, just “year” arrangement, fifth one path stored bioclimatic layer corresponding year.","code":"abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") head(abt$temporal_df) #>   decimalLongitude decimalLatitude year layer_dates #> 1        -98.17773        19.96523 2014  2014-01-01 #> 2        -98.13753        19.87006 2014  2014-01-01 #> 3        -98.07042        19.89668 2014  2014-01-01 #> 4        -98.13003        19.86861 2014  2014-01-01 #> 5        -98.14894        19.84450 2014  2014-01-01 #> 6        -98.15909        19.86878 2014  2014-01-01 #>                                                                                                          layers_path #> 1 /private/var/folders/hh/dww2wxkn6f1dkktbx23dq2rw0000gn/T/RtmpGdVFBf/temp_libpath5a54753841bb/tenm/extdata/bio/2014 #> 2 /private/var/folders/hh/dww2wxkn6f1dkktbx23dq2rw0000gn/T/RtmpGdVFBf/temp_libpath5a54753841bb/tenm/extdata/bio/2014 #> 3 /private/var/folders/hh/dww2wxkn6f1dkktbx23dq2rw0000gn/T/RtmpGdVFBf/temp_libpath5a54753841bb/tenm/extdata/bio/2014 #> 4 /private/var/folders/hh/dww2wxkn6f1dkktbx23dq2rw0000gn/T/RtmpGdVFBf/temp_libpath5a54753841bb/tenm/extdata/bio/2014 #> 5 /private/var/folders/hh/dww2wxkn6f1dkktbx23dq2rw0000gn/T/RtmpGdVFBf/temp_libpath5a54753841bb/tenm/extdata/bio/2014 #> 6 /private/var/folders/hh/dww2wxkn6f1dkktbx23dq2rw0000gn/T/RtmpGdVFBf/temp_libpath5a54753841bb/tenm/extdata/bio/2014"},{"path":"/articles/tenm-vignette.html","id":"clean_dup_by_date","dir":"Articles","previous_headings":"","what":"clean_dup_by_date","title":"Introduction to tenm package","text":"function eliminates duplicated longitude latitude data year using threshold distance. main propose function eliminate data occurrence points spliced different year date given distance threshold. function also allows clean duplicate data pixel given resolution raster mask.","code":"abtc <- tenm::clean_dup_by_date(this_species = abt,threshold = 10/60) dim(abtc$temporal_df) #> [1] 40  5 #suit_1970_2000 <- terra::rast(suit_1970_2000) tenm_mask <- terra::rast(file.path(tempora_layers_dir,\"1939/bio_01.tif\")) terra::plot(tenm_mask) abtc2 <- tenm::clean_dup_by_date(this_species = abt,                                  by_mask = TRUE,                                  raster_mask = tenm_mask,                                  threshold =terra::res(tenm_mask)[1],                                   n_ngbs = 0) dim(abtc2$temporal_df) #> [1] 50  5"},{"path":"/articles/tenm-vignette.html","id":"extract-environmental-data-by-date","dir":"Articles","previous_headings":"","what":"Extract environmental data by date","title":"Introduction to tenm package","text":"Function extract environmental data date. function generates training testing data sets environmental information year, using random partition define proportion.","code":"future::plan(\"multisession\",workers=10) abex <- tenm::ex_by_date(this_species = abtc,train_prop=0.7) future::plan(\"sequential\") print(abex) #> $temporal_df #> # A tibble: 40 × 26 #>    decimalLongitude decimalLatitude  year layer_dates layers_path  cell_ids_year #>               <dbl>           <dbl> <int> <date>      <chr>                <dbl> #>  1            -97.3            18.7  1939 1939-01-01  /private/va…           272 #>  2            -97.3            18.7  1940 1940-01-01  /private/va…           272 #>  3            -97.0            19.6  1941 1941-01-01  /private/va…           173 #>  4            -97.3            18.7  1941 1941-01-01  /private/va…           271 #>  5            -97.3            18.7  1950 1950-01-01  /private/va…           272 #>  6            -97.1            19.7  1950 1950-01-01  /private/va…           173 #>  7            -97.4            18.5  1952 1952-01-01  /private/va…           291 #>  8            -97.3            18.7  1963 1963-01-01  /private/va…           272 #>  9            -97.3            18.7  1969 1969-01-01  /private/va…           271 #> 10            -97.3            18.7  1970 1970-01-01  /private/va…           272 #> # ℹ 30 more rows #> # ℹ 20 more variables: bio_01 <int>, bio_02 <int>, bio_03 <int>, bio_04 <int>, #> #   bio_05 <int>, bio_06 <int>, bio_07 <int>, bio_08 <int>, bio_09 <int>, #> #   bio_10 <int>, bio_11 <int>, bio_12 <int>, bio_13 <int>, bio_14 <int>, #> #   bio_15 <int>, bio_16 <int>, bio_17 <int>, bio_18 <int>, bio_19 <int>, #> #   trian_test <chr> #>  #> $sp_date_var #> [1] \"year\" #>  #> $lon_lat_vars #> [1] \"decimalLongitude\" \"decimalLatitude\"  #>  #> $layers_ext #> [1] \"*.tif$\" #>  #> $env_data #> # A tibble: 40 × 20 #>    bio_01 bio_02 bio_03 bio_04 bio_05 bio_06 bio_07 bio_08 bio_09 bio_10 bio_11 #>     <int>  <int>  <int>  <int>  <int>  <int>  <int>  <int>  <int>  <int>  <int> #>  1    149     84     55   2252    214     61    153    171    128    171    119 #>  2    154     87     49   2575    229     53    177    176    149    178    118 #>  3    114     63     44   2693    175     31    145    124     96    142     79 #>  4    139     82     50   2394    209     46    163    156    111    162    107 #>  5    155     94     54   2079    232     57    175    172    129    175    129 #>  6    115     79     51   2278    179     26    154    133     90    137     87 #>  7    159     95     59   1641    237     75    162    173    140    174    139 #>  8    155     85     51   2277    235     66    169    174    136    178    123 #>  9    141     89     57   1952    212     57    155    152    116    162    115 #> 10    153     92     54   2101    235     67    169    169    141    170    125 #> # ℹ 30 more rows #> # ℹ 9 more variables: bio_12 <int>, bio_13 <int>, bio_14 <int>, bio_15 <int>, #> #   bio_16 <int>, bio_17 <int>, bio_18 <int>, bio_19 <int>, trian_test <chr> #>  #> attr(,\"class\") #> [1] \"sp.temporal.env\""},{"path":"/articles/tenm-vignette.html","id":"correlation-finder","dir":"Articles","previous_headings":"","what":"Correlation finder","title":"Introduction to tenm package","text":"Function find strong correlations correlation matrix. enables us estimate variables strong correlation according correlation threshold.","code":"varcorrs <- tenm::correlation_finder(environmental_data = abex$env_data[,-ncol(abex$env_data)],                                      method = \"pearson\",                                      threshold = 0.8,                                      verbose = FALSE) #> Warning in stats::cor(environmental_data, method = method): the standard #> deviation is zero"},{"path":"/articles/tenm-vignette.html","id":"environmental-background-by-date","dir":"Articles","previous_headings":"","what":"Environmental background by date","title":"Introduction to tenm package","text":"Get environmental background set dated environmental layers. Function obtain environmental records background set dated environmental layers.","code":"future::plan(\"multisession\",workers=2) abbg <- tenm::bg_by_date(abex,buffer_ngbs=10,n_bg=50000) future::plan(\"sequential\") summary(abbg) #>              Length Class      Mode      #> temporal_df  27     tbl_df     list      #> sp_date_var   1     -none-     character #> lon_lat_vars  2     -none-     character #> layers_ext    1     -none-     character #> env_bg       20     data.frame list"},{"path":"/articles/tenm-vignette.html","id":"temporal-ecological-niche-model-selection-","dir":"Articles","previous_headings":"","what":"Temporal ecological niche model selection.","title":"Introduction to tenm package","text":"Function find best n-dimensional ellipsoid model using Partial Roc performance criteria.","code":"vars2fit <- varcorrs$descriptors mod_sel <- tenm::tenm_selection(this_species = abbg,                                 omr_criteria =0.1,                                 ellipsoid_level=0.975,                                 vars2fit = vars2fit,                                 nvars_to_fit=c(3),                                 proc = T,                                 RandomPercent = 50,                                 NoOfIteration=1000,                                 parallel=TRUE,                                 n_cores=12) #> ----------------------------------------------------------------------------------------- #>      **** Starting model selection process **** #> ----------------------------------------------------------------------------------------- #>  #> A total number of 84 models will be created for combinations of 9 variables taken by 3  #>  #> ----------------------------------------------------------------------------------------- #>   **A total number of 84 models will be tested ** #>  #> ----------------------------------------------------------------------------------------- #>   53 models passed omr_criteria for train data #>   4 models passed omr_criteria for test data #>   4 models passed omr_criteria for train and test data"},{"path":"/articles/tenm-vignette.html","id":"plot-the-potencial-distribution-","dir":"Articles","previous_headings":"","what":"Plot the potencial distribution.","title":"Introduction to tenm package","text":"","code":"layers_70_00_dir <- system.file(\"extdata/bio_1970_2000\",package = \"tenm\") suit_1970_2000 <- tenm::predict(mod_sel,model_variables = NULL,                                 layers_path = layers_70_00_dir,                                 layers_ext = \".tif$\",alpha=0.5) #> No selected variables. Using the first model in mods_table #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% rgl::rglwidget() par(mar=c(2,2,1,1)) terra::plot(suit_1970_2000)"},{"path":"/articles/tenm-vignette.html","id":"plot-ocurrences-presence-points-in-different-years-along-a-time-series-","dir":"Articles","previous_headings":"","what":"Plot ocurrences presence points in different years along a time series.","title":"Introduction to tenm package","text":"","code":"data(\"colors\") id_70_20 <- which(abtc$temporal_df$year >= 1970 & abtc$temporal_df$year <= 2000) colors <- c(rev(colors))[1:length(id_70_20)] par(mar=c(2,2,1,1)) terra::plot(suit_1970_2000,legend=FALSE) points(abtc$temporal_df[id_70_20,1:2],pch=25,cex=1.25,        col=colors) legend(\"topleft\",legend = abtc$temporal_df$year[id_70_20][1:9],        col =colors[1:9],        cex=0.55,pch=25) legend(\"topright\",legend = unique(abtc$temporal_df$year[id_70_20][10:18]),        col = colors[10:18],        cex=0.55, pch=25)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Luis Osorio-Olvera. Author, maintainer. Miguel Hernández. Author. Rusby G. Contreras-Díaz. Author. Xavier Chiappa-Carrara. Author. Mariana Munguía-Carrara. Author. Oliver López-Corona. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Osorio-Olvera L, Hernández M, Contreras-Díaz R, Chiappa-Carrara X, Munguía-Carrara M, López-Corona O (2024). tenm: Temporal ecological niche models. R package version 1.0, https://luismurao.github.io/tenm/.","code":"@Manual{,   title = {tenm: Temporal ecological niche models},   author = {Luis Osorio-Olvera and Miguel Hernández and Rusby G. Contreras-Díaz and Xavier Chiappa-Carrara and Mariana Munguía-Carrara and Oliver López-Corona},   year = {2024},   note = {R package version 1.0},   url = {https://luismurao.github.io/tenm/}, }"},{"path":"/index.html","id":"tenm","dir":"","previous_headings":"","what":"Temporal ecological niche models","title":"Temporal ecological niche models","text":"R package set functions calibrate time-specific ecological niche models.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Temporal ecological niche models","text":"","code":"if (!require('devtools')) install.packages('devtools') devtools::install_github('luismurao/tenm') # If you want to build vignette, install pandoc before and then devtools::install_github('luismurao/tenm',build_vignettes=TRUE)"},{"path":"/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Temporal ecological niche models","text":"CONACYT Ciencia de Frontera CF-2023--1156.","code":""},{"path":"/reference/abronia.html","id":null,"dir":"Reference","previous_headings":"","what":"Occurrence records of Abronia graminea — abronia","title":"Occurrence records of Abronia graminea — abronia","text":"dataset containing occurrence records Abronia graminea. data downloaded GBIF (GBIF, 2022).","code":""},{"path":"/reference/abronia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Occurrence records of Abronia graminea — abronia","text":"","code":"abronia"},{"path":"/reference/abronia.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Occurrence records of Abronia graminea — abronia","text":"data frame 106 rows 5 variables: species Scientific name species decimalLongitude Longitude decimalLatitude Latitude year Observation year gbif_doi DOI id citing dataset","code":""},{"path":"/reference/abronia.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Occurrence records of Abronia graminea — abronia","text":"GBIF.org (22 February 2022) GBIF Occurrence Download https://doi.org/10.15468/dl.teyjm9","code":""},{"path":"/reference/bg_by_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to obtain environmental background by dates — bg_by_date","title":"Function to obtain environmental background by dates — bg_by_date","text":"Get environmental background set dated environmental layers. Function obtain environmental records background set dated environmental layers.","code":""},{"path":"/reference/bg_by_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to obtain environmental background by dates — bg_by_date","text":"","code":"bg_by_date(   this_species,   buffer_ngbs = NULL,   buffer_distance = 1000,   n_bg = 50000,   process_ngbs_by = 100 )"},{"path":"/reference/bg_by_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to obtain environmental background by dates — bg_by_date","text":"this_species Species Temporal Environmental Data object ex_by_date. buffer_ngbs Number pixel neighbors used build buffer. buffer_distance Distance used create buffer background data taken. n_bg Number background points. process_ngbs_by Numeric. Estimates neighbor cells x cells. memory management.","code":""},{"path":"/reference/bg_by_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to obtain environmental background by dates — bg_by_date","text":"buffer built around occurrences using neighborhood distance.","code":""},{"path":"/reference/bg_by_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to obtain environmental background by dates — bg_by_date","text":"","code":"if (FALSE) { library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60) #This code is for running in parallel future::plan(\"multisession\",workers=2) abex <- tenm::ex_by_date(this_species = abtc,train_prop=0.7) abbg <- tenm::bg_by_date(this_species = abex,                          buffer_ngbs=10,n_bg=50000) future::plan(\"sequential\") }"},{"path":"/reference/cells2samp.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to generate cell IDs to be used for choosing the environmental background data — cells2samp","title":"Helper function to generate cell IDs to be used for choosing the environmental background data — cells2samp","text":"Returns pixel IDs sample generating environmental background form modeling layers.","code":""},{"path":"/reference/cells2samp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to generate cell IDs to be used for choosing the environmental background data — cells2samp","text":"","code":"cells2samp(   data,   longitude,   latitude,   cell_ids = NULL,   buffer_ngbs = 2,   raster_mask,   process_ngbs_by = 10,   n_bg = 50000,   progress = TRUE )"},{"path":"/reference/cells2samp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to generate cell IDs to be used for choosing the environmental background data — cells2samp","text":"data data.frame longitude latitude data longitude character vector column name longitude. latitude character vector column name latitude. cell_ids numeric vector pixel ids. default values NULL. Use parameter obtained information using function cellFromXY. buffer_ngbs Number pixel neighbors around occurrences used build buffer. raster_mask object class RasterLayer used obtain pixel IDs. process_ngbs_by Numeric. Estimates neighbor cells x cells. memory management. n_bg Number background pixels. progress Logical. Show computation progress","code":""},{"path":"/reference/cells2samp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to generate cell IDs to be used for choosing the environmental background data — cells2samp","text":"","code":"# cells to sample data(abronia) temporal_layer <- system.file(\"extdata/bio/2016/bio_01.tif\",package = \"tenm\") raster_mask <- terra::rast(temporal_layer) set.seed(123) samp_01 <- tenm::cells2samp(data = abronia,                             longitude = \"decimalLongitude\",                             latitude = \"decimalLatitude\",                             cell_ids = NULL,                             buffer_ngbs = 4,                             raster_mask = raster_mask,                             process_ngbs_by = 10,                             n_bg = 50000,                             progress =TRUE)"},{"path":"/reference/clean_dup.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to clean duplicated longitude and latitude data — clean_dup","title":"Function to clean duplicated longitude and latitude data — clean_dup","text":"Clean duplicated redundant occurrence records whiches present overlapping longitude latitude geographical coordinates regarding referent system user can choose fourth possible ways eliminate: distance threshold, per single pixel grain resolution, pixel neighborhood, combined distance pixel time.function main purpose eliminate occurrence points geographically spliced, using information spatial position determine , order depurate large clouds occurrence points cause environmental overestimation future model, call process \"cleaning spatial duplicated data\". user set distance \"units\" arose overlapping area random choosen record occurrence within consider duplicated eliminated. Also can use raster mask determinate pixel grain resolution base sift; see arguments raster_mask n_ngbs.","code":""},{"path":"/reference/clean_dup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to clean duplicated longitude and latitude data — clean_dup","text":"","code":"clean_dup(   data,   longitude,   latitude,   threshold = 0,   by_mask = FALSE,   raster_mask = NULL,   n_ngbs = 0 )"},{"path":"/reference/clean_dup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to clean duplicated longitude and latitude data — clean_dup","text":"data dataframe longitude latitude occurrence records belongings specie. longitude character vector column name \"longitude\" within dataframe. latitude character vector column name \"latitude\" within dataframe. threshold numeric value representing euclidean distance coordinates considered duplicate. Also view value radio (r) covers area. by_mask Logical. TRUE elimination duplicates done using raster layer mask; False elimination duplicates done distance threshold. raster_mask object class SpatRaster used clean duplicates present ID pixel. n_ngbs Number pixel neighbors. Remove duplicates depending many pixels range want, 1 eliminate duplicates pixel, means just one record per single pixel resolution,2 neighborhood one-pixel length 3 3 pixels, 3 5 5 vicinity depending much area want cover.","code":""},{"path":"/reference/clean_dup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to clean duplicated longitude and latitude data — clean_dup","text":"Returns data.frame coordinate data species","code":""},{"path":"/reference/clean_dup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to clean duplicated longitude and latitude data — clean_dup","text":"","code":"data(abronia) tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") tenm_mask <- terra::rast(file.path(tempora_layers_dir,\"1939/bio_01.tif\")) # Clean duplicates without raster mask (just by distance threshold) # First check the number of occurrence records print(nrow(abronia)) #> [1] 106 # Clean duplicated records using a distance of ~ 18 km (0.1666667 grades) ab_1 <- tenm::clean_dup(data =abronia,                         longitude = \"decimalLongitude\",                         latitude = \"decimalLatitude\",                         threshold = terra::res(tenm_mask),                         by_mask = FALSE,                         raster_mask = NULL) # Check number of records print(nrow(ab_1)) #> [1] 10 # Clean duplicates using a raster mask ab_2 <- tenm::clean_dup(data =abronia,                         longitude = \"decimalLongitude\",                         latitude = \"decimalLatitude\",                         threshold = terra::res(tenm_mask)[1],                         by_mask = TRUE,                         raster_mask = tenm_mask,                         n_ngbs = 0) # Check number of records print(nrow(ab_2)) #> [1] 16"},{"path":"/reference/clean_dup_by_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to clean duplicated coordinates data — clean_dup_by_date","title":"Function to clean duplicated coordinates data — clean_dup_by_date","text":"Clean duplicated longitude latitude data year using threshold distance. main propose function eliminate data occurrence points spliced different year date given distance threshold. function also allows clean duplicate data pixel given resolution raster mask.","code":""},{"path":"/reference/clean_dup_by_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to clean duplicated coordinates data — clean_dup_by_date","text":"","code":"clean_dup_by_date(   this_species,   threshold,   by_mask = FALSE,   raster_mask = NULL,   n_ngbs = 0 )"},{"path":"/reference/clean_dup_by_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to clean duplicated coordinates data — clean_dup_by_date","text":"this_species Species Temporal Data object see sp_temporal_data. threshold numeric value representing distance coordinates considered duplicate. by_mask Logical. TRUE elimination duplicates done using raster layer mask; False elimination duplicates done distance threshold. raster_mask object class SpatRaster used clean duplicates present ID pixel. n_ngbs Number pixel neighbors. Remove duplicates depending many pixels range want,\"0\" use order remove duplicated occurrence points present single pixel (1x1), \"1\" eliminate duplicates 1 pixel-long neighborhood 9 pixel area (3x3), \"2\" correspond neighborhood 2 adjacent pixels 25 pixel area (5x5) depending much area want cover.","code":""},{"path":"/reference/clean_dup_by_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to clean duplicated coordinates data — clean_dup_by_date","text":"function build basis clean_dup. See help function examples","code":""},{"path":"/reference/clean_dup_by_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to clean duplicated coordinates data — clean_dup_by_date","text":"","code":"library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") tenm_mask <- terra::rast(file.path(tempora_layers_dir,\"1939/bio_01.tif\")) # Clean duplicates without raster mask (just by distance threshold) abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") abtc1 <- tenm::clean_dup_by_date(abt,threshold = terra::res(tenm_mask)[1]) # Check number of records print(nrow(abtc1$temporal_df)) #> [1] 40 # Clean duplicates using a raster mask abtc2 <- tenm::clean_dup_by_date(this_species = abt,                                 by_mask = TRUE,                                 threshold = terra::res(tenm_mask)[1],                                 raster_mask = tenm_mask[1],                                 n_ngbs = 0) # Check number of records print(nrow(abtc2$temporal_df)) #> [1] 40"},{"path":"/reference/colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Colors for plotting — colors","title":"Colors for plotting — colors","text":"string vector colors plotting vignette example.","code":""},{"path":"/reference/colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colors for plotting — colors","text":"","code":"colors"},{"path":"/reference/colors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Colors for plotting — colors","text":"object class character length 40.","code":""},{"path":"/reference/correlation_finder.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to find out strong correlations in a correlation matrix — correlation_finder","title":"Function to find out strong correlations in a correlation matrix — correlation_finder","text":"function finds variables strong correlations according correlation threshold. output returns list variables names can summarize information removes variables redundant.","code":""},{"path":"/reference/correlation_finder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to find out strong correlations in a correlation matrix — correlation_finder","text":"","code":"correlation_finder(   environmental_data,   method = \"spearman\",   threshold,   verbose = TRUE )"},{"path":"/reference/correlation_finder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to find out strong correlations in a correlation matrix — correlation_finder","text":"environmental_data matrix data.frame environmental data method method estimate correlation matrix. Posible options \"spearman\", \"pearson\" \"kendall\". threshold Threshold value considered correlation high. verbose Verbose output.","code":""},{"path":"/reference/correlation_finder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to find out strong correlations in a correlation matrix — correlation_finder","text":"Returns vector variable names can summarize information.","code":""},{"path":"/reference/cov_center.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to compute the Minimum Volume covariance Matrix of an ellipsoid niche model. — cov_center","title":"Function to compute the Minimum Volume covariance Matrix of an ellipsoid niche model. — cov_center","text":"Function compute covariance matrix, niche centroid volume ellipsoid model. uses values niche variables ocurrences points.","code":""},{"path":"/reference/cov_center.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to compute the Minimum Volume covariance Matrix of an ellipsoid niche model. — cov_center","text":"","code":"cov_center(data, mve = TRUE, level, vars = NULL)"},{"path":"/reference/cov_center.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to compute the Minimum Volume covariance Matrix of an ellipsoid niche model. — cov_center","text":"data data.frame matrix numeric values variables used model niche. mve logical value. TRUE minimum volume ellipsoid computed using function cov.mve MASS package. False covariance matrix input data used. level numerical value specifying proportion data used compute ellipsoid. vars numeric string vector specifying columns indexes/names variables input data used fit ellipsoid model. NULL user asked enter indexes. interactively","code":""},{"path":"/reference/cov_center.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to compute the Minimum Volume covariance Matrix of an ellipsoid niche model. — cov_center","text":"Returns list containing centroid ellipsoid, covariance matrix based input data, ellipsoid volume, semi-axis length axis coordinates.","code":""},{"path":"/reference/cov_center.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to compute the Minimum Volume covariance Matrix of an ellipsoid niche model. — cov_center","text":"","code":"# \\donttest{ library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60) future::plan(\"multisession\",workers=2) abex <- tenm::ex_by_date(abtc,train_prop=0.7) future::plan(\"sequential\") varcorrs <- tenm::correlation_finder(environmental_data = abex$env_data[,-ncol(abex$env_data)],                                      method = \"spearman\",                                      threshold = 0.8,                                      verbose = FALSE) #> Warning: the standard deviation is zero mod <- tenm::cov_center(data = abex$env_data,                         mve = TRUE,                         level = 0.975,                         vars = c(\"bio_05\",\"bio_06\",\"bio_12\")) # Print model parameters print(mod) #> $centroid #>     bio_05     bio_06     bio_12  #>  217.10256   54.69231 1106.07692  #>  #> $covariance #>           bio_05   bio_06      bio_12 #> bio_05  731.3050 456.5061   -249.8502 #> bio_06  456.5061 418.6923    987.1559 #> bio_12 -249.8502 987.1559 152235.5992 #>  #> $niche_volume #> [1] 14127753 #>  #> $SemiAxis_length #>          a          b          c  #>   28.44591   99.38665 1192.98935  #>  #> $axis_coordinates #> $axis_coordinates[[1]] #>         bio_05   bio_06   bio_12 #> vec_1 233.5857 31.50945 1106.254 #> vec_2 200.6194 77.87517 1105.899 #>  #> $axis_coordinates[[2]] #>         bio_05     bio_06   bio_12 #> vec_1 298.1029 112.282107 1105.835 #> vec_2 136.1022  -2.897492 1106.319 #>  #> $axis_coordinates[[3]] #>         bio_05   bio_06     bio_12 #> vec_1 215.1587 62.44309 2299.03951 #> vec_2 219.0465 46.94153  -86.88566 #>  #>  # }"},{"path":"/reference/ellipsoid_omr.html","id":null,"dir":"Reference","previous_headings":"","what":"ellipsoid_omr — ellipsoid_omr","title":"ellipsoid_omr — ellipsoid_omr","text":"Compute omission rate ellipspoid models","code":""},{"path":"/reference/ellipsoid_omr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ellipsoid_omr — ellipsoid_omr","text":"","code":"ellipsoid_omr(   env_data,   env_test = NULL,   env_bg,   cf_level,   mve = TRUE,   proc = FALSE,   proc_iter = 100,   rseed = TRUE )"},{"path":"/reference/ellipsoid_omr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ellipsoid_omr — ellipsoid_omr","text":"env_data data frame environmental data. env_test data frame environmental testing data. default NULL given selection process show p-value binomial test. env_bg Environmental data compute approximated prevalence model. data sample environmental layers calibration area. cf_level Proportion points included ellipsoids. parameter equivalent error (E) proposed Peterson et al. (2008). mve logical value. TRUE minimum volume ellipsoid computed using function cov.rob MASS package. False covariance matrix input data used. proc Logical TRUE partial roc test run. proc_iter Numeric. total number iterations partial ROC bootstrap. rseed Logical. Whether set random seed partial roc bootstrap. Default TRUE.","code":""},{"path":"/reference/ellipsoid_omr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ellipsoid_omr — ellipsoid_omr","text":"data.frame 5 columns: ) \"fitted_vars\" names variables fitted; ii) \"om_rate\" omission rates model; iii) \"bg_prevalence\" approximated prevalence model see details section.","code":""},{"path":"/reference/ellipsoid_projection.html","id":null,"dir":"Reference","previous_headings":"","what":"ellipsoid_projection: function to fit an ellipsoid model — ellipsoid_projection","title":"ellipsoid_projection: function to fit an ellipsoid model — ellipsoid_projection","text":"Function fit ellipsoid model using shape matrix (covariance matrix) niche variables. optimized version ellipsoidfit function; diffrence give table distances niche centroid.","code":""},{"path":"/reference/ellipsoid_projection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ellipsoid_projection: function to fit an ellipsoid model — ellipsoid_projection","text":"","code":"ellipsoid_projection(   envlayers,   centroid,   covar,   level = 0.95,   plot = T,   size,   xlab1 = \"niche var 1\",   ylab1 = \"niche var 2\",   zlab1 = \"S\",   alpha = 0.1,   ... )"},{"path":"/reference/ellipsoid_projection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ellipsoid_projection: function to fit an ellipsoid model — ellipsoid_projection","text":"envlayers SpatRaster object niche variables. centroid vector values centers ellipsoid (see cov_center). covar shape matrix (covariance) ellipoid (see cov_center). level proportion points  included inside ellipsoid plot Logical True plot niche shown. size size points niche plot. xlab1 x label 2-dimensional histogram ylab1 y label 2-dimensional histogram zlab1 z label 2-dimensional histogram alpha Control transparency 3-dimensional ellipsoid ... Arguments passed plot3d function rgl","code":""},{"path":"/reference/ellipsoid_projection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ellipsoid_projection: function to fit an ellipsoid model — ellipsoid_projection","text":"Returns list containing data.frame suitability values; suitability raster; data.frame mahalanobis euclidean distances centroid.","code":""},{"path":"/reference/ellipsoid_selection.html","id":null,"dir":"Reference","previous_headings":"","what":"ellipsoid_selection: Performs variable selection for ellipsoid models — ellipsoid_selection","title":"ellipsoid_selection: Performs variable selection for ellipsoid models — ellipsoid_selection","text":"Performs variable selection ellipsoid models according omission rates environmental space.","code":""},{"path":"/reference/ellipsoid_selection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ellipsoid_selection: Performs variable selection for ellipsoid models — ellipsoid_selection","text":"","code":"ellipsoid_selection(   env_train,   env_test = NULL,   env_vars,   nvarstest,   level = 0.95,   mve = TRUE,   env_bg = NULL,   omr_criteria,   parallel = F,   ncores = NULL,   comp_each = 100,   proc = FALSE,   proc_iter = 100,   rseed = TRUE )"},{"path":"/reference/ellipsoid_selection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ellipsoid_selection: Performs variable selection for ellipsoid models — ellipsoid_selection","text":"env_train data frame environmental training data. env_test data frame environmental testing data. default NULL given selection process show p-value binomial test. env_vars vector names environmental variables used selection process. nvarstest vector indicating number variables fit ellipsoids model selection. allowed test models different number variables (.e. nvarstest=c(3,6)). level Proportion points included ellipsoids. parameter equivalent error (E) proposed Peterson et al. (2008). mve logical value. TRUE minimum volume ellipsoid computed using function cov.rob MASS package. False covariance matrix input data used. env_bg Environmental data compute approximated prevalence model. data sample environmental layers calibration area. omr_criteria Omission rate criteria. Value omission rate allowed selection process. Default NULL see details. parallel computations run parallel. Default FALSE ncores number cores used parallel process. default tenm use total number available cores less one. comp_each Number models run job parallel computation. Default 100 proc Logical TRUE partial roc test run. proc_iter Numeric. total number iterations partial ROC bootstrap. rseed Logical. Whether set random seed partial roc bootstrap. Default TRUE.","code":""},{"path":"/reference/ellipsoid_selection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ellipsoid_selection: Performs variable selection for ellipsoid models — ellipsoid_selection","text":"data.frame 5 columns: ) \"fitted_vars\" names variables fitted; ii) \"om_rate\" omission rates model; iii) \"bg_prevalence\" approximated prevalence model see details section; iv) rank value importance model selection omission rate; v) rank value prevalence value omr_criteria passed.","code":""},{"path":"/reference/ellipsoid_selection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ellipsoid_selection: Performs variable selection for ellipsoid models — ellipsoid_selection","text":"Model selection occurs environmental space (E-space). variable combination omission rate (omr) E-space computed using function inEllipsoid. results ordered omr user-specified environmental background \"env_bg\" estimated prevalence computed results ordered also \"bg_prevalence\". number variables construct candidate models can specified user parameter \"nvarstest\". Model selection run parallel user-specified one set combinations total number models tested greater 500. given\"omr_criteria\" \"bg_prevalence\", results shown pondering models met \"omr_criteria\" value \"bg_prevalence\". details examples go ellipsoid_omr help.","code":""},{"path":"/reference/ellipsoid_selection.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ellipsoid_selection: Performs variable selection for ellipsoid models — ellipsoid_selection","text":"Peterson, .T. et al. (2008) Rethinking receiver operating characteristic analysis applications ecological niche modeling. Ecol. Modell., 213, 63–72.","code":""},{"path":"/reference/ellipsoid_selection.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ellipsoid_selection: Performs variable selection for ellipsoid models — ellipsoid_selection","text":"Luis Osorio-Olvera luismurao@gmail.com","code":""},{"path":"/reference/ex_by_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract environmental data by date — ex_by_date","title":"Extract environmental data by date — ex_by_date","text":"Function extract environmental data date. function generates training testing data sets using random partition definite proportion.","code":""},{"path":"/reference/ex_by_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract environmental data by date — ex_by_date","text":"","code":"ex_by_date(this_species, train_prop = 0.7)"},{"path":"/reference/ex_by_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract environmental data by date — ex_by_date","text":"this_species Species Temporal Data object see sp_temporal_data. train_prop Numeric. Training proportion. proportion record (occurrences points) used training testing. 0.7 train_prop indicates 70 data used train model, 30 model .","code":""},{"path":"/reference/ex_by_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract environmental data by date — ex_by_date","text":"","code":"if (FALSE) { library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60) future::plan(\"multisession\",workers=10) abex <- tenm::ex_by_date(this_species = abtc,                          train_prop=0.7) future::plan(\"sequential\") }"},{"path":"/reference/inEllipsoid.html","id":null,"dir":"Reference","previous_headings":"","what":"inEllipsoid: Determine if a point is inside or outside an ellipsoid — inEllipsoid","title":"inEllipsoid: Determine if a point is inside or outside an ellipsoid — inEllipsoid","text":"Determine point inside outside ellipsoid.","code":""},{"path":"/reference/inEllipsoid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"inEllipsoid: Determine if a point is inside or outside an ellipsoid — inEllipsoid","text":"","code":"inEllipsoid(centroid, eShape, env_data, level)"},{"path":"/reference/inEllipsoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"inEllipsoid: Determine if a point is inside or outside an ellipsoid — inEllipsoid","text":"centroid numeric vector centroids environmental variable eShape Shape matrix ellipsoid (can covariance matrix minimum volume ellipsoid). env_data data frame environmental training data. level Proportion points included ellipsoids. parameter equivalent error (E) proposed Peterson et al. (2008).","code":""},{"path":"/reference/inEllipsoid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"inEllipsoid: Determine if a point is inside or outside an ellipsoid — inEllipsoid","text":"data.frame 2 columns. first \"in_Ellipsoid\" binary response values 1 (inside ellipsoid) zeros (outside ellipsoid); second \"mh_dist\" Mahalanobis distance centroid.","code":""},{"path":"/reference/inEllipsoid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"inEllipsoid: Determine if a point is inside or outside an ellipsoid — inEllipsoid","text":"","code":"# \\donttest{ library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60) future::plan(\"multisession\",workers=10) abex <- tenm::ex_by_date(abtc,train_prop=0.7) varcorrs <- tenm::correlation_finder(environmental_data = abex$env_data[,-ncol(abex$env_data)],                                      method = \"spearman\",                                      threshold = 0.8,                                      verbose = FALSE) #> Warning: the standard deviation is zero future::plan(\"sequential\") mod <- tenm::cov_center(data = abex$env_data,                         mve = TRUE,                         level = 0.975,                         vars = c(\"bio_05\",\"bio_06\",\"bio_12\")) in_elip <- inEllipsoid(centroid = mod$centroid,                        eShape = mod$covariance,                        env_data = abex$env_data[,c(\"bio_05\",\"bio_06\",\"bio_12\")],                        level = 0.975) # 1 = Inside the ellipsoid; 0 = Outside the ellipsoid print(in_elip) #>    in_Ellipsoid    mh_dist #> 1             1  1.5208724 #> 2             1  1.1441787 #> 3             1  4.5220005 #> 4             1  0.6103583 #> 5             1  0.8606538 #> 6             1  2.2926090 #> 7             1  2.7047455 #> 8             1  0.7001683 #> 9             1  1.4891237 #> 10            1  0.6497573 #> 11            1  0.9349719 #> 12            1  5.7577780 #> 13            1  0.6612829 #> 14            1  2.8157858 #> 15            1  5.0221566 #> 16            1  0.4349905 #> 17            1  0.9724952 #> 18            1  1.0877318 #> 19            1  0.1253176 #> 20            1  4.8374752 #> 21            1  1.9092557 #> 22            1  7.8798423 #> 23            1  1.8857259 #> 24            1  3.2271328 #> 25            1  6.6748831 #> 26            1  2.1050325 #> 27            1  3.4891962 #> 28            1  3.0973598 #> 29            1  0.8824323 #> 30            0  9.8155714 #> 31            1  1.7366118 #> 32            1  2.0110087 #> 33            0 13.4444583 #> 34            1  0.6095582 #> 35            1  4.3824177 #> 36            1  6.4840384 #> 37            1  5.6598968 #> 38            1  7.5065473 #> 39            1  3.8067799 #> 40            1  1.6922563 # }"},{"path":"/reference/metaras.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to obtain layer name from a — metaras","title":"Helper function to obtain layer name from a — metaras","text":"Returns character vector name raster layer","code":""},{"path":"/reference/metaras.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to obtain layer name from a — metaras","text":"","code":"metaras(r)"},{"path":"/reference/metaras.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to obtain layer name from a — metaras","text":"r object class SpatRaster","code":""},{"path":"/reference/metaras.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to obtain layer name from a — metaras","text":"","code":"tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") p1 <- list.files(tempora_layers_dir,full.names=TRUE,                  pattern=\".tif$\",recursive=TRUE)[1] r1 <- terra::rast(p1) print(tenm::metaras(r1)) #> [1] \"bio_01\""},{"path":"/reference/pROC.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial ROC calculation for Niche Models — pROC","title":"Partial ROC calculation for Niche Models — pROC","text":"pROC applies partial ROC tests continuous niche models.","code":""},{"path":"/reference/pROC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial ROC calculation for Niche Models — pROC","text":"","code":"pROC(   continuous_mod,   test_data,   n_iter = 1000,   E_percent = 5,   boost_percent = 50,   rseed = FALSE,   sub_sample = TRUE,   sub_sample_size = 1000 )"},{"path":"/reference/pROC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial ROC calculation for Niche Models — pROC","text":"continuous_mod SpatRaster numeric vector ecological niche model evaluated. numeric vector provided contain values predicted suitability. test_data numerical matrix, data.frame, numeric vector. data.frame matrix contain coordinates occurrences used test ecological niche model evaluated; columns must : longitude latitude. numeric vector contain values predicted suitability. n_iter (numeric) number bootstrap iterations performed; default = 1000. E_percent (numeric) value 0 100 used threshold (E); default = 5. boost_percent (numeric) value 0 100 representing percent testing data used performing bootstrap process calculating partial ROC; default = 50. rseed Logical. Whether set random seed. Default FALSE. sub_sample Logical. Indicates whether test run using subsample size sub_sample_size. recommended big rasters. sub_sample_size Numeric. Size sample used computing pROC values.","code":""},{"path":"/reference/pROC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial ROC calculation for Niche Models — pROC","text":"data.frame containing AUC values AUC ratios calculated iteration.","code":""},{"path":"/reference/pROC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Partial ROC calculation for Niche Models — pROC","text":"Partial ROC calculated following Peterson et al. (2008; http://dx.doi.org/10.1016/j.ecolmodel.2007.11.008). function modification PartialROC funcion, available https://github.com/narayanibarve/ENMGadgets.","code":""},{"path":"/reference/pROC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Partial ROC calculation for Niche Models — pROC","text":"Peterson, .T. et al. (2008) Rethinking receiver operating characteristic analysis applications ecological niche modeling. Ecol. Modell., 213, 63–72.","code":""},{"path":"/reference/pROC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partial ROC calculation for Niche Models — pROC","text":"","code":"data(abronia) suit_1970_2000 <- terra::rast(system.file(\"extdata/suit_1970_2000.tif\",                                           package = \"tenm\")) print(suit_1970_2000) #> class       : SpatRaster  #> dimensions  : 23, 20, 1  (nrow, ncol, nlyr) #> resolution  : 0.1666667, 0.1666667  (x, y) #> extent      : -99.16667, -95.83333, 17.16667, 21  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  #> source      : suit_1970_2000.tif  #> name        : suit_1970_2000  #> min value   :   4.614139e-37  #> max value   :   8.332142e-01  proc_test <- tenm::pROC(continuous_mod = suit_1970_2000,                         test_data = abronia[,c(\"decimalLongitude\",                                                \"decimalLatitude\")],                         n_iter = 500, E_percent=5,                         boost_percent=50) print(proc_test$pROC_summary) #>              Mean_AUC Mean_pAUC_ratio_at_5%               P_value  #>             0.9024062             1.5066030             0.0000000"},{"path":"/reference/predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict potential distribution for tenm regarding to a specific time period of environmental conditions or averages. — predict,sp.temporal.selection-method","title":"Predict potential distribution for tenm regarding to a specific time period of environmental conditions or averages. — predict,sp.temporal.selection-method","text":"Predict potential distribution tenm regarding specific time period environmental conditions averages.","code":""},{"path":"/reference/predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict potential distribution for tenm regarding to a specific time period of environmental conditions or averages. — predict,sp.temporal.selection-method","text":"","code":"# S4 method for sp.temporal.selection predict(   object,   model_variables = NULL,   layers = NULL,   layers_path = NULL,   layers_ext = NULL,   mve = TRUE,   level = 0.975,   ... )"},{"path":"/reference/predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict potential distribution for tenm regarding to a specific time period of environmental conditions or averages. — predict,sp.temporal.selection-method","text":"object object class sp.temporal.selection model_variables vector variable names layers SpatRaster object list element SpatRaster. layers_path Path layers layers_ext Layers extension mve projection use minimum volume ellipsoid algorithm level Proportion data used fit minimum volume ellipsoid ... Additional parameters passed ellipsoid_projection","code":""},{"path":"/reference/predict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict potential distribution for tenm regarding to a specific time period of environmental conditions or averages. — predict,sp.temporal.selection-method","text":"Note SpatRaster layers parameter number elements (layers) model_variables. predict method assume variables SpatRaster ones model_variables.","code":""},{"path":"/reference/sp.temporal.bg-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 classes to organize data and results of tenmp objects — sp.temporal.bg-class","title":"S3 classes to organize data and results of tenmp objects — sp.temporal.bg-class","text":"S3 classes organize data results tenmp objects","code":""},{"path":"/reference/sp.temporal.bg-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"S3 classes to organize data and results of tenmp objects — sp.temporal.bg-class","text":"Luis Osorio-Olvera","code":""},{"path":"/reference/sp.temporal.env-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 classes to organize data and results of tenmp objects — sp.temporal.env-class","title":"S3 classes to organize data and results of tenmp objects — sp.temporal.env-class","text":"S3 classes organize data results tenmp objects","code":""},{"path":"/reference/sp.temporal.env-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"S3 classes to organize data and results of tenmp objects — sp.temporal.env-class","text":"Luis Osorio-Olvera","code":""},{"path":"/reference/sp.temporal.modeling-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 classes to organize data and results of tenmp objects — sp.temporal.modeling-class","title":"S3 classes to organize data and results of tenmp objects — sp.temporal.modeling-class","text":"S3 classes organize data results tenmp objects","code":""},{"path":"/reference/sp.temporal.modeling-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"S3 classes to organize data and results of tenmp objects — sp.temporal.modeling-class","text":"Luis Osorio-Olvera","code":""},{"path":"/reference/sp.temporal.selection-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 classes to organize data and results of tenmp objects — sp.temporal.selection-class","title":"S3 classes to organize data and results of tenmp objects — sp.temporal.selection-class","text":"S3 classes organize data results tenmp objects","code":""},{"path":"/reference/sp.temporal.selection-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"S3 classes to organize data and results of tenmp objects — sp.temporal.selection-class","text":"Luis Osorio-Olvera","code":""},{"path":"/reference/sp_temporal_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create a Species Temporal Data object (STD object). — sp_temporal_data","title":"Function to create a Species Temporal Data object (STD object). — sp_temporal_data","text":"function creates object class sp.temporal.modeling contains list four attributes. Inside list, data frame called temporal_df containing five columns: first two columns coordinates longitude latitude came occurrences records, third date variable species registered, fourth format dates layer, organized particular pattern, example year/month/day, year/month, just year arrangement like month/year, month/year/day, day/month/year fifth one path stored bioclimatic layer corresponding year. three variables present list character class objects: sp_date_var[1] name date variable column available occurrences records, lon_lat_vars[2] columns coordinates longitude latitude correspondingly, layers_ext[1] final extension format environmental information (“.tif$”).","code":""},{"path":"/reference/sp_temporal_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create a Species Temporal Data object (STD object). — sp_temporal_data","text":"","code":"sp_temporal_data(   occs,   longitude,   latitude,   sp_date_var,   occ_date_format = \"y\",   layers_date_format = \"y\",   layers_by_date_dir,   layers_ext = \"*.tif$\" )"},{"path":"/reference/sp_temporal_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create a Species Temporal Data object (STD object). — sp_temporal_data","text":"occs DataFrame SpatialPointsDataFrame information occurrence records specie modeled. fundamental count exact geographical coordinates longitude latitude specie detected least nearest, also temporal column indicating time record. longitude occs data.frame user must indicate variable name longitude data. latitude occs data.frame user must indicate variable name latitude data. sp_date_var date variable indicating date observation. name variable stored date observation. occ_date_format Occurrences date format. format dates occurrence points organized. possible options \"y\" years; \"ym\" years months; \"ymd\" year, month day; \"mdy\" month, day year; \"\" month year; \"dmy\" day, month year. layers_date_format Raster layers environmental information data format. possible options \"y\" years; \"ym\" years months; \"ymd\" year, month day; \"mdy\" month, day year; \"\" month year; \"dmy\" day, month year. layers_by_date_dir directory contain inside folders organized date raster layers environmental information. layers_ext extension path raster layer archive. words, object stored one paths leads location environmental raster layers inner memory.","code":""},{"path":"/reference/sp_temporal_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create a Species Temporal Data object (STD object). — sp_temporal_data","text":"Returns  sp.temporal.modeling object (list) coordinates occurrences points, years observation path temporal layers.","code":""},{"path":"/reference/sp_temporal_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to create a Species Temporal Data object (STD object). — sp_temporal_data","text":"","code":"library(tenm) #A data.frame with occurrences points information of Abronia graminea. # See help(abronia) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\")"},{"path":"/reference/tenm_selection.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to find the best n-dimensional ellipsoid model using Partial Roc as a performance criteria. — tenm_selection","title":"Function to find the best n-dimensional ellipsoid model using Partial Roc as a performance criteria. — tenm_selection","text":"Function find best n-dimensional ellipsoid model using Partial Roc performance criteria.","code":""},{"path":"/reference/tenm_selection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to find the best n-dimensional ellipsoid model using Partial Roc as a performance criteria. — tenm_selection","text":"","code":"tenm_selection(   this_species,   omr_criteria = 0.1,   ellipsoid_level = 0.975,   vars2fit,   nvars_to_fit = c(2, 3),   proc = TRUE,   sub_sample = TRUE,   sub_sample_size = 1000,   RandomPercent = 50,   NoOfIteration = 1000,   parallel = TRUE,   n_cores = 4 )"},{"path":"/reference/tenm_selection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to find the best n-dimensional ellipsoid model using Partial Roc as a performance criteria. — tenm_selection","text":"this_species, Species Temporal Environment \"sp.temporal.env\" object see ex_by_date. omr_criteria Omission rate used select best models. See ellipsoid_selection details. ellipsoid_level proportion points included inside ellipsoid. vars2fit vector names environmental variables used selection process. nvars_to_fit Number variables used model. proc Logical. TRUE partial ROC test computed model. sub_sample Logical. Indicates whether test run using subsample size sub_sample_size. recommended big rasters sub_sample_size Numeric. Size sample used computing pROC values. RandomPercent Occurrence points sampled randomly boostrap Partial Roc test pROC. NoOfIteration Number iteration bootstrapping Partial Roc test pROC. parallel Logical argument run computations parallel. Default TRUE n_cores Number cores used parallelization. Default 4","code":""},{"path":"/reference/tenm_selection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to find the best n-dimensional ellipsoid model using Partial Roc as a performance criteria. — tenm_selection","text":"\"sp.temp.best.model\" object metadata best model given performance Partial Roc test.","code":""},{"path":"/reference/tenm_selection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to find the best n-dimensional ellipsoid model using Partial Roc as a performance criteria. — tenm_selection","text":"","code":"if (FALSE) { library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60) future::plan(\"multisession\",workers=10) abex <- tenm::ex_by_date(this_species = abtc,                          train_prop=0.7) abbg <- tenm::bg_by_date(abex,                          buffer_ngbs=10,n_bg=50000) future::plan(\"sequential\") varcorrs <- tenm::correlation_finder(environmental_data = abex$env_data[,-ncol(abex$env_data)],                                      method = \"spearman\",                                      threshold = 0.8,                                      verbose = FALSE) vars2fit <- varcorrs$descriptors mod_sel <- tenm::tenm_selection(this_species = abbg,                                 omr_criteria =0.1,                                 ellipsoid_level=0.975,                                 vars2fit = vars2fit,                                 nvars_to_fit=c(2,3,4,5,6,7),                                 proc = T,                                 RandomPercent = 50,                                 NoOfIteration=1000,                                 parallel=TRUE,                                 n_cores=20) # Project potential distribution using bioclimatic layers for 1970-2000 # period. layers_70_00_dir <- system.file(\"extdata/bio_1970_2000\",package = \"tenm\") suit_1970_2000 <- predict(mod_sel,model_variables = NULL,                           layers_path = layers_70_00_dir,                           layers_ext = \".tif$\") terra::plot(suit_1970_2000) colors <- c('#000004FF', '#040312FF', '#0B0725FF',             '#0B0725FF', '#160B38FF', '#160B38FF',             '#230C4CFF', '#310A5CFF', '#3F0966FF',             '#4D0D6CFF', '#5A116EFF', '#67166EFF',             '#741A6EFF', '#81206CFF', '#81206CFF',             '#8E2469FF', '#9B2964FF', '#A82E5FFF',             '#B53359FF', '#B53359FF', '#C03A50FF',             '#CC4248FF', '#D74B3FFF', '#E05536FF',             '#E9602CFF', '#EF6E21FF', '#F57B17FF',             '#F8890CFF', '#FB9806FF', '#FB9806FF',             '#FCA70DFF', '#FBB81DFF', '#F9C72FFF',             '#F9C72FFF', '#F6D847FF', '#F2E763FF',             '#F2E763FF', '#F3F585FF', '#FCFFA4FF',             '#FCFFA4FF') points(abtc$temporal_df[,1:2],pch=17,cex=1,        col=rev(colors)) legend(\"topleft\",legend = abtc$temporal_df$year[1:18],        col =rev(colors[1:18]),        cex=0.75,pch=17) legend(\"topright\",legend = unique(abtc$temporal_df$year[19:40]),        col = rev(colors[19:40]),        cex=0.75,pch=17) }"}]
