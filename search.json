[{"path":"/articles/tenm-vignette.html","id":"standard-data-thinning","dir":"Articles","previous_headings":"","what":"Standard data thinning","title":"Introduction to tenm package","text":"relevant step curating occurrence data eliminate duplicated geographical information, depends several factors, including spatial autocorrelation spatial resolution modeling layers. Let’s see happens eliminate duplicated information defined spatial resolution modeling layers. , use tenm::clean_dup function tenm R package. applying spatial thinning, obtained ten observations 106 occurrences. lost lot information!!! function tenm::clean_dup method clean duplicated records according raster mask layer. avoids losing records might occur different pixels fall within distance used threshold cleaning. recovered 6 records, bad! hand, didn account fact occurrences come different years. tenm package designed deal occurrences coming different periods long user environmental layers matching years occurrence observations.","code":"# Load a modeling layer  tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") tenm_mask <- terra::rast(file.path(tempora_layers_dir,\"1939/bio_01.tif\"))  ab_1 <- tenm::clean_dup(data =abronia,                         longitude = \"decimalLongitude\",                         latitude = \"decimalLatitude\",                         threshold = terra::res(tenm_mask),                         by_mask = FALSE,                         raster_mask = NULL) tidyr::as_tibble(ab_1) #> # A tibble: 10 × 5 #>    species          decimalLongitude decimalLatitude  year gbif_doi              #>    <chr>                       <dbl>           <dbl> <int> <chr>                 #>  1 Abronia graminea            -97.5            19.5  1995 https://doi.org/10.1… #>  2 Abronia graminea            -97.0            18.2  1993 https://doi.org/10.1… #>  3 Abronia graminea            -98.0            19.8  1980 https://doi.org/10.1… #>  4 Abronia graminea            -97.7            19.6  2012 https://doi.org/10.1… #>  5 Abronia graminea            -97.9            20.1  2015 https://doi.org/10.1… #>  6 Abronia graminea            -97.4            18.5  1952 https://doi.org/10.1… #>  7 Abronia graminea            -97.1            18.9  1998 https://doi.org/10.1… #>  8 Abronia graminea            -97.3            19.0  1983 https://doi.org/10.1… #>  9 Abronia graminea            -97.3            18.7  1973 https://doi.org/10.1… #> 10 Abronia graminea            -97.0            19.7  1972 https://doi.org/10.1… ab_by_mask <- tenm::clean_dup(data =abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               threshold = terra::res(tenm_mask),                               by_mask = TRUE,                               raster_mask = tenm_mask) tidyr::as_tibble(ab_by_mask) #> # A tibble: 16 × 5 #>    species          decimalLongitude decimalLatitude  year gbif_doi              #>    <chr>                       <dbl>           <dbl> <int> <chr>                 #>  1 Abronia graminea            -98.2            20.0  2014 https://doi.org/10.1… #>  2 Abronia graminea            -98.1            19.9  2014 https://doi.org/10.1… #>  3 Abronia graminea            -98.1            19.8  2014 https://doi.org/10.1… #>  4 Abronia graminea            -97.9            19.9  2014 https://doi.org/10.1… #>  5 Abronia graminea            -97.3            18.7  1963 https://doi.org/10.1… #>  6 Abronia graminea            -97.1            18.3  1996 https://doi.org/10.1… #>  7 Abronia graminea            -97.4            18.8  1941 https://doi.org/10.1… #>  8 Abronia graminea            -97.4            18.7  1988 https://doi.org/10.1… #>  9 Abronia graminea            -97.0            19.6  1991 https://doi.org/10.1… #> 10 Abronia graminea            -97.4            19.1  2002 https://doi.org/10.1… #> 11 Abronia graminea            -97.5            19.5  1995 https://doi.org/10.1… #> 12 Abronia graminea            -97.0            18.2  1993 https://doi.org/10.1… #> 13 Abronia graminea            -97.7            19.6  2012 https://doi.org/10.1… #> 14 Abronia graminea            -97.9            20.1  2015 https://doi.org/10.1… #> 15 Abronia graminea            -97.1            18.9  1998 https://doi.org/10.1… #> 16 Abronia graminea            -97.3            19.0  1983 https://doi.org/10.1…"},{"path":"/articles/tenm-vignette.html","id":"time-specific-niche-modeling","dir":"Articles","previous_headings":"","what":"Time-specific niche modeling","title":"Introduction to tenm package","text":"Let’s apply functions methods work time-specific niche models. First, load data. Now, indicate path time-specific modeling layers located. explore structure directory contains modeling layers. Note directory contains directories named dates modeling layers. Now, explore dated directories. Note dated directories must environmental information. example, used bioclimatic layers derived CHELSAcruts database.","code":"library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") print(tempora_layers_dir) #> [1] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio\" list.dirs(tempora_layers_dir,recursive = FALSE) #>  [1] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1939\" #>  [2] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1940\" #>  [3] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1941\" #>  [4] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1950\" #>  [5] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1952\" #>  [6] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1963\" #>  [7] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1969\" #>  [8] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1970\" #>  [9] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1971\" #> [10] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1972\" #> [11] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1973\" #> [12] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1974\" #> [13] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1976\" #> [14] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1977\" #> [15] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1980\" #> [16] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1981\" #> [17] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1982\" #> [18] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1983\" #> [19] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1988\" #> [20] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1991\" #> [21] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1993\" #> [22] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1994\" #> [23] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1995\" #> [24] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1996\" #> [25] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1998\" #> [26] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/2002\" #> [27] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/2008\" #> [28] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/2011\" #> [29] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/2012\" #> [30] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/2014\" #> [31] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/2015\" #> [32] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/2016\" # Directory for year 1939 list.files(list.dirs(tempora_layers_dir,                      recursive = FALSE)[1],            pattern = \".tif$\") #>  [1] \"bio_01.tif\" \"bio_02.tif\" \"bio_03.tif\" \"bio_04.tif\" \"bio_05.tif\" #>  [6] \"bio_06.tif\" \"bio_07.tif\" \"bio_08.tif\" \"bio_09.tif\" \"bio_10.tif\" #> [11] \"bio_11.tif\" \"bio_12.tif\" \"bio_13.tif\" \"bio_14.tif\" \"bio_15.tif\" #> [16] \"bio_16.tif\" \"bio_17.tif\" \"bio_18.tif\" \"bio_19.tif\" # Directory for year 1972 list.files(list.dirs(tempora_layers_dir,                      recursive = FALSE)[10],            pattern = \".tif$\") #>  [1] \"bio_01.tif\" \"bio_02.tif\" \"bio_03.tif\" \"bio_04.tif\" \"bio_05.tif\" #>  [6] \"bio_06.tif\" \"bio_07.tif\" \"bio_08.tif\" \"bio_09.tif\" \"bio_10.tif\" #> [11] \"bio_11.tif\" \"bio_12.tif\" \"bio_13.tif\" \"bio_14.tif\" \"bio_15.tif\" #> [16] \"bio_16.tif\" \"bio_17.tif\" \"bio_18.tif\" \"bio_19.tif\" # Directory for year 2014 list.files(list.dirs(tempora_layers_dir,                      recursive = FALSE)[30],            pattern = \".tif$\") #>  [1] \"bio_01.tif\" \"bio_02.tif\" \"bio_03.tif\" \"bio_04.tif\" \"bio_05.tif\" #>  [6] \"bio_06.tif\" \"bio_07.tif\" \"bio_08.tif\" \"bio_09.tif\" \"bio_10.tif\" #> [11] \"bio_11.tif\" \"bio_12.tif\" \"bio_13.tif\" \"bio_14.tif\" \"bio_15.tif\" #> [16] \"bio_16.tif\" \"bio_17.tif\" \"bio_18.tif\" \"bio_19.tif\""},{"path":"/articles/tenm-vignette.html","id":"the-sp-temporal-modeling-object","dir":"Articles","previous_headings":"Time-specific niche modeling","what":"The sp.temporal.modeling object","title":"Introduction to tenm package","text":"following lines code, use special function tenm R package allow us work time-specific data. function tenm::sp_temporal_data parametrized occurrence dated database. parametrize function, need specify name columns contain longitude latitude data, column represents year observation, format dates (years, see help function date formats), layers date format, directory contains time-specific modeling layers raster layer extension. object abt special class called sp.temporal.modeling deals time-specific information. following line code, explore slots abt object. abt object four slots: temporal data.frame (“temporal_df”), character vector indicating date variable (“sp_date_var”), character vector showing names longitude latitude data (“lon_lat_vars”) another character vector extension modeling layers. Now, explore temporal_df slot, data.frame five columns: longitude, latitude, time variable (year), layer dates, layers path (path temporal niche layers located).","code":"data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") # See the names of the slots names(abt) #> [1] \"temporal_df\"  \"sp_date_var\"  \"lon_lat_vars\" \"layers_ext\" # See the temporal data.frame tidyr::as_tibble(head(abt$temporal_df)) #> # A tibble: 6 × 5 #>   decimalLongitude decimalLatitude  year layer_dates layers_path                 #>              <dbl>           <dbl> <int> <date>      <chr>                       #> 1            -98.2            20.0  2014 2014-01-01  /Library/Frameworks/R.fram… #> 2            -98.1            19.9  2014 2014-01-01  /Library/Frameworks/R.fram… #> 3            -98.1            19.9  2014 2014-01-01  /Library/Frameworks/R.fram… #> 4            -98.1            19.9  2014 2014-01-01  /Library/Frameworks/R.fram… #> 5            -98.1            19.8  2014 2014-01-01  /Library/Frameworks/R.fram… #> 6            -98.2            19.9  2014 2014-01-01  /Library/Frameworks/R.fram…"},{"path":"/articles/tenm-vignette.html","id":"time-specific-spatial-data-thinning","dir":"Articles","previous_headings":"Time-specific niche modeling","what":"Time-specific spatial data thinning","title":"Introduction to tenm package","text":"first step, curate time-specific database using function tenm::clean_dup_by_date. function parametrized tenm::clean_dup function difference thins data considering time variable (occurrences might spatially duplicated belong dates, time-specific context, duplicates). improvement methodology recover lot information. 10 records thinned using standard data cleaning process, now 40 records; 30 observations!!! allow us fit informative models. Let’s compare occurrences standard data cleaning process time-specific thinning process. Fig. 2. Comparison spatial distribution occurrence records standard thinning processs time-specific thinning process. Left panel shows records standard thinning process. Right panel shows spatial distribution records time-specific thinning process; note records overlap different years.","code":"# Clean duplicates using a raster mask abtc <- tenm::clean_dup_by_date(this_species = abt,                                 by_mask = TRUE,                                 threshold = terra::res(tenm_mask)[1],                                 raster_mask = tenm_mask[1],                                 n_ngbs = 0) # Check number of records head(tidyr::as_tibble(abtc$temporal_df)) #> # A tibble: 6 × 5 #>   decimalLongitude decimalLatitude  year layer_dates layers_path                 #>              <dbl>           <dbl> <int> <date>      <chr>                       #> 1            -97.3            18.7  1939 1939-01-01  /Library/Frameworks/R.fram… #> 2            -97.3            18.7  1940 1940-01-01  /Library/Frameworks/R.fram… #> 3            -97.0            19.6  1941 1941-01-01  /Library/Frameworks/R.fram… #> 4            -97.3            18.7  1941 1941-01-01  /Library/Frameworks/R.fram… #> 5            -97.3            18.7  1950 1950-01-01  /Library/Frameworks/R.fram… #> 6            -97.1            19.7  1950 1950-01-01  /Library/Frameworks/R.fram… nrow(abtc$temporal_df) #> [1] 40 colors1 <- hcl.colors(length(unique(ab_1$year))) par(mar=c(4,4,2,2),mfrow=c(1,2)) plot(ab_1$decimalLongitude, ab_1$decimalLatitude,      col=colors1,pch=19, cex=0.75,      xlab=\"Longitude\",ylab=\"Latitude\",xlim=c(-98.35,-96.7)) legend(\"bottomleft\",legend = sort(unique(ab_1$year))[1:10],        cex=0.85,pt.cex = 1,bty = \"n\",        pch=19,col =colors1[1:10]) colors2 <- hcl.colors(length(unique(abtc$temporal_df$year))) plot(abtc$temporal_df$decimalLongitude, abtc$temporal_df$decimalLatitude,      col=colors2,pch=19, cex=0.75,      xlab=\"Longitude\",ylab=\"Latitude\",xlim=c(-98.35,-96.7)) legend(\"bottomleft\",legend = sort(unique(abtc$temporal_df$year))[1:16],        cex=0.85,pt.cex = 1,bty = \"n\",        pch=19,col =colors2[1:16]) legend(\"bottomright\",        legend = sort(unique(abronia$year))[17:length(unique(abtc$temporal_df$year))],        cex=0.85,pt.cex = 1,bty = \"n\",        pch=19,col =colors2[17:length(unique(abtc$temporal_df$year))])"},{"path":"/articles/tenm-vignette.html","id":"time-specific-environmental-data-extraction","dir":"Articles","previous_headings":"Time-specific niche modeling","what":"Time-specific environmental data extraction","title":"Introduction to tenm package","text":"spatial thinning process, need extract environmental information occurrence points. tenm package using function tenm::ex_by_date. function can run parallel evoking functions future package. parametrize function, need specify “sp.temporal.modeling” object (obtained using function tenm::sp_temporal_data one tenm::clean_dup_by_date) proportion occurrences used training dataset. tenm package uses random partition divide database train test datasets. Now, explore slot “temporal_df”. 40 rows columns time-specific environmental values additional column indicating observation used train test.","code":"future::plan(\"multisession\",workers=2) abex <- tenm::ex_by_date(this_species = abtc,                          train_prop=0.7) future::plan(\"sequential\") head(abex$temporal_df) #> # A tibble: 6 × 26 #>   decimalLongitude decimalLatitude  year layer_dates layers_path   cell_ids_year #>              <dbl>           <dbl> <int> <date>      <chr>                 <dbl> #> 1            -97.3            18.7  1939 1939-01-01  /Library/Fra…           272 #> 2            -97.3            18.7  1940 1940-01-01  /Library/Fra…           272 #> 3            -97.0            19.6  1941 1941-01-01  /Library/Fra…           173 #> 4            -97.3            18.7  1941 1941-01-01  /Library/Fra…           271 #> 5            -97.3            18.7  1950 1950-01-01  /Library/Fra…           272 #> 6            -97.1            19.7  1950 1950-01-01  /Library/Fra…           173 #> # ℹ 20 more variables: bio_01 <int>, bio_02 <int>, bio_03 <int>, bio_04 <int>, #> #   bio_05 <int>, bio_06 <int>, bio_07 <int>, bio_08 <int>, bio_09 <int>, #> #   bio_10 <int>, bio_11 <int>, bio_12 <int>, bio_13 <int>, bio_14 <int>, #> #   bio_15 <int>, bio_16 <int>, bio_17 <int>, bio_18 <int>, bio_19 <int>, #> #   trian_test <chr>"},{"path":"/articles/tenm-vignette.html","id":"time-specific-background-generation","dir":"Articles","previous_headings":"Time-specific niche modeling","what":"Time-specific background generation","title":"Introduction to tenm package","text":"tenm package uses environmental background compute ROC partial ROC test estimate prevalence species environmental space (proportion environmental points inside niche model). generate 10,000 environmental background points using calibration area neighborhood 10 pixels around occurrence point (buffer_ngbs parameter). number background points year proportional number occurrences year observation.","code":"future::plan(\"multisession\",workers=2) abbg <- tenm::bg_by_date(this_species = abex,                          buffer_ngbs=10,n_bg=10000) future::plan(\"sequential\") head(abbg$env_bg) #>                                                                                      ID_YEAR #> 1 /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1939 #> 2 /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1939 #> 3 /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1939 #> 4 /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1939 #> 5 /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1939 #> 6 /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/tenm/extdata/bio/1939 #>   decimalLongitude decimalLatitude bio_01 bio_02 bio_03 bio_04 bio_05 bio_06 #> 1        -97.75000        18.91667    155     92     57   2177    223     62 #> 2        -98.25000        18.75000    192    100     60   1990    264     97 #> 3        -98.58333        17.75000    210    104     62   1574    286    118 #> 4        -98.41667        19.41667    134     99     59   2204    205     38 #> 5        -96.58333        17.91667    204     80     53   2221    271    121 #> 6        -98.75000        18.41667    234    105     61   1801    311    139 #>   bio_07 bio_08 bio_09 bio_10 bio_11 bio_12 bio_13 bio_14 bio_15 bio_16 bio_17 #> 1    161    175    136    176    124    550    133      1      1    279      9 #> 2    167    210    177    211    163    690    187      0      1    408      7 #> 3    168    223    192    224    187    616    177      1      1    375      5 #> 4    167    156    103    156    103    613    119      0      1    326      8 #> 5    151    224    199    225    173   2520    619      4      1   1167     39 #> 6    172    248    214    250    208    611    158      0      1    380      3 #>   bio_18 bio_19 #> 1    259     14 #> 2    338      8 #> 3    296      5 #> 4    277      8 #> 5    972    583 #> 6    269      4"},{"path":"/articles/tenm-vignette.html","id":"exporting-time-specific-information-as-samples-with-data-format","dir":"Articles","previous_headings":"Time-specific niche modeling","what":"Exporting time-specific information as Samples With Data format","title":"Introduction to tenm package","text":"Although package uses minimum volume ellipsoids model niche, function export time-specific data Samples Data format table allows users fit algorithms MaxEnt. Let’s see works.","code":"# SWD table for occurrence records occ_swd <- tdf2swd(this_species=abex,sp_name=\"abro_gram\") # SWD table for background data bg_swd <- tdf2swd(this_species=abbg) head(tidyr::as_tibble(occ_swd)) #> # A tibble: 6 × 23 #>   sp_name   decimalLongitude decimalLatitude  year bio_01 bio_02 bio_03 bio_04 #>   <chr>                <dbl>           <dbl> <int>  <int>  <int>  <int>  <int> #> 1 abro_gram            -97.3            18.7  1939    149     84     55   2252 #> 2 abro_gram            -97.3            18.7  1940    154     87     49   2575 #> 3 abro_gram            -97.0            19.6  1941    114     63     44   2693 #> 4 abro_gram            -97.3            18.7  1941    139     82     50   2394 #> 5 abro_gram            -97.3            18.7  1950    155     94     54   2079 #> 6 abro_gram            -97.1            19.7  1950    115     79     51   2278 #> # ℹ 15 more variables: bio_05 <int>, bio_06 <int>, bio_07 <int>, bio_08 <int>, #> #   bio_09 <int>, bio_10 <int>, bio_11 <int>, bio_12 <int>, bio_13 <int>, #> #   bio_14 <int>, bio_15 <int>, bio_16 <int>, bio_17 <int>, bio_18 <int>, #> #   bio_19 <int> head(tidyr::as_tibble(bg_swd)) #> # A tibble: 6 × 23 #>   sp_name    decimalLongitude decimalLatitude  year bio_01 bio_02 bio_03 bio_04 #>   <chr>                 <dbl>           <dbl> <dbl>  <int>  <int>  <int>  <int> #> 1 background            -97.7            18.9  1939    155     92     57   2177 #> 2 background            -98.2            18.8  1939    192    100     60   1990 #> 3 background            -98.6            17.8  1939    210    104     62   1574 #> 4 background            -98.4            19.4  1939    134     99     59   2204 #> 5 background            -96.6            17.9  1939    204     80     53   2221 #> 6 background            -98.7            18.4  1939    234    105     61   1801 #> # ℹ 15 more variables: bio_05 <int>, bio_06 <int>, bio_07 <int>, bio_08 <int>, #> #   bio_09 <int>, bio_10 <int>, bio_11 <int>, bio_12 <int>, bio_13 <int>, #> #   bio_14 <int>, bio_15 <int>, bio_16 <int>, bio_17 <int>, bio_18 <int>, #> #   bio_19 <int>"},{"path":"/articles/tenm-vignette.html","id":"time-specific-model-calibration-and-selection","dir":"Articles","previous_headings":"Time-specific niche modeling","what":"Time-specific model calibration and selection","title":"Introduction to tenm package","text":"final step, calibrate time-specific niche models using minimum volume ellipsoids. achieve , first select environmental variables using function tenm::correlation_finder. function filters variables according correlation threshold, important avoid issues related collinearity. Now, use function tenm::tenm_selection calibrate time-specific niche models. function uses background object (, abbg object) input. parametrize function, need specify omission rate criteria used select models, proportion points included ellipsoid model (ellipsoid_level parameter), names modeling layers (vars2fit parameter), numeric vector indicating number dimensions used build ellipsoid models (vars2fit parameter) logical argument determines whether use partial ROC test , random percent data used bootstrap partial ROC test (RandomPercent parameter), number iterations partial ROC test (NoOfIteration parameter), logical argument specify whether run calibration process parallel number cores used parallel process (parallel parameter). fitted 492 models, 27 passed selection criteria. Let’s explore mod_sel object. five slots. can obtain table results selection process calling mods_table slot.","code":"varcorrs <- tenm::correlation_finder(environmental_data =                                        abex$env_data[,-ncol(abex$env_data)],                                      method = \"spearman\",                                      threshold = 0.8,                                      verbose = FALSE) #> Warning in stats::cor(environmental_data, method = method): the standard #> deviation is zero # Selected variables vars2fit <- varcorrs$descriptors print(vars2fit) #> [1] \"bio_01\" \"bio_02\" \"bio_03\" \"bio_04\" \"bio_07\" \"bio_12\" \"bio_14\" \"bio_15\" #> [9] \"bio_17\" mod_sel <- tenm::tenm_selection(this_species = abbg,                                 omr_criteria =0.1,                                 ellipsoid_level=0.975,                                 vars2fit = vars2fit,                                 nvars_to_fit=c(2,3,4,5,6,7),                                 proc = T,                                 RandomPercent = 50,                                 NoOfIteration=1000,                                 parallel=TRUE,                                 n_cores=4) #> ----------------------------------------------------------------------------------------- #>      **** Starting model selection process **** #> ----------------------------------------------------------------------------------------- #>  #> A total number of 36 models will be created for combinations of 9 variables taken by 2  #>  #> A total number of 84 models will be created for combinations of 9 variables taken by 3  #>  #> A total number of 126 models will be created for combinations of 9 variables taken by 4  #>  #> A total number of 126 models will be created for combinations of 9 variables taken by 5  #>  #> A total number of 84 models will be created for combinations of 9 variables taken by 6  #>  #> A total number of 36 models will be created for combinations of 9 variables taken by 7  #>  #> ----------------------------------------------------------------------------------------- #>   **A total number of 492 models will be tested ** #>  #> ----------------------------------------------------------------------------------------- #> Doing calibration from model  1 to  100 in process  1  #>  #> Doing calibration from model  101 to  200 in process  2  #>  #> Doing calibration from model  201 to  300 in process  3  #>  #> Doing calibration from model  301 to  400 in process  4  #>  #> Doing calibration from model  401 to  492 in process  5  #>  #> Finishing calibration of models  1 to  100  #>  #> Finishing calibration of models  101 to  200  #>  #> Finishing calibration of models  201 to  300  #>  #> Finishing calibration of models  301 to  400  #>  #> Finishing calibration of models  401 to  492  #>  #> Finishing... #>  #> ----------------------------------------------------------------------------------------- #>   244 models passed omr_criteria for train data #>   27 models passed omr_criteria for test data #>   27 models passed omr_criteria for train and test data names(mod_sel) #> [1] \"temporal_df\"  \"sp_date_var\"  \"lon_lat_vars\" \"layers_ext\"   \"env_bg\"       #> [6] \"mods_table\" head(mod_sel$mods_table,27) #>                    fitted_vars nvars om_rate_train non_pred_train_ids #> 1  bio_01,bio_02,bio_04,bio_07     4       0.06250              18,31 #> 2  bio_01,bio_02,bio_03,bio_04     4       0.06250              18,31 #> 3  bio_01,bio_03,bio_04,bio_07     4       0.06250              18,31 #> 4  bio_01,bio_04,bio_07,bio_12     4       0.09375           21,28,31 #> 5  bio_01,bio_02,bio_03,bio_07     4       0.03125                 18 #> 6         bio_01,bio_04,bio_07     3       0.06250              18,31 #> 7  bio_01,bio_03,bio_04,bio_12     4       0.09375           18,21,28 #> 8         bio_01,bio_03,bio_04     3       0.06250               3,18 #> 9                bio_01,bio_04     2       0.03125                 18 #> 10        bio_01,bio_02,bio_04     3       0.09375            3,18,31 #> 11               bio_01,bio_02     2       0.09375            3,18,31 #> 12               bio_01,bio_07     2       0.06250              18,31 #> 13               bio_01,bio_03     2       0.06250               3,18 #> 14        bio_01,bio_03,bio_12     3       0.06250               3,18 #> 15 bio_02,bio_04,bio_07,bio_12     4       0.06250              21,28 #> 16 bio_02,bio_03,bio_07,bio_12     4       0.06250              21,28 #> 17 bio_02,bio_03,bio_04,bio_12     4       0.06250              21,28 #> 18        bio_01,bio_07,bio_12     3       0.06250              18,31 #> 19 bio_02,bio_03,bio_04,bio_07     4       0.03125                  3 #> 20        bio_04,bio_07,bio_12     3       0.06250              21,28 #> 21               bio_04,bio_07     2       0.03125                  3 #> 22               bio_04,bio_12     2       0.06250              10,21 #> 23               bio_03,bio_04     2       0.03125                  3 #> 24        bio_02,bio_07,bio_12     3       0.09375            3,21,28 #> 25        bio_02,bio_03,bio_12     3       0.09375            3,21,28 #> 26        bio_03,bio_07,bio_12     3       0.09375            3,21,28 #> 27               bio_07,bio_12     2       0.03125                 28 #>    om_rate_test non_pred_test_ids bg_prevalence pval_bin pval_proc #> 1             0                       0.4706024        0         0 #> 2             0                       0.4554527        0         0 #> 3             0                       0.4639894        0         0 #> 4             0                       0.4627871        0         0 #> 5             0                       0.4088013        0         0 #> 6             0                       0.4648311        0         0 #> 7             0                       0.4625466        0         0 #> 8             0                       0.4655525        0         0 #> 9             0                       0.4835878        0         0 #> 10            0                       0.4768546        0         0 #> 11            0                       0.4823855        0         0 #> 12            0                       0.5001804        0         0 #> 13            0                       0.4995792        0         0 #> 14            0                       0.4844295        0         0 #> 15            0                       0.6570879        0         0 #> 16            0                       0.5706385        0         0 #> 17            0                       0.6412168        0         0 #> 18            0                       0.4962126        0         0 #> 19            0                       0.6100757        0         0 #> 20            0                       0.6847421        0         0 #> 21            0                       0.7537574        0         0 #> 22            0                       0.7220151        0         0 #> 23            0                       0.7382470        0         0 #> 24            0                       0.6783696        0         0 #> 25            0                       0.6816160        0         0 #> 26            0                       0.7000120        0         0 #> 27            0                       0.7766021        0         0 #>    env_bg_paucratio env_bg_auc mean_omr_train_test rank_by_omr_train_test #> 1          1.520879  0.7985825            0.031250                     11 #> 2          1.505433  0.7996963            0.031250                      7 #> 3          1.500235  0.7974813            0.031250                      8 #> 4          1.467522  0.7828762            0.046875                     22 #> 5          1.465208  0.7519787            0.015625                      1 #> 6          1.462961  0.7858313            0.031250                      9 #> 7          1.448599  0.7549675            0.046875                     21 #> 8          1.431383  0.7479400            0.031250                     10 #> 9          1.429927  0.7371300            0.015625                      2 #> 10         1.424194  0.7454525            0.046875                     23 #> 11         1.421552  0.7490962            0.046875                     24 #> 12         1.409348  0.7345675            0.031250                     15 #> 13         1.409145  0.7019625            0.031250                     14 #> 14         1.382147  0.6807450            0.031250                     12 #> 15         1.379969  0.7115000            0.031250                     18 #> 16         1.374939  0.6537675            0.031250                     16 #> 17         1.373252  0.7036712            0.031250                     17 #> 18         1.365017  0.7032725            0.031250                     13 #> 19         1.329613  0.6943437            0.015625                      3 #> 20         1.318842  0.6801412            0.031250                     19 #> 21         1.307749  0.6769513            0.015625                      5 #> 22         1.288655  0.6388300            0.031250                     20 #> 23         1.267623  0.6472100            0.015625                      4 #> 24         1.261588  0.6146950            0.046875                     25 #> 25         1.253496  0.5970800            0.046875                     26 #> 26         1.240056  0.5891425            0.046875                     27 #> 27         1.193064  0.5648687            0.015625                      6 #>    rank_omr_aucratio #> 1                  1 #> 2                  2 #> 3                  3 #> 4                  4 #> 5                  5 #> 6                  6 #> 7                  7 #> 8                  8 #> 9                  9 #> 10                10 #> 11                11 #> 12                12 #> 13                13 #> 14                14 #> 15                15 #> 16                16 #> 17                17 #> 18                18 #> 19                19 #> 20                20 #> 21                21 #> 22                22 #> 23                23 #> 24                24 #> 25                25 #> 26                26 #> 27                27"},{"path":"/articles/tenm-vignette.html","id":"projecting-time-specific-niche-models","dir":"Articles","previous_headings":"Time-specific niche modeling","what":"Projecting time-specific niche models","title":"Introduction to tenm package","text":"project models, use predict method. , project one selected models using environmental layers 2016. Also, project using layers period comprehends 1970-2000. Fig. 3. selected niche model projected using environmental layers 2016. Now period comprehends 1970-2000. Fig. 4. selected niche model projected using environmental layers 1970-2000. Lets see predictions geographic space Fig. 5. Geographic projection selected model. Left panel, projection using environmental layers 2016. Right panel, projection using environmental layers 1970-2000","code":"env_layers_2016 <- list.dirs(tempora_layers_dir,                      recursive = FALSE)[32] suit_2016 <- predict(mod_sel,                      model_variables = c(\"bio_01\",\"bio_03\",\"bio_12\"),                      layers_path =env_layers_2016 ,                      layers_ext = \".tif$\") #>   |                                                                              |                                                                      |   0%  |                                                                              |======================================================================| 100% layers_70_00_dir <- system.file(\"extdata/bio_1970_2000\",package = \"tenm\") suit_1970_2000 <- predict(mod_sel,                           model_variables = c(\"bio_01\",\"bio_03\",\"bio_12\"),                           layers_path = layers_70_00_dir,                           layers_ext = \".tif$\") #>   |                                                                              |                                                                      |   0%  |                                                                              |======================================================================| 100% par(mfrow=c(1,2), mar=c(4,4,2,2)) terra::plot(suit_2016, main=\"Prediction for 2016\") terra::plot(suit_1970_2000, main=\"Prediction for 1970-2000\")"},{"path":"/articles/tenm-vignette.html","id":"comparing-time-specific-niche-model-vs--standard-niche-model","dir":"Articles","previous_headings":"Time-specific niche modeling","what":"Comparing time-specific niche model vs. standard niche model","title":"Introduction to tenm package","text":"following lines code show differences time-specific niche model standard niche model. Fig. 6. Time-specific niche model vs. standard niche model. Pink ellipsoid represents time-specific niche model. Green ellipsoid represents ellipsoid model fitted using standard approach. Note ellipsoids differ size shape. standard approach (green ellipsoid), can see sub-estimation environmental values intrinsic growth rate might positive.","code":"layers_70_00_dir <- system.file(\"extdata/bio_1970_2000\",package = \"tenm\") layers_70_00_path <- list.files(layers_70_00_dir,                                 pattern = \".tif$\",full.names = TRUE) # Extract environmental information  elayers_70_00 <- terra::rast(layers_70_00_path) e_trad <- terra::extract(elayers_70_00,                          ab_1[,c(\"decimalLongitude\",\"decimalLatitude\")]) rgl::view3d(theta = 0, phi = -60,fov=120, zoom = 0.7)  tenm::plot_ellipsoid(x = e_trad$bio_01,y=e_trad$bio_03,z=e_trad$bio_12,                      col = \"#1B9E77\",                      xlab = \"Bio 1\",                      ylab = \"Bio 3\",                      zlab = \"Bio 12\",) tenm::plot_ellipsoid(x = abbg$temporal_df$bio_01,                      y = abbg$temporal_df$bio_03,                      z = abbg$temporal_df$bio_12,                      col = \"#E7298A\",                      add = TRUE)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Luis Osorio-Olvera. Author, maintainer. Miguel Hernández. Author. Rusby G. Contreras-Díaz. Author. Xavier Chiappa-Carrara. Author. Fernanda Rosales-Ramos. Author. Mariana Munguía-Carrara. Author. Oliver López-Corona. Author. Townsend Peterson. Contributor. Jorge Soberón. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Osorio-Olvera L, Hernández M, Contreras-Díaz R, Chiappa-Carrara X, Rosales-Ramos F, Munguía-Carrara M, López-Corona O (2024). tenm: Temporal Ecological Niche Models. R package version 0.5.0, https://luismurao.github.io/tenm/.","code":"@Manual{,   title = {tenm: Temporal Ecological Niche Models},   author = {Luis Osorio-Olvera and Miguel Hernández and Rusby G. Contreras-Díaz and Xavier Chiappa-Carrara and Fernanda Rosales-Ramos and Mariana Munguía-Carrara and Oliver López-Corona},   year = {2024},   note = {R package version 0.5.0},   url = {https://luismurao.github.io/tenm/}, }"},{"path":"/index.html","id":"tenm-","dir":"","previous_headings":"","what":"Temporal Ecological Niche Models","title":"Temporal Ecological Niche Models","text":"R package set functions calibrate time-specific ecological niche models. Time-specific niche modeling (TENM) novel approach allows calibrating niche models high temporal resolution spatial information, aims reduce niche estimation biases. Although TENM improve distribution estimates, works used . goal tenm R package provide methods functions calibrate time-specific niche models, letting users execute strict calibration selection process niche models based ellipsoids, well functions project potential distribution present global change scenarios.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Temporal Ecological Niche Models","text":"can install development version tenm GitHub :","code":"if (!require('devtools')) install.packages('devtools') devtools::install_github(\"luismurao/tenm\") # If you want to build vignette, install pandoc before and then devtools::install_github('luismurao/tenm',build_vignettes=TRUE)"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Temporal Ecological Niche Models","text":"start simple example show basic functions package. work dataset Abronia graminea, endemic lizard Mexican Sierra Madre Oriental. First, load tenm R package. Now load abronia dataset, contains geographical information presence Abronia graminea area distribution. dataset also information year observation GBIF doi. plot geographic information see Abronia graminea distributed. Fig. 1. Occurrence points Abronia graminea. Colors represent year observation. Note occurrences overlapped belong different years.","code":"library(tenm) ## basic example code data(\"abronia\") head(abronia) #>            species decimalLongitude decimalLatitude year #> 1 Abronia graminea        -98.17773        19.96523 2014 #> 2 Abronia graminea        -98.13753        19.87006 2014 #> 3 Abronia graminea        -98.07042        19.89668 2014 #> 4 Abronia graminea        -98.13003        19.86861 2014 #> 5 Abronia graminea        -98.14894        19.84450 2014 #> 6 Abronia graminea        -98.15909        19.86878 2014 #>                             gbif_doi #> 1 https://doi.org/10.15468/dl.teyjm9 #> 2 https://doi.org/10.15468/dl.teyjm9 #> 3 https://doi.org/10.15468/dl.teyjm9 #> 4 https://doi.org/10.15468/dl.teyjm9 #> 5 https://doi.org/10.15468/dl.teyjm9 #> 6 https://doi.org/10.15468/dl.teyjm9 dim(abronia) #> [1] 106   5 colorss <- hcl.colors(length(unique(abronia$year))) par(mar=c(4,4,2,2)) plot(abronia$decimalLongitude, abronia$decimalLatitude,      col=colorss,pch=19, cex=0.75,      xlab=\"Longitude\",ylab=\"Latitude\",xlim=c(-98.35,-96.7)) legend(\"bottomleft\",legend = sort(unique(abronia$year))[1:20],        cex=0.85,pt.cex = 1,bty = \"n\",        pch=19,col =colorss[1:20]) legend(\"bottomright\",        legend = sort(unique(abronia$year))[21:length(unique(abronia$year))],        cex=0.85,pt.cex = 1,bty = \"n\",        pch=19,col =colorss[21:length(unique(abronia$year))])"},{"path":"/index.html","id":"standard-data-thinning","dir":"","previous_headings":"Example","what":"Standard data thinning","title":"Temporal Ecological Niche Models","text":"relevant step curating occurrence data eliminate duplicated geographical information, depends several factors, including spatial autocorrelation spatial resolution modeling layers. Let’s see happens eliminate duplicated information defined spatial resolution modeling layers. , use tenm::clean_dup function tenm R package. applying spatial thinning, obtained ten observations 106 occurrences. lost lot information!!! function tenm::clean_dup method clean duplicated records according raster mask layer. avoids losing records might occur different pixels fall within distance used threshold cleaning. recovered 6 records, bad! hand, account fact occurrences come different years. tenm package designed deal occurrences coming different periods long user environmental layers matching years occurrence observations.","code":"# Load a modeling layer  tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") tenm_mask <- terra::rast(file.path(tempora_layers_dir,\"1939/bio_01.tif\"))  ab_1 <- tenm::clean_dup(data =abronia,                         longitude = \"decimalLongitude\",                         latitude = \"decimalLatitude\",                         threshold = terra::res(tenm_mask),                         by_mask = FALSE,                         raster_mask = NULL) tidyr::as_tibble(ab_1) #> # A tibble: 10 × 5 #>    species          decimalLongitude decimalLatitude  year gbif_doi              #>    <chr>                       <dbl>           <dbl> <int> <chr>                 #>  1 Abronia graminea            -97.5            19.5  1995 https://doi.org/10.1… #>  2 Abronia graminea            -97.0            18.2  1993 https://doi.org/10.1… #>  3 Abronia graminea            -98.0            19.8  1980 https://doi.org/10.1… #>  4 Abronia graminea            -97.7            19.6  2012 https://doi.org/10.1… #>  5 Abronia graminea            -97.9            20.1  2015 https://doi.org/10.1… #>  6 Abronia graminea            -97.4            18.5  1952 https://doi.org/10.1… #>  7 Abronia graminea            -97.1            18.9  1998 https://doi.org/10.1… #>  8 Abronia graminea            -97.3            19.0  1983 https://doi.org/10.1… #>  9 Abronia graminea            -97.3            18.7  1973 https://doi.org/10.1… #> 10 Abronia graminea            -97.0            19.7  1972 https://doi.org/10.1… ab_by_mask <- tenm::clean_dup(data =abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               threshold = terra::res(tenm_mask),                               by_mask = TRUE,                               raster_mask = tenm_mask) tidyr::as_tibble(ab_by_mask) #> # A tibble: 16 × 5 #>    species          decimalLongitude decimalLatitude  year gbif_doi              #>    <chr>                       <dbl>           <dbl> <int> <chr>                 #>  1 Abronia graminea            -98.2            20.0  2014 https://doi.org/10.1… #>  2 Abronia graminea            -98.1            19.9  2014 https://doi.org/10.1… #>  3 Abronia graminea            -98.1            19.8  2014 https://doi.org/10.1… #>  4 Abronia graminea            -97.9            19.9  2014 https://doi.org/10.1… #>  5 Abronia graminea            -97.3            18.7  1963 https://doi.org/10.1… #>  6 Abronia graminea            -97.1            18.3  1996 https://doi.org/10.1… #>  7 Abronia graminea            -97.4            18.8  1941 https://doi.org/10.1… #>  8 Abronia graminea            -97.4            18.7  1988 https://doi.org/10.1… #>  9 Abronia graminea            -97.0            19.6  1991 https://doi.org/10.1… #> 10 Abronia graminea            -97.4            19.1  2002 https://doi.org/10.1… #> 11 Abronia graminea            -97.5            19.5  1995 https://doi.org/10.1… #> 12 Abronia graminea            -97.0            18.2  1993 https://doi.org/10.1… #> 13 Abronia graminea            -97.7            19.6  2012 https://doi.org/10.1… #> 14 Abronia graminea            -97.9            20.1  2015 https://doi.org/10.1… #> 15 Abronia graminea            -97.1            18.9  1998 https://doi.org/10.1… #> 16 Abronia graminea            -97.3            19.0  1983 https://doi.org/10.1…"},{"path":"/index.html","id":"time-specific-niche-modeling","dir":"","previous_headings":"","what":"Time-specific niche modeling","title":"Temporal Ecological Niche Models","text":"Let’s apply functions methods work time-specific niche models. First, load data. Now, indicate path time-specific modeling layers located. explore structure directory contains modeling layers. Note directory contains directories named dates modeling layers. Now, explore dated directories. Note dated directories must environmental information. example, used bioclimatic layers derived CHELSAcruts database.","code":"library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") print(tempora_layers_dir) #> [1] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio\" list.dirs(tempora_layers_dir,recursive = FALSE) #>  [1] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1939\" #>  [2] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1940\" #>  [3] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1941\" #>  [4] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1950\" #>  [5] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1952\" #>  [6] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1963\" #>  [7] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1969\" #>  [8] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1970\" #>  [9] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1971\" #> [10] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1972\" #> [11] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1973\" #> [12] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1974\" #> [13] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1976\" #> [14] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1977\" #> [15] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1980\" #> [16] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1981\" #> [17] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1982\" #> [18] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1983\" #> [19] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1988\" #> [20] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1991\" #> [21] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1993\" #> [22] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1994\" #> [23] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1995\" #> [24] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1996\" #> [25] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1998\" #> [26] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/2002\" #> [27] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/2008\" #> [28] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/2011\" #> [29] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/2012\" #> [30] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/2014\" #> [31] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/2015\" #> [32] \"/home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/2016\" # Directory for year 1939 list.files(list.dirs(tempora_layers_dir,                      recursive = FALSE)[1],            pattern = \".tif$\") #>  [1] \"bio_01.tif\" \"bio_02.tif\" \"bio_03.tif\" \"bio_04.tif\" \"bio_05.tif\" #>  [6] \"bio_06.tif\" \"bio_07.tif\" \"bio_08.tif\" \"bio_09.tif\" \"bio_10.tif\" #> [11] \"bio_11.tif\" \"bio_12.tif\" \"bio_13.tif\" \"bio_14.tif\" \"bio_15.tif\" #> [16] \"bio_16.tif\" \"bio_17.tif\" \"bio_18.tif\" \"bio_19.tif\" # Directory for year 1972 list.files(list.dirs(tempora_layers_dir,                      recursive = FALSE)[10],            pattern = \".tif$\") #>  [1] \"bio_01.tif\" \"bio_02.tif\" \"bio_03.tif\" \"bio_04.tif\" \"bio_05.tif\" #>  [6] \"bio_06.tif\" \"bio_07.tif\" \"bio_08.tif\" \"bio_09.tif\" \"bio_10.tif\" #> [11] \"bio_11.tif\" \"bio_12.tif\" \"bio_13.tif\" \"bio_14.tif\" \"bio_15.tif\" #> [16] \"bio_16.tif\" \"bio_17.tif\" \"bio_18.tif\" \"bio_19.tif\" # Directory for year 2014 list.files(list.dirs(tempora_layers_dir,                      recursive = FALSE)[30],            pattern = \".tif$\") #>  [1] \"bio_01.tif\" \"bio_02.tif\" \"bio_03.tif\" \"bio_04.tif\" \"bio_05.tif\" #>  [6] \"bio_06.tif\" \"bio_07.tif\" \"bio_08.tif\" \"bio_09.tif\" \"bio_10.tif\" #> [11] \"bio_11.tif\" \"bio_12.tif\" \"bio_13.tif\" \"bio_14.tif\" \"bio_15.tif\" #> [16] \"bio_16.tif\" \"bio_17.tif\" \"bio_18.tif\" \"bio_19.tif\""},{"path":"/index.html","id":"the-sptemporalmodeling-object","dir":"","previous_headings":"Time-specific niche modeling","what":"The sp.temporal.modeling object","title":"Temporal Ecological Niche Models","text":"following lines code, use special function tenm R package allow us work time-specific data. function tenm::sp_temporal_data parameterized occurrence dated database. parameterize function, need specify name columns contain longitude latitude data, column represents year observation, format dates (years, see help function date formats), layers date format, directory contains time-specific modeling layers raster layer extension. object abt special class called sp.temporal.modeling deals time-specific information. following line code, explore slots abt object. abt object four slots: temporal data.frame (“temporal_df”), character vector indicating date variable (“sp_date_var”), character vector showing names longitude latitude data (“lon_lat_vars”) another character vector extension modeling layers. Now, explore temporal_df slot, data.frame five columns: longitude, latitude, time variable (year), layer dates, layers path (path temporal niche layers located).","code":"data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") # See the names of the slots names(abt) #> [1] \"temporal_df\"  \"sp_date_var\"  \"lon_lat_vars\" \"layers_ext\" # See the temporal data.frame tidyr::as_tibble(head(abt$temporal_df)) #> # A tibble: 6 × 5 #>   decimalLongitude decimalLatitude  year layer_dates layers_path                 #>              <dbl>           <dbl> <int> <date>      <chr>                       #> 1            -98.2            20.0  2014 2014-01-01  /home/luis/R/x86_64-pc-lin… #> 2            -98.1            19.9  2014 2014-01-01  /home/luis/R/x86_64-pc-lin… #> 3            -98.1            19.9  2014 2014-01-01  /home/luis/R/x86_64-pc-lin… #> 4            -98.1            19.9  2014 2014-01-01  /home/luis/R/x86_64-pc-lin… #> 5            -98.1            19.8  2014 2014-01-01  /home/luis/R/x86_64-pc-lin… #> 6            -98.2            19.9  2014 2014-01-01  /home/luis/R/x86_64-pc-lin…"},{"path":"/index.html","id":"time-specific-spatial-data-thinning","dir":"","previous_headings":"Time-specific niche modeling","what":"Time-specific spatial data thinning","title":"Temporal Ecological Niche Models","text":"first step, curate time-specific database using function tenm::clean_dup_by_date. function parametrized tenm::clean_dup function difference thins data considering time variable (occurrences might spatially duplicated belong dates, time-specific context, duplicates). improvement methodology recover lot information. 10 records thinned using standard data cleaning process, now 40 records; 30 observations!!! allow us fit informative models. Let’s compare occurrences standard data cleaning process time-specific thinning process. Fig. 2. Comparison spatial distribution occurrence records standard thinning processs time-specific thinning process. Left panel shows records standard thinning process. Right panel shows spatial distribution records time-specific thinning process; note records overlap different years.","code":"# Clean duplicates using a raster mask abtc <- tenm::clean_dup_by_date(this_species = abt,                                 by_mask = TRUE,                                 threshold = terra::res(tenm_mask)[1],                                 raster_mask = tenm_mask[1],                                 n_ngbs = 0) # Check number of records head(tidyr::as_tibble(abtc$temporal_df)) #> # A tibble: 6 × 5 #>   decimalLongitude decimalLatitude  year layer_dates layers_path                 #>              <dbl>           <dbl> <int> <date>      <chr>                       #> 1            -97.3            18.7  1939 1939-01-01  /home/luis/R/x86_64-pc-lin… #> 2            -97.3            18.7  1940 1940-01-01  /home/luis/R/x86_64-pc-lin… #> 3            -97.0            19.6  1941 1941-01-01  /home/luis/R/x86_64-pc-lin… #> 4            -97.3            18.7  1941 1941-01-01  /home/luis/R/x86_64-pc-lin… #> 5            -97.3            18.7  1950 1950-01-01  /home/luis/R/x86_64-pc-lin… #> 6            -97.1            19.7  1950 1950-01-01  /home/luis/R/x86_64-pc-lin… nrow(abtc$temporal_df) #> [1] 40 colors1 <- hcl.colors(length(unique(ab_1$year))) par(mar=c(4,4,2,2),mfrow=c(1,2)) plot(ab_1$decimalLongitude, ab_1$decimalLatitude,      col=colors1,pch=19, cex=0.75,      xlab=\"Longitude\",ylab=\"Latitude\",xlim=c(-98.35,-96.7)) legend(\"bottomleft\",legend = sort(unique(ab_1$year))[1:10],        cex=0.85,pt.cex = 1,bty = \"n\",        pch=19,col =colors1[1:10]) colors2 <- hcl.colors(length(unique(abtc$temporal_df$year))) plot(abtc$temporal_df$decimalLongitude, abtc$temporal_df$decimalLatitude,      col=colors2,pch=19, cex=0.75,      xlab=\"Longitude\",ylab=\"Latitude\",xlim=c(-98.35,-96.7)) legend(\"bottomleft\",legend = sort(unique(abtc$temporal_df$year))[1:16],        cex=0.85,pt.cex = 1,bty = \"n\",        pch=19,col =colors2[1:16]) legend(\"bottomright\",        legend = sort(unique(abronia$year))[17:length(unique(abtc$temporal_df$year))],        cex=0.85,pt.cex = 1,bty = \"n\",        pch=19,col =colors2[17:length(unique(abtc$temporal_df$year))])"},{"path":"/index.html","id":"time-specific-environmental-data-extraction","dir":"","previous_headings":"Time-specific niche modeling","what":"Time-specific environmental data extraction","title":"Temporal Ecological Niche Models","text":"spatial thinning process, need extract environmental information occurrence points. tenm package using function tenm::ex_by_date. function can run parallel evoking functions future package. parametrize function, need specify “sp.temporal.modeling” object (obtained using function tenm::sp_temporal_data one tenm::clean_dup_by_date) proportion occurrences used training dataset. tenm package uses random partition divide database train test datasets. Now, explore slot “temporal_df”. 40 rows columns time-specific environmental values additional column indicating observation used train test.","code":"future::plan(\"multisession\",workers=2) abex <- tenm::ex_by_date(this_species = abtc,                          train_prop=0.7) future::plan(\"sequential\") head(abex$temporal_df) #> # A tibble: 6 × 26 #>   decimalLongitude decimalLatitude  year layer_dates layers_path   cell_ids_year #>              <dbl>           <dbl> <int> <date>      <chr>                 <dbl> #> 1            -97.3            18.7  1939 1939-01-01  /home/luis/R…           272 #> 2            -97.3            18.7  1940 1940-01-01  /home/luis/R…           272 #> 3            -97.0            19.6  1941 1941-01-01  /home/luis/R…           173 #> 4            -97.3            18.7  1941 1941-01-01  /home/luis/R…           271 #> 5            -97.3            18.7  1950 1950-01-01  /home/luis/R…           272 #> 6            -97.1            19.7  1950 1950-01-01  /home/luis/R…           173 #> # ℹ 20 more variables: bio_01 <int>, bio_02 <int>, bio_03 <int>, bio_04 <int>, #> #   bio_05 <int>, bio_06 <int>, bio_07 <int>, bio_08 <int>, bio_09 <int>, #> #   bio_10 <int>, bio_11 <int>, bio_12 <int>, bio_13 <int>, bio_14 <int>, #> #   bio_15 <int>, bio_16 <int>, bio_17 <int>, bio_18 <int>, bio_19 <int>, #> #   trian_test <chr>"},{"path":"/index.html","id":"time-specific-background-generation","dir":"","previous_headings":"Time-specific niche modeling","what":"Time-specific background generation","title":"Temporal Ecological Niche Models","text":"tenm package uses environmental background compute ROC partial ROC test estimate prevalence species environmental space (proportion environmental points inside niche model). generate 10,000 environmental background points using calibration area neighborhood 10 pixels around occurrence point (buffer_ngbs parameter). number background points year proportional number occurrences year observation.","code":"future::plan(\"multisession\",workers=2) abbg <- tenm::bg_by_date(this_species = abex,                          buffer_ngbs=10,n_bg=10000) future::plan(\"sequential\") head(abbg$env_bg) #>                                                              ID_YEAR #> 1 /home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1939 #> 2 /home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1939 #> 3 /home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1939 #> 4 /home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1939 #> 5 /home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1939 #> 6 /home/luis/R/x86_64-pc-linux-gnu-library/4.4/tenm/extdata/bio/1939 #>   decimalLongitude decimalLatitude bio_01 bio_02 bio_03 bio_04 bio_05 bio_06 #> 1        -97.75000        18.91667    155     92     57   2177    223     62 #> 2        -98.25000        18.75000    192    100     60   1990    264     97 #> 3        -98.58333        17.75000    210    104     62   1574    286    118 #> 4        -98.41667        19.41667    134     99     59   2204    205     38 #> 5        -96.58333        17.91667    204     80     53   2221    271    121 #> 6        -98.75000        18.41667    234    105     61   1801    311    139 #>   bio_07 bio_08 bio_09 bio_10 bio_11 bio_12 bio_13 bio_14 bio_15 bio_16 bio_17 #> 1    161    175    136    176    124    550    133      1      1    279      9 #> 2    167    210    177    211    163    690    187      0      1    408      7 #> 3    168    223    192    224    187    616    177      1      1    375      5 #> 4    167    156    103    156    103    613    119      0      1    326      8 #> 5    151    224    199    225    173   2520    619      4      1   1167     39 #> 6    172    248    214    250    208    611    158      0      1    380      3 #>   bio_18 bio_19 #> 1    259     14 #> 2    338      8 #> 3    296      5 #> 4    277      8 #> 5    972    583 #> 6    269      4"},{"path":"/index.html","id":"exporting-time-specific-information-as-samples-with-data-format","dir":"","previous_headings":"Time-specific niche modeling","what":"Exporting time-specific information as Samples With Data format","title":"Temporal Ecological Niche Models","text":"Although package uses minimum volume ellipsoids model niche, function export time-specific data Samples Data format table allows users fit algorithms MaxEnt. Let’s see works.","code":"# SWD table for occurrence records occ_swd <- tdf2swd(this_species=abex,sp_name=\"abro_gram\") # SWD table for background data bg_swd <- tdf2swd(this_species=abbg) head(tidyr::as_tibble(occ_swd)) #> # A tibble: 6 × 23 #>   sp_name   decimalLongitude decimalLatitude  year bio_01 bio_02 bio_03 bio_04 #>   <chr>                <dbl>           <dbl> <int>  <int>  <int>  <int>  <int> #> 1 abro_gram            -97.3            18.7  1939    149     84     55   2252 #> 2 abro_gram            -97.3            18.7  1940    154     87     49   2575 #> 3 abro_gram            -97.0            19.6  1941    114     63     44   2693 #> 4 abro_gram            -97.3            18.7  1941    139     82     50   2394 #> 5 abro_gram            -97.3            18.7  1950    155     94     54   2079 #> 6 abro_gram            -97.1            19.7  1950    115     79     51   2278 #> # ℹ 15 more variables: bio_05 <int>, bio_06 <int>, bio_07 <int>, bio_08 <int>, #> #   bio_09 <int>, bio_10 <int>, bio_11 <int>, bio_12 <int>, bio_13 <int>, #> #   bio_14 <int>, bio_15 <int>, bio_16 <int>, bio_17 <int>, bio_18 <int>, #> #   bio_19 <int> head(tidyr::as_tibble(bg_swd)) #> # A tibble: 6 × 23 #>   sp_name    decimalLongitude decimalLatitude  year bio_01 bio_02 bio_03 bio_04 #>   <chr>                 <dbl>           <dbl> <dbl>  <int>  <int>  <int>  <int> #> 1 background            -97.7            18.9  1939    155     92     57   2177 #> 2 background            -98.2            18.8  1939    192    100     60   1990 #> 3 background            -98.6            17.8  1939    210    104     62   1574 #> 4 background            -98.4            19.4  1939    134     99     59   2204 #> 5 background            -96.6            17.9  1939    204     80     53   2221 #> 6 background            -98.7            18.4  1939    234    105     61   1801 #> # ℹ 15 more variables: bio_05 <int>, bio_06 <int>, bio_07 <int>, bio_08 <int>, #> #   bio_09 <int>, bio_10 <int>, bio_11 <int>, bio_12 <int>, bio_13 <int>, #> #   bio_14 <int>, bio_15 <int>, bio_16 <int>, bio_17 <int>, bio_18 <int>, #> #   bio_19 <int>"},{"path":"/index.html","id":"time-specific-model-calibration-and-selection","dir":"","previous_headings":"Time-specific niche modeling","what":"Time-specific model calibration and selection","title":"Temporal Ecological Niche Models","text":"final step, calibrate time-specific niche models using minimum volume ellipsoids. achieve , first select environmental variables using function tenm::correlation_finder. function filters variables according correlation threshold, important avoid issues related collinearity. Now, use function tenm::tenm_selection calibrate time-specific niche models. function uses background object (, abbg object) input. parametrize function, need specify omission rate criteria used select models, proportion points included ellipsoid model (ellipsoid_level parameter), names modeling layers (vars2fit parameter), numeric vector indicating number dimensions used build ellipsoid models (vars2fit parameter) logical argument determines whether use partial ROC test , random percent data used bootstrap partial ROC test (RandomPercent parameter), number iterations partial ROC test (NoOfIteration parameter), logical argument specify whether run calibration process parallel number cores used parallel process (parallel parameter). fitted 492 models, 27 passed selection criteria. Let’s explore mod_sel object. five slots. can obtain table results selection process calling mods_table slot.","code":"varcorrs <- tenm::correlation_finder(environmental_data =                                        abex$env_data[,-ncol(abex$env_data)],                                      method = \"spearman\",                                      threshold = 0.8,                                      verbose = FALSE) #> Warning in stats::cor(environmental_data, method = method): La desviación #> estándar es cero # Selected variables vars2fit <- varcorrs$descriptors print(vars2fit) #> [1] \"bio_01\" \"bio_02\" \"bio_03\" \"bio_04\" \"bio_07\" \"bio_12\" \"bio_14\" \"bio_15\" #> [9] \"bio_17\" mod_sel <- tenm::tenm_selection(this_species = abbg,                                 omr_criteria =0.1,                                 ellipsoid_level=0.975,                                 vars2fit = vars2fit,                                 nvars_to_fit=c(2,3,4,5,6,7),                                 proc = T,                                 RandomPercent = 50,                                 NoOfIteration=1000,                                 parallel=TRUE,                                 n_cores=4) #> ------------------------------------------------------------------- #>      **** Starting model selection process **** #> ------------------------------------------------------------------- #>  #> A total number of 36 models will be created for combinations of 9 variables taken by 2  #>  #> A total number of 84 models will be created for combinations of 9 variables taken by 3  #>  #> A total number of 126 models will be created for combinations of 9 variables taken by 4  #>  #> A total number of 126 models will be created for combinations of 9 variables taken by 5  #>  #> A total number of 84 models will be created for combinations of 9 variables taken by 6  #>  #> A total number of 36 models will be created for combinations of 9 variables taken by 7  #>  #> ------------------------------------------------------------------- #>   **A total number of 492 models will be tested ** #>  #> ------------------------------------------------------------------- #> Doing calibration from model  1 to  100 in process  1  #>  #> Doing calibration from model  101 to  200 in process  2  #>  #> Doing calibration from model  201 to  300 in process  3  #>  #> Doing calibration from model  301 to  400 in process  4  #>  #> Doing calibration from model  401 to  492 in process  5  #>  #> Finishing calibration of models  1 to  100  #>  #> Finishing calibration of models  101 to  200  #>  #> Finishing calibration of models  201 to  300  #>  #> Finishing calibration of models  301 to  400  #>  #> Finishing calibration of models  401 to  492  #>  #> Finishing... #>  #> ------------------------------------------------------------------- #>   244 models passed omr_criteria for train data #>   27 models passed omr_criteria for test data #>   27 models passed omr_criteria for train and test data names(mod_sel) #> [1] \"temporal_df\"  \"sp_date_var\"  \"lon_lat_vars\" \"layers_ext\"   \"env_bg\"       #> [6] \"mods_table\" head(mod_sel$mods_table,27) #>                    fitted_vars nvars om_rate_train non_pred_train_ids #> 1  bio_01,bio_02,bio_04,bio_07     4       0.06250              18,31 #> 2  bio_01,bio_02,bio_03,bio_04     4       0.06250              18,31 #> 3  bio_01,bio_03,bio_04,bio_07     4       0.06250              18,31 #> 4  bio_01,bio_04,bio_07,bio_12     4       0.09375           21,28,31 #> 5  bio_01,bio_02,bio_03,bio_07     4       0.03125                 18 #> 6         bio_01,bio_04,bio_07     3       0.06250              18,31 #> 7  bio_01,bio_03,bio_04,bio_12     4       0.09375           18,21,28 #> 8         bio_01,bio_03,bio_04     3       0.06250               3,18 #> 9                bio_01,bio_04     2       0.03125                 18 #> 10        bio_01,bio_02,bio_04     3       0.09375            3,18,31 #> 11               bio_01,bio_07     2       0.06250              18,31 #> 12               bio_01,bio_03     2       0.06250               3,18 #> 13               bio_01,bio_02     2       0.09375            3,18,31 #> 14        bio_01,bio_03,bio_12     3       0.06250               3,18 #> 15 bio_02,bio_04,bio_07,bio_12     4       0.06250              21,28 #> 16 bio_02,bio_03,bio_07,bio_12     4       0.06250              21,28 #> 17 bio_02,bio_03,bio_04,bio_12     4       0.06250              21,28 #> 18        bio_01,bio_07,bio_12     3       0.06250              18,31 #> 19 bio_02,bio_03,bio_04,bio_07     4       0.03125                  3 #> 20               bio_04,bio_07     2       0.03125                  3 #> 21        bio_04,bio_07,bio_12     3       0.06250              21,28 #> 22               bio_04,bio_12     2       0.06250              10,21 #> 23               bio_03,bio_04     2       0.03125                  3 #> 24        bio_02,bio_07,bio_12     3       0.09375            3,21,28 #> 25        bio_02,bio_03,bio_12     3       0.09375            3,21,28 #> 26        bio_03,bio_07,bio_12     3       0.09375            3,21,28 #> 27               bio_07,bio_12     2       0.03125                 28 #>    om_rate_test non_pred_test_ids bg_prevalence pval_bin pval_proc #> 1             0                       0.4706024        0         0 #> 2             0                       0.4554527        0         0 #> 3             0                       0.4639894        0         0 #> 4             0                       0.4627871        0         0 #> 5             0                       0.4088013        0         0 #> 6             0                       0.4648311        0         0 #> 7             0                       0.4625466        0         0 #> 8             0                       0.4655525        0         0 #> 9             0                       0.4835878        0         0 #> 10            0                       0.4768546        0         0 #> 11            0                       0.5001804        0         0 #> 12            0                       0.4995792        0         0 #> 13            0                       0.4823855        0         0 #> 14            0                       0.4844295        0         0 #> 15            0                       0.6570879        0         0 #> 16            0                       0.5706385        0         0 #> 17            0                       0.6412168        0         0 #> 18            0                       0.4962126        0         0 #> 19            0                       0.6100757        0         0 #> 20            0                       0.7537574        0         0 #> 21            0                       0.6847421        0         0 #> 22            0                       0.7220151        0         0 #> 23            0                       0.7382470        0         0 #> 24            0                       0.6783696        0         0 #> 25            0                       0.6816160        0         0 #> 26            0                       0.7000120        0         0 #> 27            0                       0.7766021        0         0 #>    env_bg_paucratio env_bg_auc mean_omr_train_test rank_by_omr_train_test #> 1          1.520879  0.7985825            0.031250                     11 #> 2          1.505433  0.7996963            0.031250                      7 #> 3          1.500235  0.7974812            0.031250                      8 #> 4          1.467522  0.7828762            0.046875                     22 #> 5          1.465208  0.7519788            0.015625                      1 #> 6          1.462961  0.7858312            0.031250                      9 #> 7          1.448599  0.7549675            0.046875                     21 #> 8          1.431383  0.7479400            0.031250                     10 #> 9          1.429927  0.7371300            0.015625                      2 #> 10         1.424194  0.7454525            0.046875                     23 #> 11         1.409348  0.7345675            0.031250                     15 #> 12         1.409145  0.7019625            0.031250                     14 #> 13         1.398036  0.7285350            0.046875                     24 #> 14         1.382147  0.6807450            0.031250                     12 #> 15         1.379969  0.7115000            0.031250                     18 #> 16         1.374939  0.6537675            0.031250                     16 #> 17         1.373252  0.7036713            0.031250                     17 #> 18         1.365017  0.7032725            0.031250                     13 #> 19         1.329613  0.6943437            0.015625                      3 #> 20         1.307749  0.6769513            0.015625                      5 #> 21         1.303573  0.6712913            0.031250                     19 #> 22         1.288655  0.6388300            0.031250                     20 #> 23         1.267623  0.6472100            0.015625                      4 #> 24         1.261588  0.6146950            0.046875                     25 #> 25         1.253496  0.5970800            0.046875                     26 #> 26         1.240056  0.5891425            0.046875                     27 #> 27         1.193064  0.5648688            0.015625                      6 #>    rank_omr_aucratio #> 1                  1 #> 2                  2 #> 3                  3 #> 4                  4 #> 5                  5 #> 6                  6 #> 7                  7 #> 8                  8 #> 9                  9 #> 10                10 #> 11                11 #> 12                12 #> 13                13 #> 14                14 #> 15                15 #> 16                16 #> 17                17 #> 18                18 #> 19                19 #> 20                20 #> 21                21 #> 22                22 #> 23                23 #> 24                24 #> 25                25 #> 26                26 #> 27                27"},{"path":"/index.html","id":"projecting-time-specific-niche-models","dir":"","previous_headings":"Time-specific niche modeling","what":"Projecting time-specific niche models","title":"Temporal Ecological Niche Models","text":"project models, use predict method. , project one selected models using environmental layers 2016. Also, project using layers period comprehends 1970-2000. Fig. 3. selected niche model projected using environmental layers 2016. Now period comprehends 1970-2000. Fig. 4. selected niche model projected using environmental layers 1970-2000. Lets see predictions geographic space Fig. 5. Geographic projection selected model. Left panel, projection using environmental layers 2016. Right panel, projection using environmental layers 1970-2000","code":"env_layers_2016 <- list.dirs(tempora_layers_dir,                      recursive = FALSE)[32] suit_2016 <- predict(mod_sel,                      model_variables = c(\"bio_01\",\"bio_03\",\"bio_12\"),                      layers_path =env_layers_2016 ,                      layers_ext = \".tif$\") #>   |                                                                              |                                                                      |   0%  |                                                                              |======================================================================| 100% layers_70_00_dir <- system.file(\"extdata/bio_1970_2000\",package = \"tenm\") suit_1970_2000 <- predict(mod_sel,                           model_variables = c(\"bio_01\",\"bio_03\",\"bio_12\"),                           layers_path = layers_70_00_dir,                           layers_ext = \".tif$\") #>   |                                                                              |                                                                      |   0%  |                                                                              |======================================================================| 100% par(mfrow=c(1,2), mar=c(4,4,2,2)) terra::plot(suit_2016, main=\"Prediction for 2016\") terra::plot(suit_1970_2000, main=\"Prediction for 1970-2000\")"},{"path":"/index.html","id":"comparing-time-specific-niche-model-vs-standard-niche-model","dir":"","previous_headings":"Time-specific niche modeling","what":"Comparing time-specific niche model vs. standard niche model","title":"Temporal Ecological Niche Models","text":"following lines code show differences time-specific niche model standard niche model. Fig. 6. Time-specific niche model vs. standard niche model. Pink ellipsoid represents time-specific niche model. Green ellipsoid represents ellipsoid model fitted using standard approach. Note ellipsoids differ size shape. standard approach (green ellipsoid), can see sub-estimation environmental values intrinsic growth rate might positive.","code":"layers_70_00_dir <- system.file(\"extdata/bio_1970_2000\",package = \"tenm\") layers_70_00_path <- list.files(layers_70_00_dir,                                 pattern = \".tif$\",full.names = TRUE) # Extract environmental information  elayers_70_00 <- terra::rast(layers_70_00_path) e_trad <- terra::extract(elayers_70_00,                          ab_1[,c(\"decimalLongitude\",\"decimalLatitude\")]) rgl::view3d(theta = 0, phi = -60,fov=120, zoom = 0.7)  tenm::plot_ellipsoid(x = e_trad$bio_01,y=e_trad$bio_03,z=e_trad$bio_12,                      col = \"#1B9E77\",                      xlab = \"Bio 1\",                      ylab = \"Bio 3\",                      zlab = \"Bio 12\",) tenm::plot_ellipsoid(x = abbg$temporal_df$bio_01,                      y = abbg$temporal_df$bio_03,                      z = abbg$temporal_df$bio_12,                      col = \"#E7298A\",                      add = TRUE)"},{"path":"/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Temporal Ecological Niche Models","text":"CONACYT Ciencia de Frontera CF-2023--1156. Laboratorio Nacional Conahcyt de Biología del Cambio Climático, México. PAPIIT-UNAM IA202824 PAPIIT-UNAM IA203922. RGCD thanks Universidad Nacional Autónoma de México (Dirección General de Asuntos del Personal Académico, DGAPA-UNAM, México) postdoctoral scholarship.","code":""},{"path":"/reference/abronia.html","id":null,"dir":"Reference","previous_headings":"","what":"Occurrence records of Abronia graminea — abronia","title":"Occurrence records of Abronia graminea — abronia","text":"dataset containing occurrence records Abronia graminea. data downloaded GBIF (GBIF, 2022).","code":""},{"path":"/reference/abronia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Occurrence records of Abronia graminea — abronia","text":"","code":"abronia"},{"path":"/reference/abronia.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Occurrence records of Abronia graminea — abronia","text":"data frame 106 rows 5 variables: species Scientific name species decimalLongitude Longitude decimalLatitude Latitude year Observation year gbif_doi DOI id citing dataset","code":""},{"path":"/reference/abronia.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Occurrence records of Abronia graminea — abronia","text":"GBIF.org (22 February 2022) GBIF Occurrence Download doi:10.15468/dl.teyjm9","code":""},{"path":"/reference/bg_by_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to obtain environmental background organized by date — bg_by_date","title":"Function to obtain environmental background organized by date — bg_by_date","text":"Function retrieve background data occurrence records. background data organized function dated environmental data","code":""},{"path":"/reference/bg_by_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to obtain environmental background organized by date — bg_by_date","text":"","code":"bg_by_date(   this_species,   buffer_ngbs = NULL,   buffer_distance = 1000,   n_bg = 50000,   process_ngbs_by = 100 )"},{"path":"/reference/bg_by_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to obtain environmental background organized by date — bg_by_date","text":"this_species Species Temporal Environmental Data (sp.temporal.env) object ex_by_date. buffer_ngbs Number pixel neighbors used build buffer. buffer_distance Distance used create buffer background data taken. n_bg Number background points. process_ngbs_by Numeric. Estimates neighbor cells x cells. memory management.","code":""},{"path":"/reference/bg_by_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to obtain environmental background organized by date — bg_by_date","text":"Returns object class sp.temporal.bg list contains data.frame longitude, latitude, year, layer_date, layer_path, cell_ids_year environmental information.","code":""},{"path":"/reference/bg_by_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to obtain environmental background organized by date — bg_by_date","text":"buffer built around occurrences using neighborhood distance.","code":""},{"path":"/reference/bg_by_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to obtain environmental background organized by date — bg_by_date","text":"","code":"if (FALSE) { # \\dontrun{ library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60) #This code is for running in parallel future::plan(\"multisession\",workers=2) abex <- tenm::ex_by_date(this_species = abtc,train_prop=0.7) abbg <- tenm::bg_by_date(this_species = abex,                          buffer_ngbs=10,n_bg=50000) future::plan(\"sequential\") } # }"},{"path":"/reference/cells2samp.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to randomly select cell IDs for generating environmental background data. — cells2samp","title":"Helper function to randomly select cell IDs for generating environmental background data. — cells2samp","text":"Returns pixel IDs sample generating environmental background data.","code":""},{"path":"/reference/cells2samp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to randomly select cell IDs for generating environmental background data. — cells2samp","text":"","code":"cells2samp(   data,   longitude,   latitude,   cell_ids = NULL,   buffer_ngbs = 2,   raster_mask,   process_ngbs_by = 10,   n_bg = 50000,   progress = TRUE )"},{"path":"/reference/cells2samp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to randomly select cell IDs for generating environmental background data. — cells2samp","text":"data data.frame longitude latitude data. longitude character vector column name longitude. latitude character vector column name latitude. cell_ids numeric vector indicating IDs cells used geographic centers buffers. default values NULL. buffer_ngbs Number pixel neighbors around occurrences used build buffer. raster_mask object class SpatRaster used obtain pixel IDs. process_ngbs_by Numeric. Estimates neighbor cells x cells. memory management. n_bg Number background pixels. progress Logical. Show computation progress.","code":""},{"path":"/reference/cells2samp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to randomly select cell IDs for generating environmental background data. — cells2samp","text":"numeric vector IDs cells sampled.","code":""},{"path":"/reference/cells2samp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to randomly select cell IDs for generating environmental background data. — cells2samp","text":"","code":"# \\donttest{ # cells to sample data(abronia) temporal_layer <- system.file(\"extdata/bio/2016/bio_01.tif\",package = \"tenm\") raster_mask <- terra::rast(temporal_layer) set.seed(123) samp_01 <- tenm::cells2samp(data = abronia,                             longitude = \"decimalLongitude\",                             latitude = \"decimalLatitude\",                             cell_ids = NULL,                             buffer_ngbs = 4,                             raster_mask = raster_mask,                             process_ngbs_by = 10,                             n_bg = 50000,                             progress =TRUE) # Generete a sample using pixel IDs samp_02 <- tenm::cells2samp(data = abronia,                             longitude = NULL,                             latitude = NULL,                             cell_ids = c(256,290,326),                             buffer_ngbs = 4,                             raster_mask = raster_mask,                             process_ngbs_by = 10,                             n_bg = 50000,                             progress =TRUE) # }"},{"path":"/reference/clean_dup.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to thin longitude and latitude data — clean_dup","title":"Function to thin longitude and latitude data — clean_dup","text":"Thin duplicated redundant occurrence records present overlapping longitude latitude coordinates. user can thin occurrences using geographical distance threshold pixel neighborhood.","code":""},{"path":"/reference/clean_dup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to thin longitude and latitude data — clean_dup","text":"","code":"clean_dup(   data,   longitude,   latitude,   threshold = 0,   by_mask = FALSE,   raster_mask = NULL,   n_ngbs = 0 )"},{"path":"/reference/clean_dup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to thin longitude and latitude data — clean_dup","text":"data data.frame longitude latitude occurrence records longitude character vector indicating column name \"longitude\" variable. latitude character vector indicating column name \"latitude\" variable. threshold numeric value representing euclidean distance coordinates considered duplicate. by_mask Logical. TRUE data thinning done using raster layer mask. raster_mask object class SpatRaster used reference identify duplicates. n_ngbs Number pixels used define neighborhood matrix helps determine occurrences duplicates. value 0 removes occurrences within pixel, keeping one. value 1 considers duplicates occurrences within distance one pixel.","code":""},{"path":"/reference/clean_dup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to thin longitude and latitude data — clean_dup","text":"Returns data.frame coordinate data species","code":""},{"path":"/reference/clean_dup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to thin longitude and latitude data — clean_dup","text":"","code":"data(abronia) tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") tenm_mask <- terra::rast(file.path(tempora_layers_dir,\"1939/bio_01.tif\")) # Clean duplicates without raster mask (just by distance threshold) # First check the number of occurrence records print(nrow(abronia)) #> [1] 106 # Clean duplicated records using a distance of ~ 18 km (0.1666667 grades) ab_1 <- tenm::clean_dup(data =abronia,                         longitude = \"decimalLongitude\",                         latitude = \"decimalLatitude\",                         threshold = terra::res(tenm_mask),                         by_mask = FALSE,                         raster_mask = NULL) # Check number of records print(nrow(ab_1)) #> [1] 10 # Clean duplicates using a raster mask ab_2 <- tenm::clean_dup(data =abronia,                         longitude = \"decimalLongitude\",                         latitude = \"decimalLatitude\",                         threshold = terra::res(tenm_mask)[1],                         by_mask = TRUE,                         raster_mask = tenm_mask,                         n_ngbs = 1) # Check number of records print(nrow(ab_2)) #> [1] 9"},{"path":"/reference/clean_dup_by_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to thin occurrence data — clean_dup_by_date","title":"Function to thin occurrence data — clean_dup_by_date","text":"Cleans duplicated longitude latitude data year using specified distance threshold. distance can specified geographic distance , raster_mask provided, pixel distance.","code":""},{"path":"/reference/clean_dup_by_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to thin occurrence data — clean_dup_by_date","text":"","code":"clean_dup_by_date(   this_species,   threshold,   by_mask = FALSE,   raster_mask = NULL,   n_ngbs = 0 )"},{"path":"/reference/clean_dup_by_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to thin occurrence data — clean_dup_by_date","text":"this_species Species Temporal Data object see sp_temporal_data. threshold numeric value representing distance coordinates considered duplicate. by_mask Logical. TRUE thinning process done using raster layer mask. raster_mask object class SpatRaster used reference thin data. n_ngbs Number pixels used define neighborhood matrix helps determine occurrences duplicates. value 0 removes occurrences within pixel, keeping one. value 1 considers duplicates occurrences within distance one pixel.","code":""},{"path":"/reference/clean_dup_by_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to thin occurrence data — clean_dup_by_date","text":"sp.temporal.modeling object contains temporal data.frame. table five columns: longitude, latitude, date variable, layers_dates layers_path.","code":""},{"path":"/reference/clean_dup_by_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to thin occurrence data — clean_dup_by_date","text":"function build basis clean_dup. See help function examples","code":""},{"path":"/reference/clean_dup_by_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to thin occurrence data — clean_dup_by_date","text":"","code":"library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") tenm_mask <- terra::rast(file.path(tempora_layers_dir,\"1939/bio_01.tif\")) # Clean duplicates without raster mask (just by distance threshold) abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") abtc1 <- tenm::clean_dup_by_date(abt,threshold = terra::res(tenm_mask)[1]) # Check number of records print(nrow(abtc1$temporal_df)) #> [1] 40 # Clean duplicates using a raster mask abtc2 <- tenm::clean_dup_by_date(this_species = abt,                                 by_mask = TRUE,                                 threshold = terra::res(tenm_mask)[1],                                 raster_mask = tenm_mask,                                 n_ngbs = 0) # Check number of records print(nrow(abtc2$temporal_df)) #> [1] 50  abtc3 <- tenm::clean_dup_by_date(this_species = abt,                                 by_mask = TRUE,                                 threshold = terra::res(tenm_mask)[1],                                 raster_mask = tenm_mask,                                 n_ngbs = 2) # Check number of records print(nrow(abtc3$temporal_df)) #> [1] 38"},{"path":"/reference/colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Colors for plotting — colors","title":"Colors for plotting — colors","text":"string vector colors plotting vignette example.","code":""},{"path":"/reference/colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colors for plotting — colors","text":"","code":"colors"},{"path":"/reference/colors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Colors for plotting — colors","text":"object class character length 40.","code":""},{"path":"/reference/correlation_finder.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to find out strong correlations in a correlation matrix — correlation_finder","title":"Function to find out strong correlations in a correlation matrix — correlation_finder","text":"function finds variables strong correlations according correlation threshold.","code":""},{"path":"/reference/correlation_finder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to find out strong correlations in a correlation matrix — correlation_finder","text":"","code":"correlation_finder(   environmental_data,   method = \"spearman\",   threshold,   verbose = TRUE )"},{"path":"/reference/correlation_finder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to find out strong correlations in a correlation matrix — correlation_finder","text":"environmental_data matrix data.frame environmental data method method estimate correlation matrix. Possible options \"spearman\", \"pearson\" \"kendall\". threshold Correlation value used filter variables. verbose Verbose output.","code":""},{"path":"/reference/correlation_finder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to find out strong correlations in a correlation matrix — correlation_finder","text":"Returns list two elements: first vector names correlated variables; second list correlation values variables.","code":""},{"path":"/reference/correlation_finder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to find out strong correlations in a correlation matrix — correlation_finder","text":"","code":"# \\donttest{  library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60) future::plan(\"multisession\",workers=2) abex <- tenm::ex_by_date(abtc,train_prop=0.7) future::plan(\"sequential\") envdata <- abex$env_data[,-ncol(abex$env_data)] ecors <- tenm::correlation_finder(environmental_data =envdata,                                   method=\"spearman\",                                   threshold = 0.7 ) #> Warning: the standard deviation is zero #> ***************************************************************** #>  #>  Here is a list of variables that can summarize your niche #>  information, according to the threshold of 0.7 : #>  #>   bio_01 bio_02 bio_03 bio_04 bio_12 bio_14 bio_15  #>  #> ***************************************************************** #>  #> ---------------------------------------------------------------- #>  #> Correlation list: #>  #> Variable bio_01 is strongly correlated with: #>  #>    bio_01    bio_05    bio_06    bio_08    bio_09    bio_10    bio_11  #> 1.0000000 0.9720096 0.8622147 0.9762799 0.9389854 0.9884480 0.9708369  #> ---------------------------------------------------------------- #>  #> Variable bio_02 is strongly correlated with: #>  #>   bio_02   bio_07  #> 1.000000 0.750235  #> ---------------------------------------------------------------- #>  #> Variable bio_03 is strongly correlated with: #>  #> bio_03  #>      1  #> ---------------------------------------------------------------- #>  #> Variable bio_04 is strongly correlated with: #>  #> bio_04  #>      1  #> ---------------------------------------------------------------- #>  #> Variable bio_05 is strongly correlated with: #>  #>    bio_01    bio_05    bio_06    bio_08    bio_09    bio_10    bio_11  #> 0.9720096 1.0000000 0.8287244 0.9468420 0.9218126 0.9528169 0.9538006  #> ---------------------------------------------------------------- #>  #> Variable bio_06 is strongly correlated with: #>  #>    bio_01    bio_05    bio_06    bio_08    bio_09    bio_10    bio_11  #> 0.8622147 0.8287244 1.0000000 0.8314238 0.8774418 0.8339515 0.8896244  #> ---------------------------------------------------------------- #>  #> Variable bio_07 is strongly correlated with: #>  #>   bio_02   bio_07  #> 0.750235 1.000000  #> ---------------------------------------------------------------- #>  #> Variable bio_08 is strongly correlated with: #>  #>    bio_01    bio_05    bio_06    bio_08    bio_09    bio_10    bio_11  #> 0.9762799 0.9468420 0.8314238 1.0000000 0.9187488 0.9767573 0.9329921  #> ---------------------------------------------------------------- #>  #> Variable bio_09 is strongly correlated with: #>  #>    bio_01    bio_05    bio_06    bio_08    bio_09    bio_10    bio_11  #> 0.9389854 0.9218126 0.8774418 0.9187488 1.0000000 0.9263277 0.9321939  #> ---------------------------------------------------------------- #>  #> Variable bio_10 is strongly correlated with: #>  #>    bio_01    bio_05    bio_06    bio_08    bio_09    bio_10    bio_11  #> 0.9884480 0.9528169 0.8339515 0.9767573 0.9263277 1.0000000 0.9473264  #> ---------------------------------------------------------------- #>  #> Variable bio_11 is strongly correlated with: #>  #>    bio_01    bio_05    bio_06    bio_08    bio_09    bio_10    bio_11  #> 0.9708369 0.9538006 0.8896244 0.9329921 0.9321939 0.9473264 1.0000000  #> ---------------------------------------------------------------- #>  #> Variable bio_12 is strongly correlated with: #>  #>    bio_12    bio_13    bio_16    bio_18    bio_19  #> 1.0000000 0.8849691 0.9095685 0.8344122 0.7131398  #> ---------------------------------------------------------------- #>  #> Variable bio_13 is strongly correlated with: #>  #>    bio_12    bio_13    bio_16    bio_18  #> 0.8849691 1.0000000 0.9462376 0.7578118  #> ---------------------------------------------------------------- #>  #> Variable bio_14 is strongly correlated with: #>  #>    bio_14    bio_17  #> 1.0000000 0.7848596  #> ---------------------------------------------------------------- #>  #> Variable bio_15 is strongly correlated with: #>  #> bio_15  #>      1  #> ---------------------------------------------------------------- #>  #> Variable bio_16 is strongly correlated with: #>  #>    bio_12    bio_13    bio_16    bio_18  #> 0.9095685 0.9462376 1.0000000 0.7283047  #> ---------------------------------------------------------------- #>  #> Variable bio_17 is strongly correlated with: #>  #>    bio_14    bio_17    bio_19  #> 0.7848596 1.0000000 0.8555739  #> ---------------------------------------------------------------- #>  #> Variable bio_18 is strongly correlated with: #>  #>    bio_12    bio_13    bio_16    bio_18  #> 0.8344122 0.7578118 0.7283047 1.0000000  #> ---------------------------------------------------------------- #>  #> Variable bio_19 is strongly correlated with: #>  #>    bio_12    bio_17    bio_19  #> 0.7131398 0.8555739 1.0000000  #> ---------------------------------------------------------------- #>  # }"},{"path":"/reference/cov_center.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to compute the covariance matrix that defines an ellipsoid niche model. — cov_center","title":"Function to compute the covariance matrix that defines an ellipsoid niche model. — cov_center","text":"Function compute covariance matrix, niche centroid volume ellipsoid model. uses values niche variables occurrences points.","code":""},{"path":"/reference/cov_center.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to compute the covariance matrix that defines an ellipsoid niche model. — cov_center","text":"","code":"cov_center(data, mve = TRUE, level, vars = NULL)"},{"path":"/reference/cov_center.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to compute the covariance matrix that defines an ellipsoid niche model. — cov_center","text":"data data.frame matrix numeric values variables used model niche. mve logical value. TRUE minimum volume ellipsoid computed using function cov.mve MASS package. FALSE covariance matrix input data used. level numerical value specifying proportion data used compute ellipsoid. vars numeric string vector specifying columns indexes/names variables input data used fit ellipsoid model.","code":""},{"path":"/reference/cov_center.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to compute the covariance matrix that defines an ellipsoid niche model. — cov_center","text":"Returns list containing centroid ellipsoid, covariance matrix based input data, ellipsoid volume, semi-axis length axis coordinates.","code":""},{"path":"/reference/cov_center.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to compute the covariance matrix that defines an ellipsoid niche model. — cov_center","text":"","code":"# \\donttest{ library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60) future::plan(\"multisession\",workers=2) abex <- tenm::ex_by_date(abtc,train_prop=0.7) future::plan(\"sequential\") mod <- tenm::cov_center(data = abex$env_data,                         mve = TRUE,                         level = 0.975,                         vars = c(\"bio_05\",\"bio_06\",\"bio_12\")) # Print model parameters print(mod) #> $centroid #>     bio_05     bio_06     bio_12  #>  217.10256   54.69231 1106.07692  #>  #> $covariance #>           bio_05   bio_06      bio_12 #> bio_05  731.3050 456.5061   -249.8502 #> bio_06  456.5061 418.6923    987.1559 #> bio_12 -249.8502 987.1559 152235.5992 #>  #> $niche_volume #> [1] 14127753 #>  #> $SemiAxis_length #>          a          b          c  #>   28.44591   99.38665 1192.98935  #>  #> $axis_coordinates #> $axis_coordinates[[1]] #>         bio_05   bio_06   bio_12 #> vec_1 233.5857 31.50945 1106.254 #> vec_2 200.6194 77.87517 1105.899 #>  #> $axis_coordinates[[2]] #>         bio_05     bio_06   bio_12 #> vec_1 298.1029 112.282107 1105.835 #> vec_2 136.1022  -2.897492 1106.319 #>  #> $axis_coordinates[[3]] #>         bio_05   bio_06     bio_12 #> vec_1 215.1587 62.44309 2299.03951 #> vec_2 219.0465 46.94153  -86.88566 #>  #>  # }"},{"path":"/reference/ellipsoid_omr.html","id":null,"dir":"Reference","previous_headings":"","what":"ellipsoid_omr — ellipsoid_omr","title":"ellipsoid_omr — ellipsoid_omr","text":"Compute omission rate statistical metrics ellipsoid models","code":""},{"path":"/reference/ellipsoid_omr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ellipsoid_omr — ellipsoid_omr","text":"","code":"ellipsoid_omr(   env_data,   env_test = NULL,   env_bg,   cf_level,   mve = TRUE,   proc = FALSE,   proc_iter = 100,   rseed = TRUE )"},{"path":"/reference/ellipsoid_omr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ellipsoid_omr — ellipsoid_omr","text":"env_data data frame environmental data. env_test data frame environmental testing data. default NULL, given, selection process show p-value binomial test. env_bg Environmental data compute approximated prevalence model. data sample environmental layers calibration area. cf_level Proportion points included ellipsoids. parameter equivalent error (E) proposed Peterson et al. (2008) doi:10.1016/j.ecolmodel.2007.11.008 . mve logical value. TRUE minimum volume ellipsoid computed using function cov.rob MASS package. FALSE covariance matrix input data used. proc Logical TRUE partial roc test run. proc_iter Numeric. total number iterations partial ROC bootstrap. rseed Logical. Whether set random seed partial roc bootstrap. Default TRUE.","code":""},{"path":"/reference/ellipsoid_omr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ellipsoid_omr — ellipsoid_omr","text":"data.frame 5 columns: ) \"fitted_vars\" names variables fitted; ii) \"om_rate\" omission rates model; iii) \"bg_prevalence\" approximated prevalence model.","code":""},{"path":"/reference/ellipsoid_omr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ellipsoid_omr — ellipsoid_omr","text":"","code":"# \\donttest{ library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60) #This code is for running in parallel future::plan(\"multisession\",workers=2) abex <- tenm::ex_by_date(this_species = abtc,train_prop=0.7) abbg <- tenm::bg_by_date(this_species = abex,                          buffer_ngbs=10,n_bg=50000) future::plan(\"sequential\") edata <- abex$env_data etrain <- edata[edata$trian_test==\"Train\",c(\"bio_05\",\"bio_06\",\"bio_12\")] etest <- edata[edata$trian_test==\"Test\",c(\"bio_05\",\"bio_06\",\"bio_12\")] bg <- abbg$env_bg[,c(\"bio_05\",\"bio_06\",\"bio_12\")] eor <- ellipsoid_omr(env_data=etrain,env_test=etest,env_bg=bg,                      cf_level=0.975,proc=TRUE) eor #>                  fitted_vars nvars om_rate_train non_pred_train_ids #> P_value bio_05,bio_06,bio_12     3        0.0625              18,28 #>         om_rate_test non_pred_test_ids bg_prevalence pval_bin pval_proc #> P_value            0                        0.505534        0         0 #>         env_bg_paucratio env_bg_auc #> P_value         1.403343   0.733385 # }"},{"path":"/reference/ellipsoid_projection.html","id":null,"dir":"Reference","previous_headings":"","what":"ellipsoid_projection: function to project an ellipsoid model — ellipsoid_projection","title":"ellipsoid_projection: function to project an ellipsoid model — ellipsoid_projection","text":"Function project ellipsoid model using shape matrix (covariance matrix) niche variables.","code":""},{"path":"/reference/ellipsoid_projection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ellipsoid_projection: function to project an ellipsoid model — ellipsoid_projection","text":"","code":"ellipsoid_projection(   envlayers,   centroid,   covar,   level = 0.95,   output = \"suitability\",   plot = T,   size,   xlab1 = \"niche var 1\",   ylab1 = \"niche var 2\",   zlab1 = \"S\",   alpha = 0.1,   ... )"},{"path":"/reference/ellipsoid_projection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ellipsoid_projection: function to project an ellipsoid model — ellipsoid_projection","text":"envlayers SpatRaster object niche variables. centroid vector values centers ellipsoid (see cov_center). covar shape matrix (covariance) ellipsoid (see cov_center). level proportion points  included inside ellipsoid output output distance: two possible values \"suitability\" \"mahalanobis\". default function uses \"suitability\". plot Logical TRUE plot niche shown. size size points niche plot. xlab1 x label 2-dimensional histogram ylab1 y label 2-dimensional histogram zlab1 z label 2-dimensional histogram alpha Control transparency 3-dimensional ellipsoid ... Arguments passed plot3d function rgl","code":""},{"path":"/reference/ellipsoid_projection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ellipsoid_projection: function to project an ellipsoid model — ellipsoid_projection","text":"Returns SpatRaster suitability values.","code":""},{"path":"/reference/ellipsoid_projection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ellipsoid_projection: function to project an ellipsoid model — ellipsoid_projection","text":"","code":"if (FALSE) { # \\dontrun{ library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60) future::plan(\"multisession\",workers=2) abex <- tenm::ex_by_date(this_species = abtc,train_prop=0.7) abbg <- tenm::bg_by_date(this_species = abex,                          buffer_ngbs=10,n_bg=50000) future::plan(\"sequential\") mod <- tenm::cov_center(data = abex$env_data,                         mve = TRUE,                         level = 0.975,                         vars = c(\"bio_05\",\"bio_06\",\"bio_12\")) layers_path <-   list.files(file.path(tempora_layers_dir,                                       \"2016\"),                             pattern = \".tif$\",full.names = TRUE) elayers <- terra::rast(layers_path) nmod <- ellipsoid_projection(envlayers = elayers[[names(mod$centroid)]],                              centroid = mod$centroid,                              covar = mod$covariance,                              level = 0.99999,                              output = \"suitability\",                              size = 3,                              plot = TRUE) } # }"},{"path":"/reference/ellipsoid_selection.html","id":null,"dir":"Reference","previous_headings":"","what":"ellipsoid_selection: Performs models selection for ellipsoid models — ellipsoid_selection","title":"ellipsoid_selection: Performs models selection for ellipsoid models — ellipsoid_selection","text":"function performs model selection ellipsoid models using three criteria: ) omission rate, b) significance partial ROC binomial tests c) AUC value.","code":""},{"path":"/reference/ellipsoid_selection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ellipsoid_selection: Performs models selection for ellipsoid models — ellipsoid_selection","text":"","code":"ellipsoid_selection(   env_train,   env_test = NULL,   env_vars,   nvarstest,   level = 0.95,   mve = TRUE,   env_bg = NULL,   omr_criteria,   parallel = F,   ncores = NULL,   comp_each = 100,   proc = FALSE,   proc_iter = 100,   rseed = TRUE )"},{"path":"/reference/ellipsoid_selection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ellipsoid_selection: Performs models selection for ellipsoid models — ellipsoid_selection","text":"env_train data frame environmental training data. env_test data frame environmental testing data. Default NULL. env_vars vector names environmental variables used selection process. help choosing variables use see correlation_finder. nvarstest vector indicating number variables fit ellipsoids model selection. level Proportion points included ellipsoids, equivalent error (E) proposed Peterson et al. (2008). mve Logical. TRUE, minimum volume ellipsoid computed using cov.rob MASS. FALSE, covariance matrix input data used. env_bg Environmental data compute approximated prevalence model, sample environmental layers calibration area. omr_criteria Omission rate criteria: allowable omission rate selection process. Default NULL (see details). parallel Logical. TRUE, computations run parallel. Default FALSE. ncores Number cores use parallel processing. Default uses available cores minus one. comp_each Number models run job parallel computation. Default 100. proc Logical. TRUE, partial ROC test run. proc_iter Numeric. Total iterations partial ROC bootstrap. rseed Logical. TRUE, set random seed partial ROC bootstrap. Default TRUE.","code":""},{"path":"/reference/ellipsoid_selection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ellipsoid_selection: Performs models selection for ellipsoid models — ellipsoid_selection","text":"data.frame 5 columns: \"fitted_vars\": Names variables fitted. \"nvars\": Number fitted variables \"om_rate_train\": Omission rate training data. \"non_pred_train_ids\": Row IDs non-predicted training data. \"om_rate_test\"': Omission rate testing data. \"non_pred_test_ids\": Row IDs non-predicted testing data. \"bg_prevalence\": Approximated prevalence model (see details). \"pval_bin\": p-value binomial test. \"pval_proc\": p-value partial ROC test. \"env_bg_paucratio\": Environmental partial AUC ratio value. \"env_bg_auc\": Environmental AUC value. \"mean_omr_train_test\": Mean value omission rates (train test). \"rank_by_omr_train_test\": Rank value importance model selection omission rate. \"rank_omr_aucratio\": Rank value AUC ratio.","code":""},{"path":"/reference/ellipsoid_selection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ellipsoid_selection: Performs models selection for ellipsoid models — ellipsoid_selection","text":"Model selection occurs environmental space (E-space). variable combination specified nvarstest, omission rate (omr) E-space computed using inEllipsoid function. Results ordered omr testing data. env_bg provided, estimated prevalence computed results additionally ordered partial AUC. Model selection can run parallel. details examples go ellipsoid_omr help.","code":""},{"path":"/reference/ellipsoid_selection.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ellipsoid_selection: Performs models selection for ellipsoid models — ellipsoid_selection","text":"Peterson, .T. et al. (2008) Rethinking receiver operating characteristic analysis applications ecological niche modeling. Ecol. Modell. 213, 63–72. doi:10.1016/j.ecolmodel.2007.11.008","code":""},{"path":"/reference/ellipsoid_selection.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ellipsoid_selection: Performs models selection for ellipsoid models — ellipsoid_selection","text":"Luis Osorio-Olvera luismurao@gmail.com","code":""},{"path":"/reference/ellipsoid_selection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ellipsoid_selection: Performs models selection for ellipsoid models — ellipsoid_selection","text":"","code":"# \\donttest{ library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60) future::plan(\"multisession\",workers=2) abex <- tenm::ex_by_date(this_species = abtc,train_prop=0.7) abbg <- tenm::bg_by_date(this_species = abex,                          buffer_ngbs=10,n_bg=50000) future::plan(\"sequential\") varcorrs <- tenm::correlation_finder(environmental_data =                                      abex$env_data[,-ncol(abex$env_data)],                                      method = \"spearman\",                                      threshold = 0.8,                                      verbose = FALSE) #> Warning: the standard deviation is zero edata <- abex$env_data etrain <- edata[edata$trian_test==\"Train\",] |> data.frame() etest <- edata[edata$trian_test==\"Test\",] |> data.frame() bg <- abbg$env_bg res1 <- tenm::ellipsoid_selection(env_train = etrain,                                   env_test = etest,                                   env_vars = varcorrs$descriptors,                                   nvarstest = 3,                                   level = 0.975,                                   mve = TRUE,                                   env_bg = bg,                                   omr_criteria = 0.1,                                   parallel = FALSE,proc = TRUE) #> ------------------------------------------------------------------- #> \t\t**** Starting model selection process **** #> ------------------------------------------------------------------- #>  #> A total number of 84 models will be created for combinations of 9 variables taken by 3  #>  #> ------------------------------------------------------------------- #> \t **A total number of 84 models will be tested ** #>  #> ------------------------------------------------------------------- #> \t 54 models passed omr_criteria for train data #> \t 9 models passed omr_criteria for test data #> \t 9 models passed omr_criteria for train and test data head(res1) #>            fitted_vars nvars om_rate_train non_pred_train_ids om_rate_test #> 1 bio_01,bio_04,bio_07     3       0.06250              18,31            0 #> 2 bio_01,bio_03,bio_04     3       0.06250               3,18            0 #> 3 bio_01,bio_02,bio_04     3       0.09375            3,18,31            0 #> 4 bio_01,bio_03,bio_12     3       0.06250               3,18            0 #> 5 bio_01,bio_07,bio_12     3       0.06250              18,31            0 #> 6 bio_04,bio_07,bio_12     3       0.06250              21,28            0 #>   non_pred_test_ids bg_prevalence pval_bin pval_proc env_bg_paucratio #> 1                       0.4661502        0         0         1.476077 #> 2                       0.4692861        0         0         1.453305 #> 3                       0.4809998        0         0         1.439724 #> 4                       0.4851503        0         0         1.398230 #> 5                       0.4973252        0         0         1.386418 #> 6                       0.7312304        0         0         1.325186 #>   env_bg_auc mean_omr_train_test rank_by_omr_train_test rank_omr_aucratio #> 1  0.7891250            0.031250                      1                 1 #> 2  0.7574138            0.031250                      2                 2 #> 3  0.7502087            0.046875                      6                 3 #> 4  0.6889550            0.031250                      3                 4 #> 5  0.7182150            0.031250                      4                 5 #> 6  0.6926312            0.031250                      5                 6 # }"},{"path":"/reference/ex_by_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract environmental data by date — ex_by_date","title":"Extract environmental data by date — ex_by_date","text":"Function extract environmental data date. generates training testing datasets using random partition specified proportion.","code":""},{"path":"/reference/ex_by_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract environmental data by date — ex_by_date","text":"","code":"ex_by_date(this_species, train_prop = 0.7)"},{"path":"/reference/ex_by_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract environmental data by date — ex_by_date","text":"this_species Species Temporal Data object. See sp_temporal_data details. train_prop Numeric. Proportion data use training. example, train_prop 0.7 means 70% data used training 30% testing.","code":""},{"path":"/reference/ex_by_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract environmental data by date — ex_by_date","text":"object class sp.temporal.env consists list five elmentes: \"temporal_df\": temporal data.frame (temporal_df) following columns: latitude, longitude, year, layer_dates, layers_path, cell_ids_year, environmental data. \"sp_date_var\": Name date variable. \"lon_lat_vars\": Names longitude latitude variables. \"layers_ext\": Environmental layers extension. \"env_data\": Environmental data occurrences.","code":""},{"path":"/reference/ex_by_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract environmental data by date — ex_by_date","text":"","code":"# \\donttest{ library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60) future::plan(\"multisession\",workers=2) abex <- tenm::ex_by_date(this_species = abtc,                          train_prop=0.7) future::plan(\"sequential\") # }"},{"path":"/reference/inEllipsoid.html","id":null,"dir":"Reference","previous_headings":"","what":"inEllipsoid: Determine if a point is inside or outside an ellipsoid — inEllipsoid","title":"inEllipsoid: Determine if a point is inside or outside an ellipsoid — inEllipsoid","text":"Determine point inside outside ellipsoid based confidence level.","code":""},{"path":"/reference/inEllipsoid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"inEllipsoid: Determine if a point is inside or outside an ellipsoid — inEllipsoid","text":"","code":"inEllipsoid(centroid, eShape, env_data, level)"},{"path":"/reference/inEllipsoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"inEllipsoid: Determine if a point is inside or outside an ellipsoid — inEllipsoid","text":"centroid Numeric vector centroids environmental variable. eShape Shape matrix ellipsoid (can covariance matrix minimum volume ellipsoid). env_data Data frame environmental data. level Proportion points included ellipsoids, equivalent error (E) proposed Peterson et al. (2008).","code":""},{"path":"/reference/inEllipsoid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"inEllipsoid: Determine if a point is inside or outside an ellipsoid — inEllipsoid","text":"data.frame 2 columns: \"in_Ellipsoid\": Binary response indicating point inside (1) outside (0) ellipsoid. \"mh_dist\": Mahalanobis distance point centroid.","code":""},{"path":"/reference/inEllipsoid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"inEllipsoid: Determine if a point is inside or outside an ellipsoid — inEllipsoid","text":"","code":"# \\donttest{ library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60) future::plan(\"multisession\",workers=10) #> Warning: Careful, you are setting up 10 localhost parallel workers with only 4 CPU cores available for this R process (per ‘system’), which could result in a 250% load. The soft limit is set to 100%. Overusing the CPUs has negative impact on the current R process, but also on all other processes of yours and others running on the same machine. See help(\"parallelly.options\", package = \"parallelly\") for how to override the soft and hard limits abex <- tenm::ex_by_date(abtc,train_prop=0.7) varcorrs <- tenm::correlation_finder(environmental_data = abex$env_data[,-ncol(abex$env_data)],                                      method = \"spearman\",                                      threshold = 0.8,                                      verbose = FALSE) #> Warning: the standard deviation is zero future::plan(\"sequential\") mod <- tenm::cov_center(data = abex$env_data,                         mve = TRUE,                         level = 0.975,                         vars = c(\"bio_05\",\"bio_06\",\"bio_12\")) in_elip <- tenm::inEllipsoid(centroid = mod$centroid,                        eShape = mod$covariance,                        env_data = abex$env_data[,c(\"bio_05\",\"bio_06\",\"bio_12\")],                        level = 0.975) # 1 = Inside the ellipsoid; 0 = Outside the ellipsoid print(in_elip) #>    in_Ellipsoid    mh_dist #> 1             1  1.5208724 #> 2             1  1.1441787 #> 3             1  4.5220005 #> 4             1  0.6103583 #> 5             1  0.8606538 #> 6             1  2.2926090 #> 7             1  2.7047455 #> 8             1  0.7001683 #> 9             1  1.4891237 #> 10            1  0.6497573 #> 11            1  0.9349719 #> 12            1  5.7577780 #> 13            1  0.6612829 #> 14            1  2.8157858 #> 15            1  5.0221566 #> 16            1  0.4349905 #> 17            1  0.9724952 #> 18            1  1.0877318 #> 19            1  0.1253176 #> 20            1  4.8374752 #> 21            1  1.9092557 #> 22            1  7.8798423 #> 23            1  1.8857259 #> 24            1  3.2271328 #> 25            1  6.6748831 #> 26            1  2.1050325 #> 27            1  3.4891962 #> 28            1  3.0973598 #> 29            1  0.8824323 #> 30            0  9.8155714 #> 31            1  1.7366118 #> 32            1  2.0110087 #> 33            0 13.4444583 #> 34            1  0.6095582 #> 35            1  4.3824177 #> 36            1  6.4840384 #> 37            1  5.6598968 #> 38            1  7.5065473 #> 39            1  3.8067799 #> 40            1  1.6922563 # }"},{"path":"/reference/metaras.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to obtain layer name from a raster layer — metaras","title":"Helper function to obtain layer name from a raster layer — metaras","text":"Returns character vector name raster layer.","code":""},{"path":"/reference/metaras.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to obtain layer name from a raster layer — metaras","text":"","code":"metaras(r)"},{"path":"/reference/metaras.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to obtain layer name from a raster layer — metaras","text":"object class SpatRaster representing raster layer.","code":""},{"path":"/reference/metaras.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to obtain layer name from a raster layer — metaras","text":"character vector name raster layer.","code":""},{"path":"/reference/metaras.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to obtain layer name from a raster layer — metaras","text":"","code":"tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") p1 <- list.files(tempora_layers_dir,full.names=TRUE,                  pattern=\".tif$\",recursive=TRUE)[1] r1 <- terra::rast(p1) print(tenm::metaras(r1)) #> [1] \"bio_01\""},{"path":"/reference/pROC.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial ROC calculation for Niche Models — pROC","title":"Partial ROC calculation for Niche Models — pROC","text":"Apply partial ROC tests continuous niche models.","code":""},{"path":"/reference/pROC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial ROC calculation for Niche Models — pROC","text":"","code":"pROC(   continuous_mod,   test_data,   n_iter = 1000,   E_percent = 5,   boost_percent = 50,   rseed = FALSE,   sub_sample = TRUE,   sub_sample_size = 1000 )"},{"path":"/reference/pROC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial ROC calculation for Niche Models — pROC","text":"continuous_mod SpatRaster numeric vector ecological niche model evaluated. numeric vector provided, contain values predicted suitability. test_data numerical matrix, data.frame, numeric vector: data.frame matrix, contain coordinates occurrences used test ecological niche model. Columns must : longitude latitude. numeric vector, contain values predicted suitability. n_iter Number bootstrap iterations perform partial ROC calculations. Default 1000. E_percent Numeric value 0 100 used threshold (E) partial ROC calculations. Default 5. boost_percent Numeric value 0 100 representing percentage testing data use bootstrap iterations partial ROC. Default 50. rseed Logical. Whether set random seed reproducibility. Default FALSE. sub_sample Logical. Indicates whether use subsample test data. Recommended large datasets. sub_sample_size Size subsample use computing pROC values sub_sample TRUE.","code":""},{"path":"/reference/pROC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial ROC calculation for Niche Models — pROC","text":"list two elements: \"pROC_summary\": data.frame containing mean AUC value, AUC ratio calculated iteration p-value test. \"pROC_results\": data.frame four columns containing AUC (auc_model), partial AUC (auc_pmodel), partial AUC random model (auc_prand) AUC ratio (auc_ratio) iteration.","code":""},{"path":"/reference/pROC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Partial ROC calculation for Niche Models — pROC","text":"Partial ROC calculated following Peterson et al. (2008; doi:10.1016/j.ecolmodel.2007.11.008 ). function modification PartialROC function, available https://github.com/narayanibarve/ENMGadgets.","code":""},{"path":"/reference/pROC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Partial ROC calculation for Niche Models — pROC","text":"Peterson, .T. et al. (2008) Rethinking receiver operating characteristic analysis applications ecological niche modeling. Ecol. Modell., 213, 63–72. doi:10.1016/j.ecolmodel.2007.11.008","code":""},{"path":"/reference/pROC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partial ROC calculation for Niche Models — pROC","text":"","code":"data(abronia) suit_1970_2000 <- terra::rast(system.file(\"extdata/suit_1970_2000.tif\",                                           package = \"tenm\")) print(suit_1970_2000) #> class       : SpatRaster  #> dimensions  : 23, 20, 1  (nrow, ncol, nlyr) #> resolution  : 0.1666667, 0.1666667  (x, y) #> extent      : -99.16667, -95.83333, 17.16667, 21  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  #> source      : suit_1970_2000.tif  #> name        : suit_1970_2000  #> min value   :   4.614139e-37  #> max value   :   8.332142e-01  proc_test <- tenm::pROC(continuous_mod = suit_1970_2000,                         test_data = abronia[,c(\"decimalLongitude\",                                                \"decimalLatitude\")],                         n_iter = 500, E_percent=5,                         boost_percent=50) print(proc_test$pROC_summary) #>              Mean_AUC Mean_pAUC_ratio_at_5%               P_value  #>             0.9024062             1.5066030             0.0000000"},{"path":"/reference/plot_ellipsoid.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot ellipsoid models in E-space — plot_ellipsoid","title":"Function to plot ellipsoid models in E-space — plot_ellipsoid","text":"function plots 2D 3D ellipsoids using environmental information coordinates.","code":""},{"path":"/reference/plot_ellipsoid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot ellipsoid models in E-space — plot_ellipsoid","text":"","code":"plot_ellipsoid(   x,   y,   z = NULL,   xlab = \"x\",   ylab = \"y\",   zlab = \"x\",   mve = TRUE,   level = 0.975,   col = NULL,   lwd_axes = 2,   lty_axes = 2,   semiaxes = FALSE,   add = FALSE,   ... )"},{"path":"/reference/plot_ellipsoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot ellipsoid models in E-space — plot_ellipsoid","text":"x Numeric vector representing z coordinate ellipsoid. Defaults NULL. xlab Character vector name x-axis label. ylab Character vector name y-axis label. zlab Character vector name z-axis label (plotting 3D). mve Logical. TRUE, fits minimum volume ellipsoid model. level Numeric value indicating proportion points included inside ellipsoid model. col Plot color lwd_axes Line width ellipsoid semi-axes. lty_axes Line type ellipsoid semi-axes. semiaxes Logical. Show semi-axes ellipsoid. add Logical. TRUE, add plot existing plot (2D plots ). ... Additional arguments pass base::plot, rgl::plot3d, rgl::wire3d, plotting functions","code":""},{"path":"/reference/plot_ellipsoid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to plot ellipsoid models in E-space — plot_ellipsoid","text":"2-dimensional 3-dimensional plot depending input coordinates.","code":""},{"path":"/reference/plot_ellipsoid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to plot ellipsoid models in E-space — plot_ellipsoid","text":"","code":"x <- rnorm(100) y <- rnorm(100) z <- rnorm(100) # 2 dimensional plot plot_ellipsoid(x, y, col = \"darkgreen\", xlab = \"X-axis\", ylab = \"Y-axis\",                mve = TRUE, level = 0.95)  # 3 dimensional plot plot_ellipsoid(x, y, z, col = \"blue\", xlab = \"X-axis\", ylab = \"Y-axis\",                zlab = \"Z-axis\", mve = TRUE, level = 0.95) # \\donttest{ # Examples using functions of the package library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60) future::plan(\"multisession\",workers=2) abex <- tenm::ex_by_date(abtc,train_prop=0.7) future::plan(\"sequential\") x <- abex$temporal_df$bio_05 y <- abex$temporal_df$bio_06 z <- abex$temporal_df$bio_12 # 2D ellipsoid tenm::plot_ellipsoid(x = x, y=y, semiaxes= TRUE,xlim=c(140,390)) tenm::plot_ellipsoid(x = x+100, y=y, semiaxes= TRUE,add=TRUE)  # 3D ellipsoid tenm::plot_ellipsoid(x = x, y=y, z=z ,semiaxes= FALSE) tenm::plot_ellipsoid(x = x+100, y=y, z=z ,semiaxes= FALSE,add=TRUE) # }"},{"path":"/reference/predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict the potential distribution of tenm based on specific time periods of environmental conditions or averages. — predict,sp.temporal.selection-method","title":"Predict the potential distribution of tenm based on specific time periods of environmental conditions or averages. — predict,sp.temporal.selection-method","text":"Predict potential distribution tenm based specific time periods environmental conditions averages.","code":""},{"path":"/reference/predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict the potential distribution of tenm based on specific time periods of environmental conditions or averages. — predict,sp.temporal.selection-method","text":"","code":"# S4 method for class 'sp.temporal.selection' predict(   object,   model_variables = NULL,   layers = NULL,   layers_path = NULL,   layers_ext = NULL,   mve = TRUE,   level = 0.975,   output = \"suitability\",   ... )"},{"path":"/reference/predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict the potential distribution of tenm based on specific time periods of environmental conditions or averages. — predict,sp.temporal.selection-method","text":"object object class sp.temporal.selection model_variables vector variable names layers SpatRaster object list element SpatRaster. layers_path Path layers layers_ext Layers extension mve projection use minimum volume ellipsoid algorithm level Proportion data used fit minimum volume ellipsoid output character indicate model uses suitability values Mahalanobis distances. Possible values \"suitability\" \"mahalanobis\" ... Additional parameters passed ellipsoid_projection","code":""},{"path":"/reference/predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict the potential distribution of tenm based on specific time periods of environmental conditions or averages. — predict,sp.temporal.selection-method","text":"Returns SpatRaster suitability values Mahalanobis distances niche center.","code":""},{"path":"/reference/predict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict the potential distribution of tenm based on specific time periods of environmental conditions or averages. — predict,sp.temporal.selection-method","text":"Note SpatRaster 'layers' parameter number elements (layers) 'model_variables'. predict method assumes variables SpatRaster correspond 'model_variables'. layers 'layers' parameter given list objects class SpatRaster, number prediction layers number elements list.","code":""},{"path":"/reference/predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict the potential distribution of tenm based on specific time periods of environmental conditions or averages. — predict,sp.temporal.selection-method","text":"","code":"# \\donttest{ library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60) future::plan(\"multisession\",workers=2) abex <- tenm::ex_by_date(this_species = abtc,train_prop=0.7) abbg <- tenm::bg_by_date(this_species = abex,                          buffer_ngbs=NULL,n_bg=50000) abbg <- tenm::bg_by_date(this_species = abex,                          buffer_ngbs=10,n_bg=50000) future::plan(\"sequential\") varcorrs <- tenm::correlation_finder(environmental_data =                                        abex$env_data[,-ncol(abex$env_data)],                                      method = \"spearman\",                                      threshold = 0.8,                                      verbose = FALSE) #> Warning: the standard deviation is zero mod_sel <- tenm::tenm_selection(this_species = abbg,                                 omr_criteria =0.1,                                 ellipsoid_level=0.975,                                 vars2fit = varcorrs$descriptors,                                 nvars_to_fit=c(3,4),                                 proc = TRUE,                                 RandomPercent = 50,                                 NoOfIteration=1000,                                 parallel=TRUE,                                 n_cores=2) #> ------------------------------------------------------------------- #> \t\t**** Starting model selection process **** #> ------------------------------------------------------------------- #>  #> A total number of 84 models will be created for combinations of 9 variables taken by 3  #>  #> A total number of 126 models will be created for combinations of 9 variables taken by 4  #>  #> ------------------------------------------------------------------- #> \t **A total number of 210 models will be tested ** #>  #> ------------------------------------------------------------------- #> Doing calibration from model  1 to  100 in process  1  #>  #> Doing calibration from model  101 to  200 in process  2  #>  #> Doing calibration from model  201 to  210 in process  3  #>  #> Finishing calibration of models  1 to  100  #>  #> Finishing calibration of models  101 to  200  #>  #> Finishing calibration of models  201 to  210  #>  #> Finishing... #>  #> ------------------------------------------------------------------- #> \t 124 models passed omr_criteria for train data #> \t 20 models passed omr_criteria for test data #> \t 20 models passed omr_criteria for train and test data # Prediction using variables path layers_70_00_dir <- system.file(\"extdata/bio_1970_2000\",package = \"tenm\") # The if the 'model_variables' parameter is set to NULL, the method uses # the first model in the results table (mod_sel$mods_table) suit_1970_2000 <- predict(mod_sel,                           model_variables = NULL,                           layers_path = layers_70_00_dir,                           layers_ext = \".tif$\") #> No selected variables. Using the first model in mods_table #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% # You can select the modeling variables used to project the model suit_1970_2000 <- predict(mod_sel,                           model_variables = c(\"bio_01\",\"bio_04\",                                               \"bio_07\",\"bio_12\"),                           layers_path = layers_70_00_dir,                           layers_ext = \".tif$\") #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100%  # Pass a list containing the paths of the modeling layers layers_1939_2016 <- file.path(tempora_layers_dir,c(\"1939\",\"2016\")) suit_1939_2016 <- predict(mod_sel,model_variables = NULL,                           layers_path = layers_1939_2016,                           layers_ext = \".tif$\") #> No selected variables. Using the first model in mods_table #>    |                                                                               |                                                                      |   0%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================================================| 100% # Pass a list of raster layers layers_1939 <- terra::rast(list.files(layers_1939_2016[1],                                       pattern = \".tif$\",full.names = TRUE)) layers_2016 <- terra::rast(list.files(layers_1939_2016[2],                                       pattern = \".tif$\",full.names = TRUE)) layers_1939 <- layers_1939[[c(\"bio_01\",\"bio_04\",\"bio_07\")]] layers_2016 <- layers_2016[[c(\"bio_01\",\"bio_04\",\"bio_07\")]] layers_list <- list(layers_1939,layers_2016) suit_1939_2016 <- predict(object = mod_sel,                           model_variables = c(\"bio_01\",\"bio_04\",\"bio_07\"),                           layers_path = NULL,                           layers = layers_list,                           layers_ext = \".tif$\") #>    |                                                                               |                                                                      |   0%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================================================| 100%  # }"},{"path":"/reference/sp.temporal.bg-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 classes to organize data and results of tenm objects — sp.temporal.bg-class","title":"S3 classes to organize data and results of tenm objects — sp.temporal.bg-class","text":"S3 classes organize data results tenm objects","code":""},{"path":"/reference/sp.temporal.bg-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 classes to organize data and results of tenm objects — sp.temporal.bg-class","text":"object class 'sp.temporal.bg'. object inherits information objects classes 'sp.temporal.modeling' 'sp.temporal.env'. class adds environmental background information.","code":""},{"path":"/reference/sp.temporal.bg-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"S3 classes to organize data and results of tenm objects — sp.temporal.bg-class","text":"Luis Osorio-Olvera","code":""},{"path":"/reference/sp.temporal.env-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 classes to organize data and results of tenm objects — sp.temporal.env-class","title":"S3 classes to organize data and results of tenm objects — sp.temporal.env-class","text":"S3 classes organize data results tenm objects","code":""},{"path":"/reference/sp.temporal.env-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 classes to organize data and results of tenm objects — sp.temporal.env-class","text":"object class 'sp.temporal.env' inheriting information 'sp.temporal.env'. object adds data.frame environmental values associated occurrence data.","code":""},{"path":"/reference/sp.temporal.env-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"S3 classes to organize data and results of tenm objects — sp.temporal.env-class","text":"Luis Osorio-Olvera","code":""},{"path":"/reference/sp.temporal.modeling-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 classes to organize data and results of tenm objects — sp.temporal.modeling-class","title":"S3 classes to organize data and results of tenm objects — sp.temporal.modeling-class","text":"S3 classes organize data results tenm objects","code":""},{"path":"/reference/sp.temporal.modeling-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 classes to organize data and results of tenm objects — sp.temporal.modeling-class","text":"object list comprising four elements: ) data.frame containing occurrence records layer information. b) character vector specifying variable names. c) character vector indicating names longitude latitude variables. d) character vector denoting layers extension.","code":""},{"path":"/reference/sp.temporal.modeling-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"S3 classes to organize data and results of tenm objects — sp.temporal.modeling-class","text":"Luis Osorio-Olvera","code":""},{"path":"/reference/sp.temporal.selection-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 classes to organize data and results of tenm objects — sp.temporal.selection-class","title":"S3 classes to organize data and results of tenm objects — sp.temporal.selection-class","text":"S3 classes organize data results tenm objects","code":""},{"path":"/reference/sp.temporal.selection-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 classes to organize data and results of tenm objects — sp.temporal.selection-class","text":"object class 'sp.temporal.selection'. object inherits information objects classes 'sp.temporal.modeling', 'sp.temporal.env' 'sp.temporal.bg'. object stores results model calibration selection process data.frame.","code":""},{"path":"/reference/sp.temporal.selection-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"S3 classes to organize data and results of tenm objects — sp.temporal.selection-class","text":"Luis Osorio-Olvera","code":""},{"path":"/reference/sp_temporal_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create a Species Temporal Data object (STD object). — sp_temporal_data","title":"Function to create a Species Temporal Data object (STD object). — sp_temporal_data","text":"Creates object class sp.temporal.modeling contains list four attributes: temporal_df: data frame following columns: Longitude: Longitude coordinates occurrence records. Latitude: Latitude coordinates occurrence records. Date: Date variable indicating species observed. Layer Dates: Format dates layer environmental data. Layers Path: Path bioclimatic layer corresponding year. sp_date_var: Name date variable column occurrence records. lon_lat_vars: Names longitude latitude columns. layers_ext: Final extension format environmental information (e.g., \".tif\").","code":""},{"path":"/reference/sp_temporal_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create a Species Temporal Data object (STD object). — sp_temporal_data","text":"","code":"sp_temporal_data(   occs,   longitude,   latitude,   sp_date_var,   occ_date_format = \"y\",   layers_date_format = \"y\",   layers_by_date_dir,   layers_ext = \"*.tif$\" )"},{"path":"/reference/sp_temporal_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create a Species Temporal Data object (STD object). — sp_temporal_data","text":"occs data.frame information occurrence records species modeled. longitude Name variable 'occs' containing longitude data. latitude Name variable 'occs' containing latitude data. sp_date_var Name date variable. occ_date_format Format dates occurrence records. Options: \"y\", \"ym\", \"ymd\", \"mdy\", \"\", \"dmy\". layers_date_format Format dates raster layers. Options: \"y\", \"ym\", \"ymd\", \"mdy\", \"\", \"dmy\". layers_by_date_dir Directory containing folders organized date raster layers environmental information. layers_ext Extension path raster layer archive (e.g., \".tif\").","code":""},{"path":"/reference/sp_temporal_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create a Species Temporal Data object (STD object). — sp_temporal_data","text":"Returns  sp.temporal.modeling object (list) coordinates occurrences points, years observation path temporal layers.","code":""},{"path":"/reference/sp_temporal_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to create a Species Temporal Data object (STD object). — sp_temporal_data","text":"format dates layer can organized particular pattern, example year/month/day (\"ymd\"), year/month (\"ym\"), just year (\"y\") arrangement like month/year (\"\"), month/year/day (\"myd\"), day/month/year (\"dmy\").","code":""},{"path":"/reference/sp_temporal_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to create a Species Temporal Data object (STD object). — sp_temporal_data","text":"","code":"library(tenm) #A data.frame with occurrences points information of Abronia graminea. # See help(abronia) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\")"},{"path":"/reference/tdf2swd.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal data.frame to Samples With Data format — tdf2swd","title":"Temporal data.frame to Samples With Data format — tdf2swd","text":"Converts temporal data.frame Samples Data (SWD) table use modeling platforms MaxEnt.","code":""},{"path":"/reference/tdf2swd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporal data.frame to Samples With Data format — tdf2swd","text":"","code":"tdf2swd(this_species, sp_name = \"sp\")"},{"path":"/reference/tdf2swd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporal data.frame to Samples With Data format — tdf2swd","text":"this_species object class sp.temporal.env (see ex_by_date ) sp.temporal.bg (see bg_by_date). sp_name Character vector specifying species name.","code":""},{"path":"/reference/tdf2swd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporal data.frame to Samples With Data format — tdf2swd","text":"data.frame formatted Samples Data (SWD) table.","code":""},{"path":"/reference/tdf2swd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporal data.frame to Samples With Data format — tdf2swd","text":"","code":"# \\donttest{ library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60) future::plan(\"multisession\",workers=2) abex <- tenm::ex_by_date(this_species = abtc,                          train_prop=0.7) abbg <- tenm::bg_by_date(abex,                          buffer_ngbs=10,n_bg=50000) future::plan(\"sequential\") # SWD table for occurrence records occ_swd <- tdf2swd(this_species=abex,sp_name=\"abro_gram\") # SWD table for background data bg_swd <- tdf2swd(this_species=abbg) # }"},{"path":"/reference/tenm_selection.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to find the best n-dimensional ellipsoid model — tenm_selection","title":"Function to find the best n-dimensional ellipsoid model — tenm_selection","text":"Finds best n-dimensional ellipsoid model using model calibration selection protocol ellipsoid models.","code":""},{"path":"/reference/tenm_selection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to find the best n-dimensional ellipsoid model — tenm_selection","text":"","code":"tenm_selection(   this_species,   omr_criteria = 0.1,   ellipsoid_level = 0.975,   vars2fit,   nvars_to_fit = c(2, 3),   proc = TRUE,   sub_sample = TRUE,   sub_sample_size = 1000,   RandomPercent = 50,   NoOfIteration = 1000,   parallel = TRUE,   n_cores = 4 )"},{"path":"/reference/tenm_selection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to find the best n-dimensional ellipsoid model — tenm_selection","text":"this_species object class sp.temporal.env representing species occurrence data organized date. See ex_by_date. omr_criteria Omission rate criterion used select best models. See ellipsoid_selection details ellipsoid_level Proportion points include inside ellipsoid. vars2fit vector variable names use building models. nvars_to_fit Number variables used build models. proc Logical. TRUE, compute partial ROC test model. sub_sample Logical. Indicates whether use subsample size sub_sample_size computing pROC values, recommended large datasets. sub_sample_size Size sub_sample use computing pROC values sub_sample TRUE. RandomPercent Percentage occurrence points sample randomly bootstrap Partial ROC test. See pROC. NoOfIteration Number iterations bootstrap Partial ROC test. See pROC. parallel Logical. Whether run computations parallel. Default TRUE. n_cores Number cores use parallelization. Default 4.","code":""},{"path":"/reference/tenm_selection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to find the best n-dimensional ellipsoid model — tenm_selection","text":"object class \"sp.temporal.selection\" containing metadata model statistics calibrated models, obtainable \"mods_table\" attribute. function internally uses ellipsoid_selection obtain model statistics. Note function inherits attributes classes \"sp.temporal.modeling\" (see sp_temporal_data), \"sp.temporal.env\" (see ex_by_date), \"sp.temporal.bg\" (see bg_by_date), thus information classes can extracted object.","code":""},{"path":"/reference/tenm_selection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to find the best n-dimensional ellipsoid model — tenm_selection","text":"","code":"# \\donttest{ library(tenm) data(\"abronia\") tempora_layers_dir <- system.file(\"extdata/bio\",package = \"tenm\") abt <- tenm::sp_temporal_data(occs = abronia,                               longitude = \"decimalLongitude\",                               latitude = \"decimalLatitude\",                               sp_date_var = \"year\",                               occ_date_format=\"y\",                               layers_date_format= \"y\",                               layers_by_date_dir = tempora_layers_dir,                               layers_ext=\"*.tif$\") abtc <- tenm::clean_dup_by_date(abt,threshold = 10/60) future::plan(\"multisession\",workers=2) abex <- tenm::ex_by_date(this_species = abtc,                          train_prop=0.7) abbg <- tenm::bg_by_date(abex,                          buffer_ngbs=10,n_bg=50000) future::plan(\"sequential\") varcorrs <- tenm::correlation_finder(environmental_data = abex$env_data[,-ncol(abex$env_data)],                                      method = \"spearman\",                                      threshold = 0.8,                                      verbose = FALSE) #> Warning: the standard deviation is zero vars2fit <- varcorrs$descriptors mod_sel <- tenm::tenm_selection(this_species = abbg,                                 omr_criteria =0.1,                                 ellipsoid_level=0.975,                                 vars2fit = vars2fit,                                 nvars_to_fit=c(2,3),                                 proc = T,                                 RandomPercent = 50,                                 NoOfIteration=1000,                                 parallel=TRUE,                                 n_cores=20) #> ------------------------------------------------------------------- #> \t\t**** Starting model selection process **** #> ------------------------------------------------------------------- #>  #> A total number of 36 models will be created for combinations of 9 variables taken by 2  #>  #> A total number of 84 models will be created for combinations of 9 variables taken by 3  #>  #> ------------------------------------------------------------------- #> \t **A total number of 120 models will be tested ** #>  #> ------------------------------------------------------------------- #> Doing calibration from model  1 to  40 in process  1  #>  #> Doing calibration from model  41 to  80 in process  2  #>  #> Doing calibration from model  81 to  120 in process  3  #>  #> Finishing calibration of models  1 to  40  #>  #> Finishing calibration of models  41 to  80  #>  #> Finishing calibration of models  81 to  120  #>  #> Finishing... #>  #> ------------------------------------------------------------------- #> \t 82 models passed omr_criteria for train data #> \t 17 models passed omr_criteria for test data #> \t 17 models passed omr_criteria for train and test data # Project potential distribution using bioclimatic layers for 1970-2000 # period. layers_70_00_dir <- system.file(\"extdata/bio_1970_2000\",package = \"tenm\") suit_1970_2000 <- predict(mod_sel,model_variables = NULL,                           layers_path = layers_70_00_dir,                           layers_ext = \".tif$\") #> No selected variables. Using the first model in mods_table #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% terra::plot(suit_1970_2000) colors <- c('#000004FF', '#040312FF', '#0B0725FF',             '#0B0725FF', '#160B38FF', '#160B38FF',             '#230C4CFF', '#310A5CFF', '#3F0966FF',             '#4D0D6CFF', '#5A116EFF', '#67166EFF',             '#741A6EFF', '#81206CFF', '#81206CFF',             '#8E2469FF', '#9B2964FF', '#A82E5FFF',             '#B53359FF', '#B53359FF', '#C03A50FF',             '#CC4248FF', '#D74B3FFF', '#E05536FF',             '#E9602CFF', '#EF6E21FF', '#F57B17FF',             '#F8890CFF', '#FB9806FF', '#FB9806FF',             '#FCA70DFF', '#FBB81DFF', '#F9C72FFF',             '#F9C72FFF', '#F6D847FF', '#F2E763FF',             '#F2E763FF', '#F3F585FF', '#FCFFA4FF',             '#FCFFA4FF') points(abtc$temporal_df[,1:2],pch=17,cex=1,        col=rev(colors)) legend(\"topleft\",legend = abtc$temporal_df$year[1:18],        col =rev(colors[1:18]),        cex=0.75,pch=17) legend(\"topright\",legend = unique(abtc$temporal_df$year[19:40]),        col = rev(colors[19:40]),        cex=0.75,pch=17)  # }"},{"path":"/news/index.html","id":"tenm-050","dir":"Changelog","previous_headings":"","what":"tenm 0.5.0","title":"tenm 0.5.0","text":"Initial CRAN submission. Time-specific niche modeling (TENM) novel approach allows calibrating niche models high temporal resolution spatial information, aims reduce niche estimation biases. makes tenm package stand distinctive capability calibrate models incorporating specific temporal information, whether yearly, monthly, even daily basis. feature distinguishes traditional models rely averaged temporal data. package functions : Time-specific spatial data thinning: data cleaning considering temporal dimension records. Time-specific environmental data extraction: extract environmental data variables considering temporal dimension data. Time-specific background generation: generate background points modeling process considering temporal dimension occurrence environmental data: number background points year proportional number occurrences year observation. Exporting time-specific information Samples Data format: export time-specific data Samples Data format table. function allows users use modeling algorithms MaxEnt GLMs. Time-specific model calibration: calibrate time-specific niche models using minimum volume ellipsoids. Itfits numerous models based combination user-set parameters, including different combinations environmental variables. Time-specific model selection: select n models fitted models using statistical model performances model selection criteria. Projecting time-specific niche models: project one selected models onto environmental /geographical space.","code":""}]
